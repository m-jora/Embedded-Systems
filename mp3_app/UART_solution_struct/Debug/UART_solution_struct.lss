
UART_solution_struct.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00000d06  00000d9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  00800138  00800138  00000dd2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000dd2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f27  00000000  00000000  00000fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010e4  00000000  00000000  00002edf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ce4  00000000  00000000  00003fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002cc  00000000  00000000  00004ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000082e  00000000  00000000  00004f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e13  00000000  00000000  000057a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000065b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	e6 e0       	ldi	r30, 0x06	; 6
  e0:	fd e0       	ldi	r31, 0x0D	; 13
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a8 33       	cpi	r26, 0x38	; 56
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a8 e3       	ldi	r26, 0x38	; 56
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a8 38       	cpi	r26, 0x88	; 136
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
 102:	0c 94 81 06 	jmp	0xd02	; 0xd02 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <GPIO_Output_Init>:
#include "GPIO_Outputs.h"

void GPIO_Output_Init(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	//Set Port Pin to be an output with initial value '1'
	(port_addr->GPIO_DDR)|=(pin_mask);    // Set DDRx to make port pin an output
 10a:	fc 01       	movw	r30, r24
 10c:	21 81       	ldd	r18, Z+1	; 0x01
 10e:	62 2b       	or	r22, r18
 110:	61 83       	std	Z+1, r22	; 0x01
 112:	08 95       	ret

00000114 <GPIO_Output_Set>:


void GPIO_Output_Set(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	//control = 0, LED off; control = 1, LED on 
		(port_addr->GPIO_PORT)|=(pin_mask);    // Set PORTx PORTx pin to value of '1'
 114:	fc 01       	movw	r30, r24
 116:	22 81       	ldd	r18, Z+2	; 0x02
 118:	62 2b       	or	r22, r18
 11a:	62 83       	std	Z+2, r22	; 0x02
 11c:	08 95       	ret

0000011e <GPIO_Output_Clear>:
}

void GPIO_Output_Clear(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
 11e:	fc 01       	movw	r30, r24
	//control = 0, LED off; control = 1, LED on
		(port_addr->GPIO_PORT)&=~(pin_mask);    // Clear PORTx pin to value of '0'
 120:	92 81       	ldd	r25, Z+2	; 0x02
 122:	60 95       	com	r22
 124:	69 23       	and	r22, r25
 126:	62 83       	std	Z+2, r22	; 0x02
 128:	08 95       	ret

0000012a <LEDS_Init>:

void LEDS_Init(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	//Set Port Pin to be an output with initial value '1'
	//port_addr->GPIO_PORT|=(pin_mask);    // Set PORTx for initial value of '1'
	GPIO_Output_Init(port_addr, pin_mask);    // Set DDRx to make port pin an output
 12a:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_Output_Init>
 12e:	08 95       	ret

00000130 <LEDS_Off>:


void LEDS_Off(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	//control = 0, LED off; control = 1, LED on 
		GPIO_Output_Set(port_addr, pin_mask);    // Set PORTx PORTx pin to value of '1'
 130:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_Output_Set>
 134:	08 95       	ret

00000136 <LEDS_On>:
}

void LEDS_On(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	//control = 0, LED off; control = 1, LED on
		GPIO_Output_Clear(port_addr, pin_mask);   // Clear PORTx pin to value of '0'
 136:	0e 94 8f 00 	call	0x11e	; 0x11e <GPIO_Output_Clear>
 13a:	08 95       	ret

0000013c <main>:

const char test_string[15] PROGMEM = "Hello World!\n\r";


int main(void)
{
 13c:	df 92       	push	r13
 13e:	ef 92       	push	r14
 140:	ff 92       	push	r15
 142:	0f 93       	push	r16
 144:	1f 93       	push	r17
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
	/* Replace with your application code */
	char temp8;
	char string_in_SRAM [41] = "This is a string in SRAM - Garrett Mason & Harrison Heselbarth";
	char *string_p;
	uint32_t temp32;
	LEDS_Off(LED0_port, LED0_pin);
 14a:	60 e8       	ldi	r22, 0x80	; 128
 14c:	86 e2       	ldi	r24, 0x26	; 38
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 98 00 	call	0x130	; 0x130 <LEDS_Off>
	LEDS_Init(LED0_port, LED0_pin);
 154:	60 e8       	ldi	r22, 0x80	; 128
 156:	86 e2       	ldi	r24, 0x26	; 38
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 95 00 	call	0x12a	; 0x12a <LEDS_Init>
	
	UART_Init(UART1,9600);
 15e:	60 e8       	ldi	r22, 0x80	; 128
 160:	75 e2       	ldi	r23, 0x25	; 37
 162:	88 ec       	ldi	r24, 0xC8	; 200
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 0a 03 	call	0x614	; 0x614 <UART_Init>
	uint8_t SPI_error = SPI_Master_Init(SPI0_base, 400000UL);
 16a:	40 e8       	ldi	r20, 0x80	; 128
 16c:	5a e1       	ldi	r21, 0x1A	; 26
 16e:	66 e0       	ldi	r22, 0x06	; 6
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	8c e4       	ldi	r24, 0x4C	; 76
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <SPI_Master_Init>
 17a:	7c 01       	movw	r14, r24
	uint8_t SD_error = SD_Card_Init();
 17c:	0e 94 2d 01 	call	0x25a	; 0x25a <SD_Card_Init>
 180:	d8 2e       	mov	r13, r24
	uint8_t SPI_error2 = SPI_Master_Init(SPI0_base, 25000000UL);
 182:	40 e4       	ldi	r20, 0x40	; 64
 184:	58 e7       	ldi	r21, 0x78	; 120
 186:	6d e7       	ldi	r22, 0x7D	; 125
 188:	71 e0       	ldi	r23, 0x01	; 1
 18a:	8c e4       	ldi	r24, 0x4C	; 76
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <SPI_Master_Init>
 192:	8c 01       	movw	r16, r24
	
	char * p_buffer;
	p_buffer = Export_print_buffer();
 194:	0e 94 41 03 	call	0x682	; 0x682 <Export_print_buffer>
 198:	d8 2f       	mov	r29, r24
 19a:	c9 2f       	mov	r28, r25
	sprintf(p_buffer, "\n\rSPI_error: 0x%X\n\r", SPI_error);
 19c:	c7 01       	movw	r24, r14
 19e:	99 27       	eor	r25, r25
 1a0:	9f 93       	push	r25
 1a2:	8f 93       	push	r24
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	9f 93       	push	r25
 1aa:	8f 93       	push	r24
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	0e 94 97 03 	call	0x72e	; 0x72e <sprintf>
	UART_Transmit_String(UART1, 0, p_buffer);
 1b4:	4d 2f       	mov	r20, r29
 1b6:	5c 2f       	mov	r21, r28
 1b8:	60 e0       	ldi	r22, 0x00	; 0
 1ba:	88 ec       	ldi	r24, 0xC8	; 200
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 44 03 	call	0x688	; 0x688 <UART_Transmit_String>
	sprintf(p_buffer, "SD_error: 0x%X\n\r", SD_error);
 1c2:	1f 92       	push	r1
 1c4:	df 92       	push	r13
 1c6:	84 e1       	ldi	r24, 0x14	; 20
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	9f 93       	push	r25
 1cc:	8f 93       	push	r24
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	0e 94 97 03 	call	0x72e	; 0x72e <sprintf>
	UART_Transmit_String(UART1, 0, p_buffer);
 1d6:	4d 2f       	mov	r20, r29
 1d8:	5c 2f       	mov	r21, r28
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	88 ec       	ldi	r24, 0xC8	; 200
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 44 03 	call	0x688	; 0x688 <UART_Transmit_String>
	sprintf(p_buffer, "SPI_error2: 0x%X\n\r", SPI_error2);
 1e4:	c8 01       	movw	r24, r16
 1e6:	99 27       	eor	r25, r25
 1e8:	9f 93       	push	r25
 1ea:	8f 93       	push	r24
 1ec:	85 e2       	ldi	r24, 0x25	; 37
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	9f 93       	push	r25
 1f2:	8f 93       	push	r24
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	0e 94 97 03 	call	0x72e	; 0x72e <sprintf>
	UART_Transmit_String(UART1, 0, p_buffer);
 1fc:	4d 2f       	mov	r20, r29
 1fe:	5c 2f       	mov	r21, r28
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	88 ec       	ldi	r24, 0xC8	; 200
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 44 03 	call	0x688	; 0x688 <UART_Transmit_String>

	LEDS_On(LED0_port, LED0_pin);
 20a:	60 e8       	ldi	r22, 0x80	; 128
 20c:	86 e2       	ldi	r24, 0x26	; 38
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 9b 00 	call	0x136	; 0x136 <LEDS_On>
	temp8=UART_Receive(UART1);
 214:	88 ec       	ldi	r24, 0xC8	; 200
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 3b 03 	call	0x676	; 0x676 <UART_Receive>
	UART_Transmit(UART1,temp8);
 21c:	68 2f       	mov	r22, r24
 21e:	88 ec       	ldi	r24, 0xC8	; 200
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 34 03 	call	0x668	; 0x668 <UART_Transmit>
 226:	8d b7       	in	r24, 0x3d	; 61
 228:	9e b7       	in	r25, 0x3e	; 62
 22a:	42 96       	adiw	r24, 0x12	; 18
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	f8 94       	cli
 230:	9e bf       	out	0x3e, r25	; 62
 232:	0f be       	out	0x3f, r0	; 63
 234:	8d bf       	out	0x3d, r24	; 61
		temp32=Long_Serial_Input(UART1);
		sprintf(string_p,"%lu \n\r",temp32);   // %lu is used for an unsigned long
		UART_Transmit_String(UART1,0,string_p);
		
	}
}
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	1f 91       	pop	r17
 240:	0f 91       	pop	r16
 242:	ff 90       	pop	r15
 244:	ef 90       	pop	r14
 246:	df 90       	pop	r13
 248:	08 95       	ret

0000024a <SD_CS_active>:
#define Standard_Capacity (9)

static uint8_t SD_Card_Type_g;

void SD_CS_active (volatile uint8_t *port, uint8_t pin){
	GPIO_Output_Clear(port, pin);
 24a:	70 e0       	ldi	r23, 0x00	; 0
 24c:	0e 94 8f 00 	call	0x11e	; 0x11e <GPIO_Output_Clear>
 250:	08 95       	ret

00000252 <SD_CS_inactive>:
}

void SD_CS_inactive (volatile uint8_t *port, uint8_t pin){
	GPIO_Output_Set(port, pin);
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_Output_Set>
 258:	08 95       	ret

0000025a <SD_Card_Init>:
}

uint8_t SD_Card_Init (void){
 25a:	ff 92       	push	r15
 25c:	0f 93       	push	r16
 25e:	1f 93       	push	r17
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	00 d0       	rcall	.+0      	; 0x266 <SD_Card_Init+0xc>
 266:	00 d0       	rcall	.+0      	; 0x268 <SD_Card_Init+0xe>
 268:	1f 92       	push	r1
 26a:	cd b7       	in	r28, 0x3d	; 61
 26c:	de b7       	in	r29, 0x3e	; 62
	uint8_t rec_array[5];
	uint8_t ACMD41_arg;
	uint8_t timeout = 0;
	
	if(error_status == no_errors){ //
		SD_CS_inactive(SD_CS_port, SD_CS_pin);
 26e:	60 e1       	ldi	r22, 0x10	; 16
 270:	83 e2       	ldi	r24, 0x23	; 35
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 29 01 	call	0x252	; 0x252 <SD_CS_inactive>
	
		SPI_Master_Init(SD_SPI_port, 400000UL);
 278:	40 e8       	ldi	r20, 0x80	; 128
 27a:	5a e1       	ldi	r21, 0x1A	; 26
 27c:	66 e0       	ldi	r22, 0x06	; 6
 27e:	70 e0       	ldi	r23, 0x00	; 0
 280:	8c e4       	ldi	r24, 0x4C	; 76
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <SPI_Master_Init>
		// Send at least 74 SCK pulses
		for(uint8_t i = 0; i < 10; i++){
 288:	10 e0       	ldi	r17, 0x00	; 0
 28a:	06 c0       	rjmp	.+12     	; 0x298 <SD_Card_Init+0x3e>
			SPI_Transfer(SPI0_base, 0xFF);
 28c:	6f ef       	ldi	r22, 0xFF	; 255
 28e:	8c e4       	ldi	r24, 0x4C	; 76
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 82 02 	call	0x504	; 0x504 <SPI_Transfer>
	if(error_status == no_errors){ //
		SD_CS_inactive(SD_CS_port, SD_CS_pin);
	
		SPI_Master_Init(SD_SPI_port, 400000UL);
		// Send at least 74 SCK pulses
		for(uint8_t i = 0; i < 10; i++){
 296:	1f 5f       	subi	r17, 0xFF	; 255
 298:	1a 30       	cpi	r17, 0x0A	; 10
 29a:	c0 f3       	brcs	.-16     	; 0x28c <SD_Card_Init+0x32>
		}
	}
	
	// CMD0
	if(error_status == no_errors){
		SD_CS_active(SD_CS_port, SD_CS_pin);
 29c:	60 e1       	ldi	r22, 0x10	; 16
 29e:	83 e2       	ldi	r24, 0x23	; 35
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 25 01 	call	0x24a	; 0x24a <SD_CS_active>
		error_flag = Send_Command(0, 0x00000000);	
 2a6:	40 e0       	ldi	r20, 0x00	; 0
 2a8:	50 e0       	ldi	r21, 0x00	; 0
 2aa:	ba 01       	movw	r22, r20
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	0e 94 89 02 	call	0x512	; 0x512 <Send_Command>
 2b2:	18 2f       	mov	r17, r24
		error_status = error_flag;	
		if(error_flag != 0x01){
 2b4:	81 30       	cpi	r24, 0x01	; 1
 2b6:	39 f0       	breq	.+14     	; 0x2c6 <SD_Card_Init+0x6c>
			error_flag = Receive_Response(1, rec_array); //5 after c8 C58
 2b8:	be 01       	movw	r22, r28
 2ba:	6f 5f       	subi	r22, 0xFF	; 255
 2bc:	7f 4f       	sbci	r23, 0xFF	; 255
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	0e 94 c7 02 	call	0x58e	; 0x58e <Receive_Response>
 2c4:	18 2f       	mov	r17, r24
		}
		SD_CS_inactive(SD_CS_port, SD_CS_pin);
 2c6:	60 e1       	ldi	r22, 0x10	; 16
 2c8:	83 e2       	ldi	r24, 0x23	; 35
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 29 01 	call	0x252	; 0x252 <SD_CS_inactive>
		error_status = error_flag;
	}
	
	// CMD8
	if(error_status == no_errors){
 2d0:	11 11       	cpse	r17, r1
 2d2:	2e c0       	rjmp	.+92     	; 0x330 <SD_Card_Init+0xd6>
		SD_CS_active(SD_CS_port, SD_CS_pin);
 2d4:	60 e1       	ldi	r22, 0x10	; 16
 2d6:	83 e2       	ldi	r24, 0x23	; 35
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 25 01 	call	0x24a	; 0x24a <SD_CS_active>
		error_flag = Send_Command(8, 0x000001AA);
 2de:	4a ea       	ldi	r20, 0xAA	; 170
 2e0:	51 e0       	ldi	r21, 0x01	; 1
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	70 e0       	ldi	r23, 0x00	; 0
 2e6:	88 e0       	ldi	r24, 0x08	; 8
 2e8:	0e 94 89 02 	call	0x512	; 0x512 <Send_Command>
 2ec:	08 2f       	mov	r16, r24
		if(error_flag == no_errors){ //Check if R1 is not 0x01 (error)
 2ee:	81 11       	cpse	r24, r1
 2f0:	07 c0       	rjmp	.+14     	; 0x300 <SD_Card_Init+0xa6>
			error_flag = Receive_Response(5, rec_array);
 2f2:	be 01       	movw	r22, r28
 2f4:	6f 5f       	subi	r22, 0xFF	; 255
 2f6:	7f 4f       	sbci	r23, 0xFF	; 255
 2f8:	85 e0       	ldi	r24, 0x05	; 5
 2fa:	0e 94 c7 02 	call	0x58e	; 0x58e <Receive_Response>
 2fe:	08 2f       	mov	r16, r24
		}
		SD_CS_inactive(SD_CS_port, SD_CS_pin);
 300:	60 e1       	ldi	r22, 0x10	; 16
 302:	83 e2       	ldi	r24, 0x23	; 35
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e 94 29 01 	call	0x252	; 0x252 <SD_CS_inactive>
		if((error_flag == no_errors) && (rec_array[0] == 0x01)){ //Is 0x00 when we want it to be 0x01
 30a:	01 11       	cpse	r16, r1
 30c:	0b c0       	rjmp	.+22     	; 0x324 <SD_Card_Init+0xca>
 30e:	89 81       	ldd	r24, Y+1	; 0x01
 310:	81 30       	cpi	r24, 0x01	; 1
 312:	41 f4       	brne	.+16     	; 0x324 <SD_Card_Init+0xca>
			if((rec_array[3] == 0x01) && (rec_array[4] == 0xAA)){
 314:	8c 81       	ldd	r24, Y+4	; 0x04
 316:	81 30       	cpi	r24, 0x01	; 1
 318:	51 f4       	brne	.+20     	; 0x32e <SD_Card_Init+0xd4>
 31a:	8d 81       	ldd	r24, Y+5	; 0x05
 31c:	8a 3a       	cpi	r24, 0xAA	; 170
 31e:	41 f0       	breq	.+16     	; 0x330 <SD_Card_Init+0xd6>
				ACMD41_arg = 0x40000000; // High-Capacity Support
				SD_Card_Type_g = High_Capacity;
			}
			else{
				error_status = incompatible_voltage;
 320:	1d ef       	ldi	r17, 0xFD	; 253
 322:	06 c0       	rjmp	.+12     	; 0x330 <SD_Card_Init+0xd6>
			}
		}
		else if(rec_array[0] == 0x05){
 324:	89 81       	ldd	r24, Y+1	; 0x01
 326:	85 30       	cpi	r24, 0x05	; 5
 328:	19 f0       	breq	.+6      	; 0x330 <SD_Card_Init+0xd6>
			error_status = no_errors;
			ACMD41_arg = 0x00000000;
			SD_Card_Type_g = Standard_Capacity;
		}
		else{
			error_status = error_flag;
 32a:	10 2f       	mov	r17, r16
 32c:	01 c0       	rjmp	.+2      	; 0x330 <SD_Card_Init+0xd6>
			if((rec_array[3] == 0x01) && (rec_array[4] == 0xAA)){
				ACMD41_arg = 0x40000000; // High-Capacity Support
				SD_Card_Type_g = High_Capacity;
			}
			else{
				error_status = incompatible_voltage;
 32e:	1d ef       	ldi	r17, 0xFD	; 253
			error_status = error_flag;
		}
	}
	
	// CMD58
	if(error_status == no_errors){
 330:	11 11       	cpse	r17, r1
 332:	18 c0       	rjmp	.+48     	; 0x364 <SD_Card_Init+0x10a>
		SD_CS_active(SD_CS_port, SD_CS_pin);
 334:	60 e1       	ldi	r22, 0x10	; 16
 336:	83 e2       	ldi	r24, 0x23	; 35
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 25 01 	call	0x24a	; 0x24a <SD_CS_active>
		error_flag = Send_Command(58, 0x00000000);
 33e:	40 e0       	ldi	r20, 0x00	; 0
 340:	50 e0       	ldi	r21, 0x00	; 0
 342:	ba 01       	movw	r22, r20
 344:	8a e3       	ldi	r24, 0x3A	; 58
 346:	0e 94 89 02 	call	0x512	; 0x512 <Send_Command>
		if(error_flag == no_errors){ //Check if R1 is not 0x01 (error)
 34a:	81 11       	cpse	r24, r1
 34c:	06 c0       	rjmp	.+12     	; 0x35a <SD_Card_Init+0x100>
			error_flag = Receive_Response(5, rec_array);
 34e:	be 01       	movw	r22, r28
 350:	6f 5f       	subi	r22, 0xFF	; 255
 352:	7f 4f       	sbci	r23, 0xFF	; 255
 354:	85 e0       	ldi	r24, 0x05	; 5
 356:	0e 94 c7 02 	call	0x58e	; 0x58e <Receive_Response>
		}
		SD_CS_inactive(SD_CS_port, SD_CS_pin);
 35a:	60 e1       	ldi	r22, 0x10	; 16
 35c:	83 e2       	ldi	r24, 0x23	; 35
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 29 01 	call	0x252	; 0x252 <SD_CS_inactive>
			}
		}
	}
	
	// ACMD41
	if(error_status == no_errors){
 364:	11 11       	cpse	r17, r1
 366:	3b c0       	rjmp	.+118    	; 0x3de <SD_Card_Init+0x184>
		SD_CS_active(SD_CS_port, SD_CS_pin);
 368:	60 e1       	ldi	r22, 0x10	; 16
 36a:	83 e2       	ldi	r24, 0x23	; 35
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 25 01 	call	0x24a	; 0x24a <SD_CS_active>
 372:	f1 2e       	mov	r15, r17
uint8_t SD_Card_Init (void){
	uint8_t error_status = no_errors;
	uint8_t error_flag = no_errors;
	uint8_t rec_array[5];
	uint8_t ACMD41_arg;
	uint8_t timeout = 0;
 374:	00 e0       	ldi	r16, 0x00	; 0
	// ACMD41
	if(error_status == no_errors){
		SD_CS_active(SD_CS_port, SD_CS_pin);
		
		do{
			error_flag = Send_Command(55, 0x00000000);
 376:	40 e0       	ldi	r20, 0x00	; 0
 378:	50 e0       	ldi	r21, 0x00	; 0
 37a:	ba 01       	movw	r22, r20
 37c:	87 e3       	ldi	r24, 0x37	; 55
 37e:	0e 94 89 02 	call	0x512	; 0x512 <Send_Command>
			if(error_flag == no_errors){ //Check if R1 is not 0x01 (error)
 382:	81 11       	cpse	r24, r1
 384:	06 c0       	rjmp	.+12     	; 0x392 <SD_Card_Init+0x138>
				error_flag = Receive_Response(1, rec_array);
 386:	be 01       	movw	r22, r28
 388:	6f 5f       	subi	r22, 0xFF	; 255
 38a:	7f 4f       	sbci	r23, 0xFF	; 255
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	0e 94 c7 02 	call	0x58e	; 0x58e <Receive_Response>
			}
		
			if((error_flag == no_errors) && (rec_array[0] == 0x01)){
 392:	81 11       	cpse	r24, r1
 394:	14 c0       	rjmp	.+40     	; 0x3be <SD_Card_Init+0x164>
 396:	89 81       	ldd	r24, Y+1	; 0x01
 398:	81 30       	cpi	r24, 0x01	; 1
 39a:	89 f4       	brne	.+34     	; 0x3be <SD_Card_Init+0x164>
				error_status = no_errors;
				error_flag = Send_Command(41, ACMD41_arg);
 39c:	40 e0       	ldi	r20, 0x00	; 0
 39e:	50 e0       	ldi	r21, 0x00	; 0
 3a0:	ba 01       	movw	r22, r20
 3a2:	89 e2       	ldi	r24, 0x29	; 41
 3a4:	0e 94 89 02 	call	0x512	; 0x512 <Send_Command>
				error_flag = Receive_Response(1, rec_array);
 3a8:	be 01       	movw	r22, r28
 3aa:	6f 5f       	subi	r22, 0xFF	; 255
 3ac:	7f 4f       	sbci	r23, 0xFF	; 255
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	0e 94 c7 02 	call	0x58e	; 0x58e <Receive_Response>
				if(rec_array[0] != 0x00 && rec_array[0] != 0x01){
 3b4:	89 81       	ldd	r24, Y+1	; 0x01
 3b6:	82 30       	cpi	r24, 0x02	; 2
 3b8:	40 f4       	brcc	.+16     	; 0x3ca <SD_Card_Init+0x170>
					error_status = 0xFE;
					break;
				}
				
				timeout++;
 3ba:	0f 5f       	subi	r16, 0xFF	; 255
			if(error_flag == no_errors){ //Check if R1 is not 0x01 (error)
				error_flag = Receive_Response(1, rec_array);
			}
		
			if((error_flag == no_errors) && (rec_array[0] == 0x01)){
				error_status = no_errors;
 3bc:	f1 2e       	mov	r15, r17
					break;
				}
				
				timeout++;
			}
		}while((rec_array[0] != 0x00) && (timeout != 0));	
 3be:	89 81       	ldd	r24, Y+1	; 0x01
 3c0:	88 23       	and	r24, r24
 3c2:	39 f0       	breq	.+14     	; 0x3d2 <SD_Card_Init+0x178>
 3c4:	01 11       	cpse	r16, r1
 3c6:	d7 cf       	rjmp	.-82     	; 0x376 <SD_Card_Init+0x11c>
 3c8:	04 c0       	rjmp	.+8      	; 0x3d2 <SD_Card_Init+0x178>
			if((error_flag == no_errors) && (rec_array[0] == 0x01)){
				error_status = no_errors;
				error_flag = Send_Command(41, ACMD41_arg);
				error_flag = Receive_Response(1, rec_array);
				if(rec_array[0] != 0x00 && rec_array[0] != 0x01){
					error_status = 0xFE;
 3ca:	0f 2e       	mov	r0, r31
 3cc:	fe ef       	ldi	r31, 0xFE	; 254
 3ce:	ff 2e       	mov	r15, r31
 3d0:	f0 2d       	mov	r31, r0
				}
				
				timeout++;
			}
		}while((rec_array[0] != 0x00) && (timeout != 0));	
		SD_CS_inactive(SD_CS_port, SD_CS_pin);
 3d2:	60 e1       	ldi	r22, 0x10	; 16
 3d4:	83 e2       	ldi	r24, 0x23	; 35
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 29 01 	call	0x252	; 0x252 <SD_CS_inactive>
 3dc:	1f 2d       	mov	r17, r15
				error_status = 0xFF;
			}
		}
	}
	return error_status;
 3de:	81 2f       	mov	r24, r17
 3e0:	0f 90       	pop	r0
 3e2:	0f 90       	pop	r0
 3e4:	0f 90       	pop	r0
 3e6:	0f 90       	pop	r0
 3e8:	0f 90       	pop	r0
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	1f 91       	pop	r17
 3f0:	0f 91       	pop	r16
 3f2:	ff 90       	pop	r15
 3f4:	08 95       	ret

000003f6 <SPI_Master_Init>:
#include "SPI.h"
#include "board_struct.h"
#include "GPIO_Outputs.h"

uint8_t SPI_Master_Init(uint8_t volatile *SPI_addr, uint32_t clock_rate)
{
 3f6:	1f 93       	push	r17
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	ec 01       	movw	r28, r24
 3fe:	9a 01       	movw	r18, r20
 400:	ab 01       	movw	r20, r22
	uint8_t return_value = 0x00;
	uint32_t divider = (F_CPU / F_DIV) / (clock_rate);
 402:	60 e0       	ldi	r22, 0x00	; 0
 404:	74 e2       	ldi	r23, 0x24	; 36
 406:	84 ef       	ldi	r24, 0xF4	; 244
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 75 03 	call	0x6ea	; 0x6ea <__udivmodsi4>
	
	if(divider < 2){
 40e:	22 30       	cpi	r18, 0x02	; 2
 410:	31 05       	cpc	r19, r1
 412:	41 05       	cpc	r20, r1
 414:	51 05       	cpc	r21, r1
 416:	30 f4       	brcc	.+12     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
		*(SPI_addr + SPCR) = ((1<<SPE) | (1<<MSTR) | (CPOL_bit << CPOL) | (CPHA_bit<<CPHA) | 0<<0);
 418:	80 e5       	ldi	r24, 0x50	; 80
 41a:	88 83       	st	Y, r24
		*(SPI_addr+SPSR) = 1;
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	89 83       	std	Y+1, r24	; 0x01
#include "board_struct.h"
#include "GPIO_Outputs.h"

uint8_t SPI_Master_Init(uint8_t volatile *SPI_addr, uint32_t clock_rate)
{
	uint8_t return_value = 0x00;
 420:	10 e0       	ldi	r17, 0x00	; 0
 422:	3f c0       	rjmp	.+126    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
	
	if(divider < 2){
		*(SPI_addr + SPCR) = ((1<<SPE) | (1<<MSTR) | (CPOL_bit << CPOL) | (CPHA_bit<<CPHA) | 0<<0);
		*(SPI_addr+SPSR) = 1;
	}
	else if(divider < 4){
 424:	24 30       	cpi	r18, 0x04	; 4
 426:	31 05       	cpc	r19, r1
 428:	41 05       	cpc	r20, r1
 42a:	51 05       	cpc	r21, r1
 42c:	28 f4       	brcc	.+10     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
		*(SPI_addr + SPCR) = ((1<<SPE) | (1<<MSTR) | (CPOL_bit << CPOL) | (CPHA_bit<<CPHA) | 0<<0);
 42e:	80 e5       	ldi	r24, 0x50	; 80
 430:	88 83       	st	Y, r24
		*(SPI_addr+SPSR) = 0;
 432:	19 82       	std	Y+1, r1	; 0x01
#include "board_struct.h"
#include "GPIO_Outputs.h"

uint8_t SPI_Master_Init(uint8_t volatile *SPI_addr, uint32_t clock_rate)
{
	uint8_t return_value = 0x00;
 434:	10 e0       	ldi	r17, 0x00	; 0
 436:	35 c0       	rjmp	.+106    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
	}
	else if(divider < 4){
		*(SPI_addr + SPCR) = ((1<<SPE) | (1<<MSTR) | (CPOL_bit << CPOL) | (CPHA_bit<<CPHA) | 0<<0);
		*(SPI_addr+SPSR) = 0;
	}
	else if(divider < 8){
 438:	28 30       	cpi	r18, 0x08	; 8
 43a:	31 05       	cpc	r19, r1
 43c:	41 05       	cpc	r20, r1
 43e:	51 05       	cpc	r21, r1
 440:	30 f4       	brcc	.+12     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
		*(SPI_addr + SPCR) = ((1<<SPE) | (1<<MSTR) | (CPOL_bit << CPOL) | (CPHA_bit<<CPHA) | 1<<0);
 442:	81 e5       	ldi	r24, 0x51	; 81
 444:	88 83       	st	Y, r24
		*(SPI_addr+SPSR) = 1;
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	89 83       	std	Y+1, r24	; 0x01
#include "board_struct.h"
#include "GPIO_Outputs.h"

uint8_t SPI_Master_Init(uint8_t volatile *SPI_addr, uint32_t clock_rate)
{
	uint8_t return_value = 0x00;
 44a:	10 e0       	ldi	r17, 0x00	; 0
 44c:	2a c0       	rjmp	.+84     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
	}
	else if(divider < 8){
		*(SPI_addr + SPCR) = ((1<<SPE) | (1<<MSTR) | (CPOL_bit << CPOL) | (CPHA_bit<<CPHA) | 1<<0);
		*(SPI_addr+SPSR) = 1;
	}
	else if(divider < 16){
 44e:	20 31       	cpi	r18, 0x10	; 16
 450:	31 05       	cpc	r19, r1
 452:	41 05       	cpc	r20, r1
 454:	51 05       	cpc	r21, r1
 456:	28 f4       	brcc	.+10     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
		*(SPI_addr + SPCR) = ((1<<SPE) | (1<<MSTR) | (CPOL_bit << CPOL) | (CPHA_bit<<CPHA) | 1<<0);
 458:	81 e5       	ldi	r24, 0x51	; 81
 45a:	88 83       	st	Y, r24
		*(SPI_addr+SPSR) = 0;
 45c:	19 82       	std	Y+1, r1	; 0x01
#include "board_struct.h"
#include "GPIO_Outputs.h"

uint8_t SPI_Master_Init(uint8_t volatile *SPI_addr, uint32_t clock_rate)
{
	uint8_t return_value = 0x00;
 45e:	10 e0       	ldi	r17, 0x00	; 0
 460:	20 c0       	rjmp	.+64     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
	}
	else if(divider < 16){
		*(SPI_addr + SPCR) = ((1<<SPE) | (1<<MSTR) | (CPOL_bit << CPOL) | (CPHA_bit<<CPHA) | 1<<0);
		*(SPI_addr+SPSR) = 0;
	}
	else if(divider < 32){
 462:	20 32       	cpi	r18, 0x20	; 32
 464:	31 05       	cpc	r19, r1
 466:	41 05       	cpc	r20, r1
 468:	51 05       	cpc	r21, r1
 46a:	30 f4       	brcc	.+12     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
		*(SPI_addr + SPCR) = ((1<<SPE) | (1<<MSTR) | (CPOL_bit << CPOL) | (CPHA_bit<<CPHA) | 2<<0);
 46c:	82 e5       	ldi	r24, 0x52	; 82
 46e:	88 83       	st	Y, r24
		*(SPI_addr+SPSR) = 1;
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	89 83       	std	Y+1, r24	; 0x01
#include "board_struct.h"
#include "GPIO_Outputs.h"

uint8_t SPI_Master_Init(uint8_t volatile *SPI_addr, uint32_t clock_rate)
{
	uint8_t return_value = 0x00;
 474:	10 e0       	ldi	r17, 0x00	; 0
 476:	15 c0       	rjmp	.+42     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
	}
	else if(divider < 32){
		*(SPI_addr + SPCR) = ((1<<SPE) | (1<<MSTR) | (CPOL_bit << CPOL) | (CPHA_bit<<CPHA) | 2<<0);
		*(SPI_addr+SPSR) = 1;
	}
	else if(divider < 64){
 478:	20 34       	cpi	r18, 0x40	; 64
 47a:	31 05       	cpc	r19, r1
 47c:	41 05       	cpc	r20, r1
 47e:	51 05       	cpc	r21, r1
 480:	28 f4       	brcc	.+10     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
		*(SPI_addr + SPCR) = ((1<<SPE) | (1<<MSTR) | (CPOL_bit << CPOL) | (CPHA_bit<<CPHA) | 2<<0);//Roger Changed
 482:	82 e5       	ldi	r24, 0x52	; 82
 484:	88 83       	st	Y, r24
		*(SPI_addr+SPSR) = 0;
 486:	19 82       	std	Y+1, r1	; 0x01
#include "board_struct.h"
#include "GPIO_Outputs.h"

uint8_t SPI_Master_Init(uint8_t volatile *SPI_addr, uint32_t clock_rate)
{
	uint8_t return_value = 0x00;
 488:	10 e0       	ldi	r17, 0x00	; 0
 48a:	0b c0       	rjmp	.+22     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
	}
	else if(divider < 64){
		*(SPI_addr + SPCR) = ((1<<SPE) | (1<<MSTR) | (CPOL_bit << CPOL) | (CPHA_bit<<CPHA) | 2<<0);//Roger Changed
		*(SPI_addr+SPSR) = 0;
	}
	else if(divider < 128){
 48c:	20 38       	cpi	r18, 0x80	; 128
 48e:	31 05       	cpc	r19, r1
 490:	41 05       	cpc	r20, r1
 492:	51 05       	cpc	r21, r1
 494:	28 f4       	brcc	.+10     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
		*(SPI_addr + SPCR) = ((1<<SPE) | (1<<MSTR) | (CPOL_bit << CPOL) | (CPHA_bit<<CPHA) | 3<<0);
 496:	83 e5       	ldi	r24, 0x53	; 83
 498:	88 83       	st	Y, r24
		*(SPI_addr+SPSR) = 0;
 49a:	19 82       	std	Y+1, r1	; 0x01
#include "board_struct.h"
#include "GPIO_Outputs.h"

uint8_t SPI_Master_Init(uint8_t volatile *SPI_addr, uint32_t clock_rate)
{
	uint8_t return_value = 0x00;
 49c:	10 e0       	ldi	r17, 0x00	; 0
 49e:	01 c0       	rjmp	.+2      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
	else if(divider < 128){
		*(SPI_addr + SPCR) = ((1<<SPE) | (1<<MSTR) | (CPOL_bit << CPOL) | (CPHA_bit<<CPHA) | 3<<0);
		*(SPI_addr+SPSR) = 0;
	}
	else{
		return_value = clock_rate_error;
 4a0:	1f ef       	ldi	r17, 0xFF	; 255
	}

	//Initializing MOSI and SCK
	if(SPI_addr == SPI0_base){
 4a2:	cc 34       	cpi	r28, 0x4C	; 76
 4a4:	d1 05       	cpc	r29, r1
 4a6:	a9 f4       	brne	.+42     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
		//Initializing MOSI
		GPIO_Output_Set(PB, (1<<5));
 4a8:	60 e2       	ldi	r22, 0x20	; 32
 4aa:	83 e2       	ldi	r24, 0x23	; 35
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_Output_Set>
		GPIO_Output_Init(PB, (1<<5));
 4b2:	60 e2       	ldi	r22, 0x20	; 32
 4b4:	83 e2       	ldi	r24, 0x23	; 35
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_Output_Init>
		
		if(CPOL_bit == 0){
			//Setting SCK to idle state
			GPIO_Output_Clear(PB, (1<<7));
 4bc:	60 e8       	ldi	r22, 0x80	; 128
 4be:	83 e2       	ldi	r24, 0x23	; 35
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	0e 94 8f 00 	call	0x11e	; 0x11e <GPIO_Output_Clear>
			GPIO_Output_Init(PB, (1<<7));
 4c6:	60 e8       	ldi	r22, 0x80	; 128
 4c8:	83 e2       	ldi	r24, 0x23	; 35
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_Output_Init>
 4d0:	14 c0       	rjmp	.+40     	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
			GPIO_Output_Init(PB, (0<<7));
		}
	}
	else{
		//Initializing MOSI
		GPIO_Output_Set(PE, (1<<3));
 4d2:	68 e0       	ldi	r22, 0x08	; 8
 4d4:	8c e2       	ldi	r24, 0x2C	; 44
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_Output_Set>
		GPIO_Output_Init(PE, (1<<3));
 4dc:	68 e0       	ldi	r22, 0x08	; 8
 4de:	8c e2       	ldi	r24, 0x2C	; 44
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_Output_Init>
		
		if(CPOL_bit == 0){
			//Setting SCK to idle state
			GPIO_Output_Clear(PD, (1<<7));
 4e6:	60 e8       	ldi	r22, 0x80	; 128
 4e8:	89 e2       	ldi	r24, 0x29	; 41
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 8f 00 	call	0x11e	; 0x11e <GPIO_Output_Clear>
			GPIO_Output_Init(PD, (1<<7));
 4f0:	60 e8       	ldi	r22, 0x80	; 128
 4f2:	89 e2       	ldi	r24, 0x29	; 41
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_Output_Init>
			GPIO_Output_Init(PD, (0<<7));
		}
	}
	
	return return_value;
}
 4fa:	81 2f       	mov	r24, r17
 4fc:	df 91       	pop	r29
 4fe:	cf 91       	pop	r28
 500:	1f 91       	pop	r17
 502:	08 95       	ret

00000504 <SPI_Transfer>:

uint8_t SPI_Transfer(uint8_t volatile *SPI_addr, uint8_t send_value){
 504:	fc 01       	movw	r30, r24
	uint8_t status;
	
	*(SPI_addr + SPDR) = send_value;
 506:	62 83       	std	Z+2, r22	; 0x02
	
	do{
		status = *(SPI_addr + SPSR);
 508:	91 81       	ldd	r25, Z+1	; 0x01
	}while((status & 0x80) == 0);
 50a:	99 23       	and	r25, r25
 50c:	ec f7       	brge	.-6      	; 0x508 <SPI_Transfer+0x4>
	
	return *(SPI_addr + SPDR);
 50e:	82 81       	ldd	r24, Z+2	; 0x02
}
 510:	08 95       	ret

00000512 <Send_Command>:

uint8_t Send_Command (uint8_t command, uint32_t argument){
 512:	cf 92       	push	r12
 514:	df 92       	push	r13
 516:	ef 92       	push	r14
 518:	ff 92       	push	r15
 51a:	cf 93       	push	r28
 51c:	df 93       	push	r29
	uint8_t return_value;
	uint8_t illegal_command = 0xFF;
	uint8_t send_value;
	
	if(command < 64){
 51e:	80 34       	cpi	r24, 0x40	; 64
 520:	d8 f0       	brcs	.+54     	; 0x558 <Send_Command+0x46>
		return_value = no_errors;
	}
	else{
		return_value = illegal_command;
		return return_value;
 522:	8f ef       	ldi	r24, 0xFF	; 255
 524:	2d c0       	rjmp	.+90     	; 0x580 <Send_Command+0x6e>
	}
	
	send_value = 0x40 | command;
	for(uint8_t index = 0; index < 4; index++){
		send_value = (uint8_t)(argument >> (24 - (index * 8)));
 526:	23 e0       	ldi	r18, 0x03	; 3
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	2c 1b       	sub	r18, r28
 52c:	31 09       	sbc	r19, r1
 52e:	22 0f       	add	r18, r18
 530:	33 1f       	adc	r19, r19
 532:	22 0f       	add	r18, r18
 534:	33 1f       	adc	r19, r19
 536:	22 0f       	add	r18, r18
 538:	33 1f       	adc	r19, r19
 53a:	c7 01       	movw	r24, r14
 53c:	b6 01       	movw	r22, r12
 53e:	04 c0       	rjmp	.+8      	; 0x548 <Send_Command+0x36>
 540:	96 95       	lsr	r25
 542:	87 95       	ror	r24
 544:	77 95       	ror	r23
 546:	67 95       	ror	r22
 548:	2a 95       	dec	r18
 54a:	d2 f7       	brpl	.-12     	; 0x540 <Send_Command+0x2e>
		SPI_Transfer(SD_SPI_port, send_value);
 54c:	8c e4       	ldi	r24, 0x4C	; 76
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	0e 94 82 02 	call	0x504	; 0x504 <SPI_Transfer>
		return_value = illegal_command;
		return return_value;
	}
	
	send_value = 0x40 | command;
	for(uint8_t index = 0; index < 4; index++){
 554:	cf 5f       	subi	r28, 0xFF	; 255
 556:	04 c0       	rjmp	.+8      	; 0x560 <Send_Command+0x4e>
 558:	6a 01       	movw	r12, r20
 55a:	7b 01       	movw	r14, r22
 55c:	d8 2f       	mov	r29, r24
 55e:	c0 e0       	ldi	r28, 0x00	; 0
 560:	c4 30       	cpi	r28, 0x04	; 4
 562:	08 f3       	brcs	.-62     	; 0x526 <Send_Command+0x14>
		send_value = (uint8_t)(argument >> (24 - (index * 8)));
		SPI_Transfer(SD_SPI_port, send_value);
	}
	
	if(command == CMD0){
 564:	d0 34       	cpi	r29, 0x40	; 64
 566:	21 f0       	breq	.+8      	; 0x570 <Send_Command+0x5e>
		send_value = 0x95;
	}
	else if (command == CMD8){
 568:	d8 34       	cpi	r29, 0x48	; 72
 56a:	21 f4       	brne	.+8      	; 0x574 <Send_Command+0x62>
		send_value = 0x87;
 56c:	67 e8       	ldi	r22, 0x87	; 135
 56e:	03 c0       	rjmp	.+6      	; 0x576 <Send_Command+0x64>
		send_value = (uint8_t)(argument >> (24 - (index * 8)));
		SPI_Transfer(SD_SPI_port, send_value);
	}
	
	if(command == CMD0){
		send_value = 0x95;
 570:	65 e9       	ldi	r22, 0x95	; 149
 572:	01 c0       	rjmp	.+2      	; 0x576 <Send_Command+0x64>
	}
	else if (command == CMD8){
		send_value = 0x87;
	}
	else{
		send_value = 0x01;
 574:	61 e0       	ldi	r22, 0x01	; 1
	}
	
	SPI_Transfer(SD_SPI_port, send_value);	
 576:	8c e4       	ldi	r24, 0x4C	; 76
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	0e 94 82 02 	call	0x504	; 0x504 <SPI_Transfer>
	return return_value;
 57e:	80 e0       	ldi	r24, 0x00	; 0
}
 580:	df 91       	pop	r29
 582:	cf 91       	pop	r28
 584:	ff 90       	pop	r15
 586:	ef 90       	pop	r14
 588:	df 90       	pop	r13
 58a:	cf 90       	pop	r12
 58c:	08 95       	ret

0000058e <Receive_Response>:

uint8_t Receive_Response (uint8_t number_of_bytes, uint8_t * array_name) {
 58e:	ff 92       	push	r15
 590:	0f 93       	push	r16
 592:	1f 93       	push	r17
 594:	cf 93       	push	r28
 596:	df 93       	push	r29
 598:	f8 2e       	mov	r15, r24
 59a:	8b 01       	movw	r16, r22
	uint8_t return_value = no_errors;
	uint8_t SPI_timeout_error = 0xFF;
	uint8_t SD_comm_error = 0xFF;
	uint8_t timeout = 0;
 59c:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t rcvd_value;
	
	do{
		rcvd_value = SPI_Transfer(SD_SPI_port, 0xFF);
 59e:	6f ef       	ldi	r22, 0xFF	; 255
 5a0:	8c e4       	ldi	r24, 0x4C	; 76
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	0e 94 82 02 	call	0x504	; 0x504 <SPI_Transfer>
		timeout++;
 5a8:	cf 5f       	subi	r28, 0xFF	; 255
	}while((rcvd_value == 0xFF) && (timeout != 0));
 5aa:	8f 3f       	cpi	r24, 0xFF	; 255
 5ac:	11 f4       	brne	.+4      	; 0x5b2 <Receive_Response+0x24>
 5ae:	c1 11       	cpse	r28, r1
 5b0:	f6 cf       	rjmp	.-20     	; 0x59e <Receive_Response+0x10>
	
	if(timeout == 0){
 5b2:	cc 23       	and	r28, r28
 5b4:	11 f1       	breq	.+68     	; 0x5fa <Receive_Response+0x6c>
		return_value = SPI_timeout_error;
	}
	else if ((rcvd_value & 0xFE) != 0x00){
 5b6:	98 2f       	mov	r25, r24
 5b8:	9e 7f       	andi	r25, 0xFE	; 254
 5ba:	21 f0       	breq	.+8      	; 0x5c4 <Receive_Response+0x36>
		*array_name = rcvd_value;
 5bc:	f8 01       	movw	r30, r16
 5be:	80 83       	st	Z, r24
		return_value = SD_comm_error;
 5c0:	cf ef       	ldi	r28, 0xFF	; 255
 5c2:	1c c0       	rjmp	.+56     	; 0x5fc <Receive_Response+0x6e>
	}
	else{
		*array_name = rcvd_value;
 5c4:	f8 01       	movw	r30, r16
 5c6:	80 83       	st	Z, r24
		if(number_of_bytes > 1){
 5c8:	f1 e0       	ldi	r31, 0x01	; 1
 5ca:	ff 15       	cp	r31, r15
 5cc:	68 f0       	brcs	.+26     	; 0x5e8 <Receive_Response+0x5a>
	SPI_Transfer(SD_SPI_port, send_value);	
	return return_value;
}

uint8_t Receive_Response (uint8_t number_of_bytes, uint8_t * array_name) {
	uint8_t return_value = no_errors;
 5ce:	c0 e0       	ldi	r28, 0x00	; 0
 5d0:	15 c0       	rjmp	.+42     	; 0x5fc <Receive_Response+0x6e>
	}
	else{
		*array_name = rcvd_value;
		if(number_of_bytes > 1){
			for(uint16_t index = 1; index < number_of_bytes; index++){
				rcvd_value = SPI_Transfer(SD_SPI_port, 0xFF);
 5d2:	6f ef       	ldi	r22, 0xFF	; 255
 5d4:	8c e4       	ldi	r24, 0x4C	; 76
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	0e 94 82 02 	call	0x504	; 0x504 <SPI_Transfer>
				*(array_name + index) = rcvd_value;
 5dc:	f8 01       	movw	r30, r16
 5de:	ec 0f       	add	r30, r28
 5e0:	fd 1f       	adc	r31, r29
 5e2:	80 83       	st	Z, r24
		return_value = SD_comm_error;
	}
	else{
		*array_name = rcvd_value;
		if(number_of_bytes > 1){
			for(uint16_t index = 1; index < number_of_bytes; index++){
 5e4:	21 96       	adiw	r28, 0x01	; 1
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <Receive_Response+0x5e>
 5e8:	c1 e0       	ldi	r28, 0x01	; 1
 5ea:	d0 e0       	ldi	r29, 0x00	; 0
 5ec:	8f 2d       	mov	r24, r15
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	c8 17       	cp	r28, r24
 5f2:	d9 07       	cpc	r29, r25
 5f4:	70 f3       	brcs	.-36     	; 0x5d2 <Receive_Response+0x44>
	SPI_Transfer(SD_SPI_port, send_value);	
	return return_value;
}

uint8_t Receive_Response (uint8_t number_of_bytes, uint8_t * array_name) {
	uint8_t return_value = no_errors;
 5f6:	c0 e0       	ldi	r28, 0x00	; 0
 5f8:	01 c0       	rjmp	.+2      	; 0x5fc <Receive_Response+0x6e>
		rcvd_value = SPI_Transfer(SD_SPI_port, 0xFF);
		timeout++;
	}while((rcvd_value == 0xFF) && (timeout != 0));
	
	if(timeout == 0){
		return_value = SPI_timeout_error;
 5fa:	cf ef       	ldi	r28, 0xFF	; 255
				rcvd_value = SPI_Transfer(SD_SPI_port, 0xFF);
				*(array_name + index) = rcvd_value;
			}
		}
	}
	rcvd_value = SPI_Transfer(SD_SPI_port, 0xFF);
 5fc:	6f ef       	ldi	r22, 0xFF	; 255
 5fe:	8c e4       	ldi	r24, 0x4C	; 76
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	0e 94 82 02 	call	0x504	; 0x504 <SPI_Transfer>
	return return_value;
}
 606:	8c 2f       	mov	r24, r28
 608:	df 91       	pop	r29
 60a:	cf 91       	pop	r28
 60c:	1f 91       	pop	r17
 60e:	0f 91       	pop	r16
 610:	ff 90       	pop	r15
 612:	08 95       	ret

00000614 <UART_Init>:




void UART_Init (volatile UART_t * UART_addr, uint16_t Baud_Rate)
{
 614:	cf 93       	push	r28
 616:	df 93       	push	r29
 618:	ec 01       	movw	r28, r24
	uint16_t Baud_Rate_Reload;
	Baud_Rate_Reload = (uint16_t)(((F_CPU/F_DIV)/(8UL*(2-U2X_bit)*Baud_Rate))-1);
 61a:	cb 01       	movw	r24, r22
 61c:	a0 e0       	ldi	r26, 0x00	; 0
 61e:	b0 e0       	ldi	r27, 0x00	; 0
 620:	88 0f       	add	r24, r24
 622:	99 1f       	adc	r25, r25
 624:	aa 1f       	adc	r26, r26
 626:	bb 1f       	adc	r27, r27
 628:	88 0f       	add	r24, r24
 62a:	99 1f       	adc	r25, r25
 62c:	aa 1f       	adc	r26, r26
 62e:	bb 1f       	adc	r27, r27
 630:	9c 01       	movw	r18, r24
 632:	ad 01       	movw	r20, r26
 634:	22 0f       	add	r18, r18
 636:	33 1f       	adc	r19, r19
 638:	44 1f       	adc	r20, r20
 63a:	55 1f       	adc	r21, r21
 63c:	22 0f       	add	r18, r18
 63e:	33 1f       	adc	r19, r19
 640:	44 1f       	adc	r20, r20
 642:	55 1f       	adc	r21, r21
 644:	60 e0       	ldi	r22, 0x00	; 0
 646:	74 e2       	ldi	r23, 0x24	; 36
 648:	84 ef       	ldi	r24, 0xF4	; 244
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	0e 94 75 03 	call	0x6ea	; 0x6ea <__udivmodsi4>
 650:	21 50       	subi	r18, 0x01	; 1
 652:	31 09       	sbc	r19, r1
	
	(UART_addr->UBBRH) = (Baud_Rate_Reload / 256);
 654:	3d 83       	std	Y+5, r19	; 0x05
	(UART_addr->UBBRL) = (Baud_Rate_Reload % 256);
 656:	2c 83       	std	Y+4, r18	; 0x04
		
	(UART_addr->UCSRA) = U2X_bit<<U2X_shift;
 658:	18 82       	st	Y, r1
	(UART_addr->UCSRC) = Asynchronous|No_Parity|One_Stop_Bit|Eight_Data_Bits;
 65a:	86 e0       	ldi	r24, 0x06	; 6
 65c:	8a 83       	std	Y+2, r24	; 0x02
	(UART_addr->UCSRB) = RX_enable|TX_enable;
 65e:	88 e1       	ldi	r24, 0x18	; 24
 660:	89 83       	std	Y+1, r24	; 0x01
}
 662:	df 91       	pop	r29
 664:	cf 91       	pop	r28
 666:	08 95       	ret

00000668 <UART_Transmit>:

char UART_Transmit(volatile UART_t * UART_addr, char c)
{
 668:	fc 01       	movw	r30, r24
	uint8_t status;
	do
	{
		status=(UART_addr->UCSRA);
 66a:	90 81       	ld	r25, Z
	} while ((status & (1 << UDRE))!=(1 << UDRE));
 66c:	95 ff       	sbrs	r25, 5
 66e:	fd cf       	rjmp	.-6      	; 0x66a <UART_Transmit+0x2>
	(UART_addr->UDR) = c;
 670:	66 83       	std	Z+6, r22	; 0x06
	return 0;
}
 672:	80 e0       	ldi	r24, 0x00	; 0
 674:	08 95       	ret

00000676 <UART_Receive>:


char UART_Receive(volatile UART_t * UART_addr)
{
 676:	fc 01       	movw	r30, r24
	uint8_t status;
	do 
	{
		status=(UART_addr->UCSRA);
 678:	90 81       	ld	r25, Z
	} while ((status & (1 << RXC))!=(1 << RXC));
 67a:	99 23       	and	r25, r25
 67c:	ec f7       	brge	.-6      	; 0x678 <UART_Receive+0x2>
	return (UART_addr->UDR);  // return the value in the receive buffer
 67e:	86 81       	ldd	r24, Z+6	; 0x06
}
 680:	08 95       	ret

00000682 <Export_print_buffer>:
			buffer_p[index]=value;
		}
		index=num_bytes;
	}
	return index;
}
 682:	88 e3       	ldi	r24, 0x38	; 56
 684:	91 e0       	ldi	r25, 0x01	; 1
 686:	08 95       	ret

00000688 <UART_Transmit_String>:

void UART_Transmit_String(volatile UART_t * UART_addr, uint8_t num_bytes, char * string_name)
{
 688:	ef 92       	push	r14
 68a:	ff 92       	push	r15
 68c:	0f 93       	push	r16
 68e:	1f 93       	push	r17
 690:	cf 93       	push	r28
 692:	df 93       	push	r29
 694:	7c 01       	movw	r14, r24
 696:	06 2f       	mov	r16, r22
 698:	ea 01       	movw	r28, r20
	char temp8;
	int8_t index;
	if(num_bytes==0)
 69a:	61 11       	cpse	r22, r1
 69c:	15 c0       	rjmp	.+42     	; 0x6c8 <UART_Transmit_String+0x40>
	{
		temp8=*string_name;
 69e:	68 81       	ld	r22, Y
		while (temp8!=0)
 6a0:	05 c0       	rjmp	.+10     	; 0x6ac <UART_Transmit_String+0x24>
		{
			UART_Transmit(UART_addr, temp8);
 6a2:	c7 01       	movw	r24, r14
 6a4:	0e 94 34 03 	call	0x668	; 0x668 <UART_Transmit>
			string_name++;
 6a8:	21 96       	adiw	r28, 0x01	; 1
			temp8=*string_name;
 6aa:	68 81       	ld	r22, Y
	char temp8;
	int8_t index;
	if(num_bytes==0)
	{
		temp8=*string_name;
		while (temp8!=0)
 6ac:	61 11       	cpse	r22, r1
 6ae:	f9 cf       	rjmp	.-14     	; 0x6a2 <UART_Transmit_String+0x1a>
 6b0:	15 c0       	rjmp	.+42     	; 0x6dc <UART_Transmit_String+0x54>
	}
	else
	{
		for(index=0;index<num_bytes;index++)
		{
			UART_Transmit(UART_addr, string_name[index]);
 6b2:	fe 01       	movw	r30, r28
 6b4:	e1 0f       	add	r30, r17
 6b6:	f1 1d       	adc	r31, r1
 6b8:	17 fd       	sbrc	r17, 7
 6ba:	fa 95       	dec	r31
 6bc:	60 81       	ld	r22, Z
 6be:	c7 01       	movw	r24, r14
 6c0:	0e 94 34 03 	call	0x668	; 0x668 <UART_Transmit>
			temp8=*string_name;
		}
	}
	else
	{
		for(index=0;index<num_bytes;index++)
 6c4:	1f 5f       	subi	r17, 0xFF	; 255
 6c6:	01 c0       	rjmp	.+2      	; 0x6ca <UART_Transmit_String+0x42>
 6c8:	10 e0       	ldi	r17, 0x00	; 0
 6ca:	20 2f       	mov	r18, r16
 6cc:	30 e0       	ldi	r19, 0x00	; 0
 6ce:	81 2f       	mov	r24, r17
 6d0:	01 2e       	mov	r0, r17
 6d2:	00 0c       	add	r0, r0
 6d4:	99 0b       	sbc	r25, r25
 6d6:	82 17       	cp	r24, r18
 6d8:	93 07       	cpc	r25, r19
 6da:	5c f3       	brlt	.-42     	; 0x6b2 <UART_Transmit_String+0x2a>
		{
			UART_Transmit(UART_addr, string_name[index]);
		}
	}
}
 6dc:	df 91       	pop	r29
 6de:	cf 91       	pop	r28
 6e0:	1f 91       	pop	r17
 6e2:	0f 91       	pop	r16
 6e4:	ff 90       	pop	r15
 6e6:	ef 90       	pop	r14
 6e8:	08 95       	ret

000006ea <__udivmodsi4>:
 6ea:	a1 e2       	ldi	r26, 0x21	; 33
 6ec:	1a 2e       	mov	r1, r26
 6ee:	aa 1b       	sub	r26, r26
 6f0:	bb 1b       	sub	r27, r27
 6f2:	fd 01       	movw	r30, r26
 6f4:	0d c0       	rjmp	.+26     	; 0x710 <__udivmodsi4_ep>

000006f6 <__udivmodsi4_loop>:
 6f6:	aa 1f       	adc	r26, r26
 6f8:	bb 1f       	adc	r27, r27
 6fa:	ee 1f       	adc	r30, r30
 6fc:	ff 1f       	adc	r31, r31
 6fe:	a2 17       	cp	r26, r18
 700:	b3 07       	cpc	r27, r19
 702:	e4 07       	cpc	r30, r20
 704:	f5 07       	cpc	r31, r21
 706:	20 f0       	brcs	.+8      	; 0x710 <__udivmodsi4_ep>
 708:	a2 1b       	sub	r26, r18
 70a:	b3 0b       	sbc	r27, r19
 70c:	e4 0b       	sbc	r30, r20
 70e:	f5 0b       	sbc	r31, r21

00000710 <__udivmodsi4_ep>:
 710:	66 1f       	adc	r22, r22
 712:	77 1f       	adc	r23, r23
 714:	88 1f       	adc	r24, r24
 716:	99 1f       	adc	r25, r25
 718:	1a 94       	dec	r1
 71a:	69 f7       	brne	.-38     	; 0x6f6 <__udivmodsi4_loop>
 71c:	60 95       	com	r22
 71e:	70 95       	com	r23
 720:	80 95       	com	r24
 722:	90 95       	com	r25
 724:	9b 01       	movw	r18, r22
 726:	ac 01       	movw	r20, r24
 728:	bd 01       	movw	r22, r26
 72a:	cf 01       	movw	r24, r30
 72c:	08 95       	ret

0000072e <sprintf>:
 72e:	ae e0       	ldi	r26, 0x0E	; 14
 730:	b0 e0       	ldi	r27, 0x00	; 0
 732:	ed e9       	ldi	r30, 0x9D	; 157
 734:	f3 e0       	ldi	r31, 0x03	; 3
 736:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__prologue_saves__+0x1c>
 73a:	0d 89       	ldd	r16, Y+21	; 0x15
 73c:	1e 89       	ldd	r17, Y+22	; 0x16
 73e:	86 e0       	ldi	r24, 0x06	; 6
 740:	8c 83       	std	Y+4, r24	; 0x04
 742:	1a 83       	std	Y+2, r17	; 0x02
 744:	09 83       	std	Y+1, r16	; 0x01
 746:	8f ef       	ldi	r24, 0xFF	; 255
 748:	9f e7       	ldi	r25, 0x7F	; 127
 74a:	9e 83       	std	Y+6, r25	; 0x06
 74c:	8d 83       	std	Y+5, r24	; 0x05
 74e:	ae 01       	movw	r20, r28
 750:	47 5e       	subi	r20, 0xE7	; 231
 752:	5f 4f       	sbci	r21, 0xFF	; 255
 754:	6f 89       	ldd	r22, Y+23	; 0x17
 756:	78 8d       	ldd	r23, Y+24	; 0x18
 758:	ce 01       	movw	r24, r28
 75a:	01 96       	adiw	r24, 0x01	; 1
 75c:	0e 94 b9 03 	call	0x772	; 0x772 <vfprintf>
 760:	ef 81       	ldd	r30, Y+7	; 0x07
 762:	f8 85       	ldd	r31, Y+8	; 0x08
 764:	e0 0f       	add	r30, r16
 766:	f1 1f       	adc	r31, r17
 768:	10 82       	st	Z, r1
 76a:	2e 96       	adiw	r28, 0x0e	; 14
 76c:	e4 e0       	ldi	r30, 0x04	; 4
 76e:	0c 94 74 06 	jmp	0xce8	; 0xce8 <__epilogue_restores__+0x1c>

00000772 <vfprintf>:
 772:	ab e0       	ldi	r26, 0x0B	; 11
 774:	b0 e0       	ldi	r27, 0x00	; 0
 776:	ef eb       	ldi	r30, 0xBF	; 191
 778:	f3 e0       	ldi	r31, 0x03	; 3
 77a:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__prologue_saves__>
 77e:	6c 01       	movw	r12, r24
 780:	7b 01       	movw	r14, r22
 782:	8a 01       	movw	r16, r20
 784:	fc 01       	movw	r30, r24
 786:	17 82       	std	Z+7, r1	; 0x07
 788:	16 82       	std	Z+6, r1	; 0x06
 78a:	83 81       	ldd	r24, Z+3	; 0x03
 78c:	81 ff       	sbrs	r24, 1
 78e:	cc c1       	rjmp	.+920    	; 0xb28 <__stack+0x229>
 790:	ce 01       	movw	r24, r28
 792:	01 96       	adiw	r24, 0x01	; 1
 794:	3c 01       	movw	r6, r24
 796:	f6 01       	movw	r30, r12
 798:	93 81       	ldd	r25, Z+3	; 0x03
 79a:	f7 01       	movw	r30, r14
 79c:	93 fd       	sbrc	r25, 3
 79e:	85 91       	lpm	r24, Z+
 7a0:	93 ff       	sbrs	r25, 3
 7a2:	81 91       	ld	r24, Z+
 7a4:	7f 01       	movw	r14, r30
 7a6:	88 23       	and	r24, r24
 7a8:	09 f4       	brne	.+2      	; 0x7ac <vfprintf+0x3a>
 7aa:	ba c1       	rjmp	.+884    	; 0xb20 <__stack+0x221>
 7ac:	85 32       	cpi	r24, 0x25	; 37
 7ae:	39 f4       	brne	.+14     	; 0x7be <vfprintf+0x4c>
 7b0:	93 fd       	sbrc	r25, 3
 7b2:	85 91       	lpm	r24, Z+
 7b4:	93 ff       	sbrs	r25, 3
 7b6:	81 91       	ld	r24, Z+
 7b8:	7f 01       	movw	r14, r30
 7ba:	85 32       	cpi	r24, 0x25	; 37
 7bc:	29 f4       	brne	.+10     	; 0x7c8 <vfprintf+0x56>
 7be:	b6 01       	movw	r22, r12
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	0e 94 b0 05 	call	0xb60	; 0xb60 <fputc>
 7c6:	e7 cf       	rjmp	.-50     	; 0x796 <vfprintf+0x24>
 7c8:	91 2c       	mov	r9, r1
 7ca:	21 2c       	mov	r2, r1
 7cc:	31 2c       	mov	r3, r1
 7ce:	ff e1       	ldi	r31, 0x1F	; 31
 7d0:	f3 15       	cp	r31, r3
 7d2:	d8 f0       	brcs	.+54     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7d4:	8b 32       	cpi	r24, 0x2B	; 43
 7d6:	79 f0       	breq	.+30     	; 0x7f6 <vfprintf+0x84>
 7d8:	38 f4       	brcc	.+14     	; 0x7e8 <vfprintf+0x76>
 7da:	80 32       	cpi	r24, 0x20	; 32
 7dc:	79 f0       	breq	.+30     	; 0x7fc <vfprintf+0x8a>
 7de:	83 32       	cpi	r24, 0x23	; 35
 7e0:	a1 f4       	brne	.+40     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7e2:	23 2d       	mov	r18, r3
 7e4:	20 61       	ori	r18, 0x10	; 16
 7e6:	1d c0       	rjmp	.+58     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 7e8:	8d 32       	cpi	r24, 0x2D	; 45
 7ea:	61 f0       	breq	.+24     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7ec:	80 33       	cpi	r24, 0x30	; 48
 7ee:	69 f4       	brne	.+26     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7f0:	23 2d       	mov	r18, r3
 7f2:	21 60       	ori	r18, 0x01	; 1
 7f4:	16 c0       	rjmp	.+44     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 7f6:	83 2d       	mov	r24, r3
 7f8:	82 60       	ori	r24, 0x02	; 2
 7fa:	38 2e       	mov	r3, r24
 7fc:	e3 2d       	mov	r30, r3
 7fe:	e4 60       	ori	r30, 0x04	; 4
 800:	3e 2e       	mov	r3, r30
 802:	2a c0       	rjmp	.+84     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 804:	f3 2d       	mov	r31, r3
 806:	f8 60       	ori	r31, 0x08	; 8
 808:	1d c0       	rjmp	.+58     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 80a:	37 fc       	sbrc	r3, 7
 80c:	2d c0       	rjmp	.+90     	; 0x868 <__DATA_REGION_LENGTH__+0x68>
 80e:	20 ed       	ldi	r18, 0xD0	; 208
 810:	28 0f       	add	r18, r24
 812:	2a 30       	cpi	r18, 0x0A	; 10
 814:	40 f0       	brcs	.+16     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 816:	8e 32       	cpi	r24, 0x2E	; 46
 818:	b9 f4       	brne	.+46     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 81a:	36 fc       	sbrc	r3, 6
 81c:	81 c1       	rjmp	.+770    	; 0xb20 <__stack+0x221>
 81e:	23 2d       	mov	r18, r3
 820:	20 64       	ori	r18, 0x40	; 64
 822:	32 2e       	mov	r3, r18
 824:	19 c0       	rjmp	.+50     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 826:	36 fe       	sbrs	r3, 6
 828:	06 c0       	rjmp	.+12     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 82a:	8a e0       	ldi	r24, 0x0A	; 10
 82c:	98 9e       	mul	r9, r24
 82e:	20 0d       	add	r18, r0
 830:	11 24       	eor	r1, r1
 832:	92 2e       	mov	r9, r18
 834:	11 c0       	rjmp	.+34     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 836:	ea e0       	ldi	r30, 0x0A	; 10
 838:	2e 9e       	mul	r2, r30
 83a:	20 0d       	add	r18, r0
 83c:	11 24       	eor	r1, r1
 83e:	22 2e       	mov	r2, r18
 840:	f3 2d       	mov	r31, r3
 842:	f0 62       	ori	r31, 0x20	; 32
 844:	3f 2e       	mov	r3, r31
 846:	08 c0       	rjmp	.+16     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 848:	8c 36       	cpi	r24, 0x6C	; 108
 84a:	21 f4       	brne	.+8      	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 84c:	83 2d       	mov	r24, r3
 84e:	80 68       	ori	r24, 0x80	; 128
 850:	38 2e       	mov	r3, r24
 852:	02 c0       	rjmp	.+4      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 854:	88 36       	cpi	r24, 0x68	; 104
 856:	41 f4       	brne	.+16     	; 0x868 <__DATA_REGION_LENGTH__+0x68>
 858:	f7 01       	movw	r30, r14
 85a:	93 fd       	sbrc	r25, 3
 85c:	85 91       	lpm	r24, Z+
 85e:	93 ff       	sbrs	r25, 3
 860:	81 91       	ld	r24, Z+
 862:	7f 01       	movw	r14, r30
 864:	81 11       	cpse	r24, r1
 866:	b3 cf       	rjmp	.-154    	; 0x7ce <vfprintf+0x5c>
 868:	98 2f       	mov	r25, r24
 86a:	9f 7d       	andi	r25, 0xDF	; 223
 86c:	95 54       	subi	r25, 0x45	; 69
 86e:	93 30       	cpi	r25, 0x03	; 3
 870:	28 f4       	brcc	.+10     	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
 872:	0c 5f       	subi	r16, 0xFC	; 252
 874:	1f 4f       	sbci	r17, 0xFF	; 255
 876:	9f e3       	ldi	r25, 0x3F	; 63
 878:	99 83       	std	Y+1, r25	; 0x01
 87a:	0d c0       	rjmp	.+26     	; 0x896 <__DATA_REGION_LENGTH__+0x96>
 87c:	83 36       	cpi	r24, 0x63	; 99
 87e:	31 f0       	breq	.+12     	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
 880:	83 37       	cpi	r24, 0x73	; 115
 882:	71 f0       	breq	.+28     	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
 884:	83 35       	cpi	r24, 0x53	; 83
 886:	09 f0       	breq	.+2      	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
 888:	59 c0       	rjmp	.+178    	; 0x93c <__stack+0x3d>
 88a:	21 c0       	rjmp	.+66     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 88c:	f8 01       	movw	r30, r16
 88e:	80 81       	ld	r24, Z
 890:	89 83       	std	Y+1, r24	; 0x01
 892:	0e 5f       	subi	r16, 0xFE	; 254
 894:	1f 4f       	sbci	r17, 0xFF	; 255
 896:	88 24       	eor	r8, r8
 898:	83 94       	inc	r8
 89a:	91 2c       	mov	r9, r1
 89c:	53 01       	movw	r10, r6
 89e:	13 c0       	rjmp	.+38     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
 8a0:	28 01       	movw	r4, r16
 8a2:	f2 e0       	ldi	r31, 0x02	; 2
 8a4:	4f 0e       	add	r4, r31
 8a6:	51 1c       	adc	r5, r1
 8a8:	f8 01       	movw	r30, r16
 8aa:	a0 80       	ld	r10, Z
 8ac:	b1 80       	ldd	r11, Z+1	; 0x01
 8ae:	36 fe       	sbrs	r3, 6
 8b0:	03 c0       	rjmp	.+6      	; 0x8b8 <__DATA_REGION_LENGTH__+0xb8>
 8b2:	69 2d       	mov	r22, r9
 8b4:	70 e0       	ldi	r23, 0x00	; 0
 8b6:	02 c0       	rjmp	.+4      	; 0x8bc <__DATA_REGION_LENGTH__+0xbc>
 8b8:	6f ef       	ldi	r22, 0xFF	; 255
 8ba:	7f ef       	ldi	r23, 0xFF	; 255
 8bc:	c5 01       	movw	r24, r10
 8be:	0e 94 a5 05 	call	0xb4a	; 0xb4a <strnlen>
 8c2:	4c 01       	movw	r8, r24
 8c4:	82 01       	movw	r16, r4
 8c6:	f3 2d       	mov	r31, r3
 8c8:	ff 77       	andi	r31, 0x7F	; 127
 8ca:	3f 2e       	mov	r3, r31
 8cc:	16 c0       	rjmp	.+44     	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
 8ce:	28 01       	movw	r4, r16
 8d0:	22 e0       	ldi	r18, 0x02	; 2
 8d2:	42 0e       	add	r4, r18
 8d4:	51 1c       	adc	r5, r1
 8d6:	f8 01       	movw	r30, r16
 8d8:	a0 80       	ld	r10, Z
 8da:	b1 80       	ldd	r11, Z+1	; 0x01
 8dc:	36 fe       	sbrs	r3, 6
 8de:	03 c0       	rjmp	.+6      	; 0x8e6 <__DATA_REGION_LENGTH__+0xe6>
 8e0:	69 2d       	mov	r22, r9
 8e2:	70 e0       	ldi	r23, 0x00	; 0
 8e4:	02 c0       	rjmp	.+4      	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
 8e6:	6f ef       	ldi	r22, 0xFF	; 255
 8e8:	7f ef       	ldi	r23, 0xFF	; 255
 8ea:	c5 01       	movw	r24, r10
 8ec:	0e 94 9a 05 	call	0xb34	; 0xb34 <strnlen_P>
 8f0:	4c 01       	movw	r8, r24
 8f2:	f3 2d       	mov	r31, r3
 8f4:	f0 68       	ori	r31, 0x80	; 128
 8f6:	3f 2e       	mov	r3, r31
 8f8:	82 01       	movw	r16, r4
 8fa:	33 fc       	sbrc	r3, 3
 8fc:	1b c0       	rjmp	.+54     	; 0x934 <__stack+0x35>
 8fe:	82 2d       	mov	r24, r2
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	88 16       	cp	r8, r24
 904:	99 06       	cpc	r9, r25
 906:	b0 f4       	brcc	.+44     	; 0x934 <__stack+0x35>
 908:	b6 01       	movw	r22, r12
 90a:	80 e2       	ldi	r24, 0x20	; 32
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	0e 94 b0 05 	call	0xb60	; 0xb60 <fputc>
 912:	2a 94       	dec	r2
 914:	f4 cf       	rjmp	.-24     	; 0x8fe <__DATA_REGION_LENGTH__+0xfe>
 916:	f5 01       	movw	r30, r10
 918:	37 fc       	sbrc	r3, 7
 91a:	85 91       	lpm	r24, Z+
 91c:	37 fe       	sbrs	r3, 7
 91e:	81 91       	ld	r24, Z+
 920:	5f 01       	movw	r10, r30
 922:	b6 01       	movw	r22, r12
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	0e 94 b0 05 	call	0xb60	; 0xb60 <fputc>
 92a:	21 10       	cpse	r2, r1
 92c:	2a 94       	dec	r2
 92e:	21 e0       	ldi	r18, 0x01	; 1
 930:	82 1a       	sub	r8, r18
 932:	91 08       	sbc	r9, r1
 934:	81 14       	cp	r8, r1
 936:	91 04       	cpc	r9, r1
 938:	71 f7       	brne	.-36     	; 0x916 <__stack+0x17>
 93a:	e8 c0       	rjmp	.+464    	; 0xb0c <__stack+0x20d>
 93c:	84 36       	cpi	r24, 0x64	; 100
 93e:	11 f0       	breq	.+4      	; 0x944 <__stack+0x45>
 940:	89 36       	cpi	r24, 0x69	; 105
 942:	41 f5       	brne	.+80     	; 0x994 <__stack+0x95>
 944:	f8 01       	movw	r30, r16
 946:	37 fe       	sbrs	r3, 7
 948:	07 c0       	rjmp	.+14     	; 0x958 <__stack+0x59>
 94a:	60 81       	ld	r22, Z
 94c:	71 81       	ldd	r23, Z+1	; 0x01
 94e:	82 81       	ldd	r24, Z+2	; 0x02
 950:	93 81       	ldd	r25, Z+3	; 0x03
 952:	0c 5f       	subi	r16, 0xFC	; 252
 954:	1f 4f       	sbci	r17, 0xFF	; 255
 956:	08 c0       	rjmp	.+16     	; 0x968 <__stack+0x69>
 958:	60 81       	ld	r22, Z
 95a:	71 81       	ldd	r23, Z+1	; 0x01
 95c:	07 2e       	mov	r0, r23
 95e:	00 0c       	add	r0, r0
 960:	88 0b       	sbc	r24, r24
 962:	99 0b       	sbc	r25, r25
 964:	0e 5f       	subi	r16, 0xFE	; 254
 966:	1f 4f       	sbci	r17, 0xFF	; 255
 968:	f3 2d       	mov	r31, r3
 96a:	ff 76       	andi	r31, 0x6F	; 111
 96c:	3f 2e       	mov	r3, r31
 96e:	97 ff       	sbrs	r25, 7
 970:	09 c0       	rjmp	.+18     	; 0x984 <__stack+0x85>
 972:	90 95       	com	r25
 974:	80 95       	com	r24
 976:	70 95       	com	r23
 978:	61 95       	neg	r22
 97a:	7f 4f       	sbci	r23, 0xFF	; 255
 97c:	8f 4f       	sbci	r24, 0xFF	; 255
 97e:	9f 4f       	sbci	r25, 0xFF	; 255
 980:	f0 68       	ori	r31, 0x80	; 128
 982:	3f 2e       	mov	r3, r31
 984:	2a e0       	ldi	r18, 0x0A	; 10
 986:	30 e0       	ldi	r19, 0x00	; 0
 988:	a3 01       	movw	r20, r6
 98a:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__ultoa_invert>
 98e:	88 2e       	mov	r8, r24
 990:	86 18       	sub	r8, r6
 992:	45 c0       	rjmp	.+138    	; 0xa1e <__stack+0x11f>
 994:	85 37       	cpi	r24, 0x75	; 117
 996:	31 f4       	brne	.+12     	; 0x9a4 <__stack+0xa5>
 998:	23 2d       	mov	r18, r3
 99a:	2f 7e       	andi	r18, 0xEF	; 239
 99c:	b2 2e       	mov	r11, r18
 99e:	2a e0       	ldi	r18, 0x0A	; 10
 9a0:	30 e0       	ldi	r19, 0x00	; 0
 9a2:	25 c0       	rjmp	.+74     	; 0x9ee <__stack+0xef>
 9a4:	93 2d       	mov	r25, r3
 9a6:	99 7f       	andi	r25, 0xF9	; 249
 9a8:	b9 2e       	mov	r11, r25
 9aa:	8f 36       	cpi	r24, 0x6F	; 111
 9ac:	c1 f0       	breq	.+48     	; 0x9de <__stack+0xdf>
 9ae:	18 f4       	brcc	.+6      	; 0x9b6 <__stack+0xb7>
 9b0:	88 35       	cpi	r24, 0x58	; 88
 9b2:	79 f0       	breq	.+30     	; 0x9d2 <__stack+0xd3>
 9b4:	b5 c0       	rjmp	.+362    	; 0xb20 <__stack+0x221>
 9b6:	80 37       	cpi	r24, 0x70	; 112
 9b8:	19 f0       	breq	.+6      	; 0x9c0 <__stack+0xc1>
 9ba:	88 37       	cpi	r24, 0x78	; 120
 9bc:	21 f0       	breq	.+8      	; 0x9c6 <__stack+0xc7>
 9be:	b0 c0       	rjmp	.+352    	; 0xb20 <__stack+0x221>
 9c0:	e9 2f       	mov	r30, r25
 9c2:	e0 61       	ori	r30, 0x10	; 16
 9c4:	be 2e       	mov	r11, r30
 9c6:	b4 fe       	sbrs	r11, 4
 9c8:	0d c0       	rjmp	.+26     	; 0x9e4 <__stack+0xe5>
 9ca:	fb 2d       	mov	r31, r11
 9cc:	f4 60       	ori	r31, 0x04	; 4
 9ce:	bf 2e       	mov	r11, r31
 9d0:	09 c0       	rjmp	.+18     	; 0x9e4 <__stack+0xe5>
 9d2:	34 fe       	sbrs	r3, 4
 9d4:	0a c0       	rjmp	.+20     	; 0x9ea <__stack+0xeb>
 9d6:	29 2f       	mov	r18, r25
 9d8:	26 60       	ori	r18, 0x06	; 6
 9da:	b2 2e       	mov	r11, r18
 9dc:	06 c0       	rjmp	.+12     	; 0x9ea <__stack+0xeb>
 9de:	28 e0       	ldi	r18, 0x08	; 8
 9e0:	30 e0       	ldi	r19, 0x00	; 0
 9e2:	05 c0       	rjmp	.+10     	; 0x9ee <__stack+0xef>
 9e4:	20 e1       	ldi	r18, 0x10	; 16
 9e6:	30 e0       	ldi	r19, 0x00	; 0
 9e8:	02 c0       	rjmp	.+4      	; 0x9ee <__stack+0xef>
 9ea:	20 e1       	ldi	r18, 0x10	; 16
 9ec:	32 e0       	ldi	r19, 0x02	; 2
 9ee:	f8 01       	movw	r30, r16
 9f0:	b7 fe       	sbrs	r11, 7
 9f2:	07 c0       	rjmp	.+14     	; 0xa02 <__stack+0x103>
 9f4:	60 81       	ld	r22, Z
 9f6:	71 81       	ldd	r23, Z+1	; 0x01
 9f8:	82 81       	ldd	r24, Z+2	; 0x02
 9fa:	93 81       	ldd	r25, Z+3	; 0x03
 9fc:	0c 5f       	subi	r16, 0xFC	; 252
 9fe:	1f 4f       	sbci	r17, 0xFF	; 255
 a00:	06 c0       	rjmp	.+12     	; 0xa0e <__stack+0x10f>
 a02:	60 81       	ld	r22, Z
 a04:	71 81       	ldd	r23, Z+1	; 0x01
 a06:	80 e0       	ldi	r24, 0x00	; 0
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	0e 5f       	subi	r16, 0xFE	; 254
 a0c:	1f 4f       	sbci	r17, 0xFF	; 255
 a0e:	a3 01       	movw	r20, r6
 a10:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__ultoa_invert>
 a14:	88 2e       	mov	r8, r24
 a16:	86 18       	sub	r8, r6
 a18:	fb 2d       	mov	r31, r11
 a1a:	ff 77       	andi	r31, 0x7F	; 127
 a1c:	3f 2e       	mov	r3, r31
 a1e:	36 fe       	sbrs	r3, 6
 a20:	0d c0       	rjmp	.+26     	; 0xa3c <__stack+0x13d>
 a22:	23 2d       	mov	r18, r3
 a24:	2e 7f       	andi	r18, 0xFE	; 254
 a26:	a2 2e       	mov	r10, r18
 a28:	89 14       	cp	r8, r9
 a2a:	58 f4       	brcc	.+22     	; 0xa42 <__stack+0x143>
 a2c:	34 fe       	sbrs	r3, 4
 a2e:	0b c0       	rjmp	.+22     	; 0xa46 <__stack+0x147>
 a30:	32 fc       	sbrc	r3, 2
 a32:	09 c0       	rjmp	.+18     	; 0xa46 <__stack+0x147>
 a34:	83 2d       	mov	r24, r3
 a36:	8e 7e       	andi	r24, 0xEE	; 238
 a38:	a8 2e       	mov	r10, r24
 a3a:	05 c0       	rjmp	.+10     	; 0xa46 <__stack+0x147>
 a3c:	b8 2c       	mov	r11, r8
 a3e:	a3 2c       	mov	r10, r3
 a40:	03 c0       	rjmp	.+6      	; 0xa48 <__stack+0x149>
 a42:	b8 2c       	mov	r11, r8
 a44:	01 c0       	rjmp	.+2      	; 0xa48 <__stack+0x149>
 a46:	b9 2c       	mov	r11, r9
 a48:	a4 fe       	sbrs	r10, 4
 a4a:	0f c0       	rjmp	.+30     	; 0xa6a <__stack+0x16b>
 a4c:	fe 01       	movw	r30, r28
 a4e:	e8 0d       	add	r30, r8
 a50:	f1 1d       	adc	r31, r1
 a52:	80 81       	ld	r24, Z
 a54:	80 33       	cpi	r24, 0x30	; 48
 a56:	21 f4       	brne	.+8      	; 0xa60 <__stack+0x161>
 a58:	9a 2d       	mov	r25, r10
 a5a:	99 7e       	andi	r25, 0xE9	; 233
 a5c:	a9 2e       	mov	r10, r25
 a5e:	09 c0       	rjmp	.+18     	; 0xa72 <__stack+0x173>
 a60:	a2 fe       	sbrs	r10, 2
 a62:	06 c0       	rjmp	.+12     	; 0xa70 <__stack+0x171>
 a64:	b3 94       	inc	r11
 a66:	b3 94       	inc	r11
 a68:	04 c0       	rjmp	.+8      	; 0xa72 <__stack+0x173>
 a6a:	8a 2d       	mov	r24, r10
 a6c:	86 78       	andi	r24, 0x86	; 134
 a6e:	09 f0       	breq	.+2      	; 0xa72 <__stack+0x173>
 a70:	b3 94       	inc	r11
 a72:	a3 fc       	sbrc	r10, 3
 a74:	11 c0       	rjmp	.+34     	; 0xa98 <__stack+0x199>
 a76:	a0 fe       	sbrs	r10, 0
 a78:	06 c0       	rjmp	.+12     	; 0xa86 <__stack+0x187>
 a7a:	b2 14       	cp	r11, r2
 a7c:	88 f4       	brcc	.+34     	; 0xaa0 <__stack+0x1a1>
 a7e:	28 0c       	add	r2, r8
 a80:	92 2c       	mov	r9, r2
 a82:	9b 18       	sub	r9, r11
 a84:	0e c0       	rjmp	.+28     	; 0xaa2 <__stack+0x1a3>
 a86:	b2 14       	cp	r11, r2
 a88:	60 f4       	brcc	.+24     	; 0xaa2 <__stack+0x1a3>
 a8a:	b6 01       	movw	r22, r12
 a8c:	80 e2       	ldi	r24, 0x20	; 32
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	0e 94 b0 05 	call	0xb60	; 0xb60 <fputc>
 a94:	b3 94       	inc	r11
 a96:	f7 cf       	rjmp	.-18     	; 0xa86 <__stack+0x187>
 a98:	b2 14       	cp	r11, r2
 a9a:	18 f4       	brcc	.+6      	; 0xaa2 <__stack+0x1a3>
 a9c:	2b 18       	sub	r2, r11
 a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <__stack+0x1a5>
 aa0:	98 2c       	mov	r9, r8
 aa2:	21 2c       	mov	r2, r1
 aa4:	a4 fe       	sbrs	r10, 4
 aa6:	10 c0       	rjmp	.+32     	; 0xac8 <__stack+0x1c9>
 aa8:	b6 01       	movw	r22, r12
 aaa:	80 e3       	ldi	r24, 0x30	; 48
 aac:	90 e0       	ldi	r25, 0x00	; 0
 aae:	0e 94 b0 05 	call	0xb60	; 0xb60 <fputc>
 ab2:	a2 fe       	sbrs	r10, 2
 ab4:	17 c0       	rjmp	.+46     	; 0xae4 <__stack+0x1e5>
 ab6:	a1 fc       	sbrc	r10, 1
 ab8:	03 c0       	rjmp	.+6      	; 0xac0 <__stack+0x1c1>
 aba:	88 e7       	ldi	r24, 0x78	; 120
 abc:	90 e0       	ldi	r25, 0x00	; 0
 abe:	02 c0       	rjmp	.+4      	; 0xac4 <__stack+0x1c5>
 ac0:	88 e5       	ldi	r24, 0x58	; 88
 ac2:	90 e0       	ldi	r25, 0x00	; 0
 ac4:	b6 01       	movw	r22, r12
 ac6:	0c c0       	rjmp	.+24     	; 0xae0 <__stack+0x1e1>
 ac8:	8a 2d       	mov	r24, r10
 aca:	86 78       	andi	r24, 0x86	; 134
 acc:	59 f0       	breq	.+22     	; 0xae4 <__stack+0x1e5>
 ace:	a1 fe       	sbrs	r10, 1
 ad0:	02 c0       	rjmp	.+4      	; 0xad6 <__stack+0x1d7>
 ad2:	8b e2       	ldi	r24, 0x2B	; 43
 ad4:	01 c0       	rjmp	.+2      	; 0xad8 <__stack+0x1d9>
 ad6:	80 e2       	ldi	r24, 0x20	; 32
 ad8:	a7 fc       	sbrc	r10, 7
 ada:	8d e2       	ldi	r24, 0x2D	; 45
 adc:	b6 01       	movw	r22, r12
 ade:	90 e0       	ldi	r25, 0x00	; 0
 ae0:	0e 94 b0 05 	call	0xb60	; 0xb60 <fputc>
 ae4:	89 14       	cp	r8, r9
 ae6:	38 f4       	brcc	.+14     	; 0xaf6 <__stack+0x1f7>
 ae8:	b6 01       	movw	r22, r12
 aea:	80 e3       	ldi	r24, 0x30	; 48
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	0e 94 b0 05 	call	0xb60	; 0xb60 <fputc>
 af2:	9a 94       	dec	r9
 af4:	f7 cf       	rjmp	.-18     	; 0xae4 <__stack+0x1e5>
 af6:	8a 94       	dec	r8
 af8:	f3 01       	movw	r30, r6
 afa:	e8 0d       	add	r30, r8
 afc:	f1 1d       	adc	r31, r1
 afe:	80 81       	ld	r24, Z
 b00:	b6 01       	movw	r22, r12
 b02:	90 e0       	ldi	r25, 0x00	; 0
 b04:	0e 94 b0 05 	call	0xb60	; 0xb60 <fputc>
 b08:	81 10       	cpse	r8, r1
 b0a:	f5 cf       	rjmp	.-22     	; 0xaf6 <__stack+0x1f7>
 b0c:	22 20       	and	r2, r2
 b0e:	09 f4       	brne	.+2      	; 0xb12 <__stack+0x213>
 b10:	42 ce       	rjmp	.-892    	; 0x796 <vfprintf+0x24>
 b12:	b6 01       	movw	r22, r12
 b14:	80 e2       	ldi	r24, 0x20	; 32
 b16:	90 e0       	ldi	r25, 0x00	; 0
 b18:	0e 94 b0 05 	call	0xb60	; 0xb60 <fputc>
 b1c:	2a 94       	dec	r2
 b1e:	f6 cf       	rjmp	.-20     	; 0xb0c <__stack+0x20d>
 b20:	f6 01       	movw	r30, r12
 b22:	86 81       	ldd	r24, Z+6	; 0x06
 b24:	97 81       	ldd	r25, Z+7	; 0x07
 b26:	02 c0       	rjmp	.+4      	; 0xb2c <__stack+0x22d>
 b28:	8f ef       	ldi	r24, 0xFF	; 255
 b2a:	9f ef       	ldi	r25, 0xFF	; 255
 b2c:	2b 96       	adiw	r28, 0x0b	; 11
 b2e:	e2 e1       	ldi	r30, 0x12	; 18
 b30:	0c 94 66 06 	jmp	0xccc	; 0xccc <__epilogue_restores__>

00000b34 <strnlen_P>:
 b34:	fc 01       	movw	r30, r24
 b36:	05 90       	lpm	r0, Z+
 b38:	61 50       	subi	r22, 0x01	; 1
 b3a:	70 40       	sbci	r23, 0x00	; 0
 b3c:	01 10       	cpse	r0, r1
 b3e:	d8 f7       	brcc	.-10     	; 0xb36 <strnlen_P+0x2>
 b40:	80 95       	com	r24
 b42:	90 95       	com	r25
 b44:	8e 0f       	add	r24, r30
 b46:	9f 1f       	adc	r25, r31
 b48:	08 95       	ret

00000b4a <strnlen>:
 b4a:	fc 01       	movw	r30, r24
 b4c:	61 50       	subi	r22, 0x01	; 1
 b4e:	70 40       	sbci	r23, 0x00	; 0
 b50:	01 90       	ld	r0, Z+
 b52:	01 10       	cpse	r0, r1
 b54:	d8 f7       	brcc	.-10     	; 0xb4c <strnlen+0x2>
 b56:	80 95       	com	r24
 b58:	90 95       	com	r25
 b5a:	8e 0f       	add	r24, r30
 b5c:	9f 1f       	adc	r25, r31
 b5e:	08 95       	ret

00000b60 <fputc>:
 b60:	0f 93       	push	r16
 b62:	1f 93       	push	r17
 b64:	cf 93       	push	r28
 b66:	df 93       	push	r29
 b68:	fb 01       	movw	r30, r22
 b6a:	23 81       	ldd	r18, Z+3	; 0x03
 b6c:	21 fd       	sbrc	r18, 1
 b6e:	03 c0       	rjmp	.+6      	; 0xb76 <fputc+0x16>
 b70:	8f ef       	ldi	r24, 0xFF	; 255
 b72:	9f ef       	ldi	r25, 0xFF	; 255
 b74:	2c c0       	rjmp	.+88     	; 0xbce <fputc+0x6e>
 b76:	22 ff       	sbrs	r18, 2
 b78:	16 c0       	rjmp	.+44     	; 0xba6 <fputc+0x46>
 b7a:	46 81       	ldd	r20, Z+6	; 0x06
 b7c:	57 81       	ldd	r21, Z+7	; 0x07
 b7e:	24 81       	ldd	r18, Z+4	; 0x04
 b80:	35 81       	ldd	r19, Z+5	; 0x05
 b82:	42 17       	cp	r20, r18
 b84:	53 07       	cpc	r21, r19
 b86:	44 f4       	brge	.+16     	; 0xb98 <fputc+0x38>
 b88:	a0 81       	ld	r26, Z
 b8a:	b1 81       	ldd	r27, Z+1	; 0x01
 b8c:	9d 01       	movw	r18, r26
 b8e:	2f 5f       	subi	r18, 0xFF	; 255
 b90:	3f 4f       	sbci	r19, 0xFF	; 255
 b92:	31 83       	std	Z+1, r19	; 0x01
 b94:	20 83       	st	Z, r18
 b96:	8c 93       	st	X, r24
 b98:	26 81       	ldd	r18, Z+6	; 0x06
 b9a:	37 81       	ldd	r19, Z+7	; 0x07
 b9c:	2f 5f       	subi	r18, 0xFF	; 255
 b9e:	3f 4f       	sbci	r19, 0xFF	; 255
 ba0:	37 83       	std	Z+7, r19	; 0x07
 ba2:	26 83       	std	Z+6, r18	; 0x06
 ba4:	14 c0       	rjmp	.+40     	; 0xbce <fputc+0x6e>
 ba6:	8b 01       	movw	r16, r22
 ba8:	ec 01       	movw	r28, r24
 baa:	fb 01       	movw	r30, r22
 bac:	00 84       	ldd	r0, Z+8	; 0x08
 bae:	f1 85       	ldd	r31, Z+9	; 0x09
 bb0:	e0 2d       	mov	r30, r0
 bb2:	09 95       	icall
 bb4:	89 2b       	or	r24, r25
 bb6:	e1 f6       	brne	.-72     	; 0xb70 <fputc+0x10>
 bb8:	d8 01       	movw	r26, r16
 bba:	16 96       	adiw	r26, 0x06	; 6
 bbc:	8d 91       	ld	r24, X+
 bbe:	9c 91       	ld	r25, X
 bc0:	17 97       	sbiw	r26, 0x07	; 7
 bc2:	01 96       	adiw	r24, 0x01	; 1
 bc4:	17 96       	adiw	r26, 0x07	; 7
 bc6:	9c 93       	st	X, r25
 bc8:	8e 93       	st	-X, r24
 bca:	16 97       	sbiw	r26, 0x06	; 6
 bcc:	ce 01       	movw	r24, r28
 bce:	df 91       	pop	r29
 bd0:	cf 91       	pop	r28
 bd2:	1f 91       	pop	r17
 bd4:	0f 91       	pop	r16
 bd6:	08 95       	ret

00000bd8 <__ultoa_invert>:
 bd8:	fa 01       	movw	r30, r20
 bda:	aa 27       	eor	r26, r26
 bdc:	28 30       	cpi	r18, 0x08	; 8
 bde:	51 f1       	breq	.+84     	; 0xc34 <__ultoa_invert+0x5c>
 be0:	20 31       	cpi	r18, 0x10	; 16
 be2:	81 f1       	breq	.+96     	; 0xc44 <__ultoa_invert+0x6c>
 be4:	e8 94       	clt
 be6:	6f 93       	push	r22
 be8:	6e 7f       	andi	r22, 0xFE	; 254
 bea:	6e 5f       	subi	r22, 0xFE	; 254
 bec:	7f 4f       	sbci	r23, 0xFF	; 255
 bee:	8f 4f       	sbci	r24, 0xFF	; 255
 bf0:	9f 4f       	sbci	r25, 0xFF	; 255
 bf2:	af 4f       	sbci	r26, 0xFF	; 255
 bf4:	b1 e0       	ldi	r27, 0x01	; 1
 bf6:	3e d0       	rcall	.+124    	; 0xc74 <__ultoa_invert+0x9c>
 bf8:	b4 e0       	ldi	r27, 0x04	; 4
 bfa:	3c d0       	rcall	.+120    	; 0xc74 <__ultoa_invert+0x9c>
 bfc:	67 0f       	add	r22, r23
 bfe:	78 1f       	adc	r23, r24
 c00:	89 1f       	adc	r24, r25
 c02:	9a 1f       	adc	r25, r26
 c04:	a1 1d       	adc	r26, r1
 c06:	68 0f       	add	r22, r24
 c08:	79 1f       	adc	r23, r25
 c0a:	8a 1f       	adc	r24, r26
 c0c:	91 1d       	adc	r25, r1
 c0e:	a1 1d       	adc	r26, r1
 c10:	6a 0f       	add	r22, r26
 c12:	71 1d       	adc	r23, r1
 c14:	81 1d       	adc	r24, r1
 c16:	91 1d       	adc	r25, r1
 c18:	a1 1d       	adc	r26, r1
 c1a:	20 d0       	rcall	.+64     	; 0xc5c <__ultoa_invert+0x84>
 c1c:	09 f4       	brne	.+2      	; 0xc20 <__ultoa_invert+0x48>
 c1e:	68 94       	set
 c20:	3f 91       	pop	r19
 c22:	2a e0       	ldi	r18, 0x0A	; 10
 c24:	26 9f       	mul	r18, r22
 c26:	11 24       	eor	r1, r1
 c28:	30 19       	sub	r19, r0
 c2a:	30 5d       	subi	r19, 0xD0	; 208
 c2c:	31 93       	st	Z+, r19
 c2e:	de f6       	brtc	.-74     	; 0xbe6 <__ultoa_invert+0xe>
 c30:	cf 01       	movw	r24, r30
 c32:	08 95       	ret
 c34:	46 2f       	mov	r20, r22
 c36:	47 70       	andi	r20, 0x07	; 7
 c38:	40 5d       	subi	r20, 0xD0	; 208
 c3a:	41 93       	st	Z+, r20
 c3c:	b3 e0       	ldi	r27, 0x03	; 3
 c3e:	0f d0       	rcall	.+30     	; 0xc5e <__ultoa_invert+0x86>
 c40:	c9 f7       	brne	.-14     	; 0xc34 <__ultoa_invert+0x5c>
 c42:	f6 cf       	rjmp	.-20     	; 0xc30 <__ultoa_invert+0x58>
 c44:	46 2f       	mov	r20, r22
 c46:	4f 70       	andi	r20, 0x0F	; 15
 c48:	40 5d       	subi	r20, 0xD0	; 208
 c4a:	4a 33       	cpi	r20, 0x3A	; 58
 c4c:	18 f0       	brcs	.+6      	; 0xc54 <__ultoa_invert+0x7c>
 c4e:	49 5d       	subi	r20, 0xD9	; 217
 c50:	31 fd       	sbrc	r19, 1
 c52:	40 52       	subi	r20, 0x20	; 32
 c54:	41 93       	st	Z+, r20
 c56:	02 d0       	rcall	.+4      	; 0xc5c <__ultoa_invert+0x84>
 c58:	a9 f7       	brne	.-22     	; 0xc44 <__ultoa_invert+0x6c>
 c5a:	ea cf       	rjmp	.-44     	; 0xc30 <__ultoa_invert+0x58>
 c5c:	b4 e0       	ldi	r27, 0x04	; 4
 c5e:	a6 95       	lsr	r26
 c60:	97 95       	ror	r25
 c62:	87 95       	ror	r24
 c64:	77 95       	ror	r23
 c66:	67 95       	ror	r22
 c68:	ba 95       	dec	r27
 c6a:	c9 f7       	brne	.-14     	; 0xc5e <__ultoa_invert+0x86>
 c6c:	00 97       	sbiw	r24, 0x00	; 0
 c6e:	61 05       	cpc	r22, r1
 c70:	71 05       	cpc	r23, r1
 c72:	08 95       	ret
 c74:	9b 01       	movw	r18, r22
 c76:	ac 01       	movw	r20, r24
 c78:	0a 2e       	mov	r0, r26
 c7a:	06 94       	lsr	r0
 c7c:	57 95       	ror	r21
 c7e:	47 95       	ror	r20
 c80:	37 95       	ror	r19
 c82:	27 95       	ror	r18
 c84:	ba 95       	dec	r27
 c86:	c9 f7       	brne	.-14     	; 0xc7a <__ultoa_invert+0xa2>
 c88:	62 0f       	add	r22, r18
 c8a:	73 1f       	adc	r23, r19
 c8c:	84 1f       	adc	r24, r20
 c8e:	95 1f       	adc	r25, r21
 c90:	a0 1d       	adc	r26, r0
 c92:	08 95       	ret

00000c94 <__prologue_saves__>:
 c94:	2f 92       	push	r2
 c96:	3f 92       	push	r3
 c98:	4f 92       	push	r4
 c9a:	5f 92       	push	r5
 c9c:	6f 92       	push	r6
 c9e:	7f 92       	push	r7
 ca0:	8f 92       	push	r8
 ca2:	9f 92       	push	r9
 ca4:	af 92       	push	r10
 ca6:	bf 92       	push	r11
 ca8:	cf 92       	push	r12
 caa:	df 92       	push	r13
 cac:	ef 92       	push	r14
 cae:	ff 92       	push	r15
 cb0:	0f 93       	push	r16
 cb2:	1f 93       	push	r17
 cb4:	cf 93       	push	r28
 cb6:	df 93       	push	r29
 cb8:	cd b7       	in	r28, 0x3d	; 61
 cba:	de b7       	in	r29, 0x3e	; 62
 cbc:	ca 1b       	sub	r28, r26
 cbe:	db 0b       	sbc	r29, r27
 cc0:	0f b6       	in	r0, 0x3f	; 63
 cc2:	f8 94       	cli
 cc4:	de bf       	out	0x3e, r29	; 62
 cc6:	0f be       	out	0x3f, r0	; 63
 cc8:	cd bf       	out	0x3d, r28	; 61
 cca:	09 94       	ijmp

00000ccc <__epilogue_restores__>:
 ccc:	2a 88       	ldd	r2, Y+18	; 0x12
 cce:	39 88       	ldd	r3, Y+17	; 0x11
 cd0:	48 88       	ldd	r4, Y+16	; 0x10
 cd2:	5f 84       	ldd	r5, Y+15	; 0x0f
 cd4:	6e 84       	ldd	r6, Y+14	; 0x0e
 cd6:	7d 84       	ldd	r7, Y+13	; 0x0d
 cd8:	8c 84       	ldd	r8, Y+12	; 0x0c
 cda:	9b 84       	ldd	r9, Y+11	; 0x0b
 cdc:	aa 84       	ldd	r10, Y+10	; 0x0a
 cde:	b9 84       	ldd	r11, Y+9	; 0x09
 ce0:	c8 84       	ldd	r12, Y+8	; 0x08
 ce2:	df 80       	ldd	r13, Y+7	; 0x07
 ce4:	ee 80       	ldd	r14, Y+6	; 0x06
 ce6:	fd 80       	ldd	r15, Y+5	; 0x05
 ce8:	0c 81       	ldd	r16, Y+4	; 0x04
 cea:	1b 81       	ldd	r17, Y+3	; 0x03
 cec:	aa 81       	ldd	r26, Y+2	; 0x02
 cee:	b9 81       	ldd	r27, Y+1	; 0x01
 cf0:	ce 0f       	add	r28, r30
 cf2:	d1 1d       	adc	r29, r1
 cf4:	0f b6       	in	r0, 0x3f	; 63
 cf6:	f8 94       	cli
 cf8:	de bf       	out	0x3e, r29	; 62
 cfa:	0f be       	out	0x3f, r0	; 63
 cfc:	cd bf       	out	0x3d, r28	; 61
 cfe:	ed 01       	movw	r28, r26
 d00:	08 95       	ret

00000d02 <_exit>:
 d02:	f8 94       	cli

00000d04 <__stop_program>:
 d04:	ff cf       	rjmp	.-2      	; 0xd04 <__stop_program>
