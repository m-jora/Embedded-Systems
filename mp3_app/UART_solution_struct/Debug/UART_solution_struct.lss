
UART_solution_struct.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  00000c74  00000d08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  00800154  00800154  00000d5c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d5c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000db8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e20  00000000  00000000  00000f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010ab  00000000  00000000  00002d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c75  00000000  00000000  00003e03  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e4  00000000  00000000  00004a78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007f9  00000000  00000000  00004d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000eb1  00000000  00000000  00005555  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00006406  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__ctors_end>
   4:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
   8:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
   c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  10:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  14:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  18:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  1c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  20:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  24:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  28:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  2c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  30:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  34:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  38:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  3c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  40:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  44:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  48:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  4c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  50:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  54:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  58:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  5c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  60:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  64:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  68:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  6c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  70:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  74:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  78:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  7c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  80:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  84:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  88:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  8c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  90:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  94:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  98:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  9c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  a0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  a4:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  a8:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  ac:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  b0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  b4:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  b8:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  bc:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  c0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  c4:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  c8:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>

000000cc <__trampolines_end>:
  cc:	48 65       	ori	r20, 0x58	; 88
  ce:	6c 6c       	ori	r22, 0xCC	; 204
  d0:	6f 20       	and	r6, r15
  d2:	57 6f       	ori	r21, 0xF7	; 247
  d4:	72 6c       	ori	r23, 0xC2	; 194
  d6:	64 21       	and	r22, r4
  d8:	0a 0d       	add	r16, r10
	...

000000db <Prnt_bytes_prnt>:
  db:	41 64 64 72 2e 20 4f 66 66 73 65 74 20 20 20 30     Addr. Offset   0
  eb:	20 20 31 20 20 32 20 20 33 20 20 34 20 20 35 20       1  2  3  4  5 
  fb:	20 36 20 20 37 20 20 38 20 20 39 20 20 41 20 20      6  7  8  9  A  
 10b:	42 20 20 43 20 20 44 20 20 45 20 20 46 0a 0d 00     B  C  D  E  F...
	...

0000011c <__ctors_end>:
 11c:	11 24       	eor	r1, r1
 11e:	1f be       	out	0x3f, r1	; 63
 120:	cf ef       	ldi	r28, 0xFF	; 255
 122:	d8 e0       	ldi	r29, 0x08	; 8
 124:	de bf       	out	0x3e, r29	; 62
 126:	cd bf       	out	0x3d, r28	; 61

00000128 <__do_copy_data>:
 128:	11 e0       	ldi	r17, 0x01	; 1
 12a:	a0 e0       	ldi	r26, 0x00	; 0
 12c:	b1 e0       	ldi	r27, 0x01	; 1
 12e:	e4 e7       	ldi	r30, 0x74	; 116
 130:	fc e0       	ldi	r31, 0x0C	; 12
 132:	02 c0       	rjmp	.+4      	; 0x138 <__do_copy_data+0x10>
 134:	05 90       	lpm	r0, Z+
 136:	0d 92       	st	X+, r0
 138:	a4 35       	cpi	r26, 0x54	; 84
 13a:	b1 07       	cpc	r27, r17
 13c:	d9 f7       	brne	.-10     	; 0x134 <__do_copy_data+0xc>

0000013e <__do_clear_bss>:
 13e:	21 e0       	ldi	r18, 0x01	; 1
 140:	a4 e5       	ldi	r26, 0x54	; 84
 142:	b1 e0       	ldi	r27, 0x01	; 1
 144:	01 c0       	rjmp	.+2      	; 0x148 <.do_clear_bss_start>

00000146 <.do_clear_bss_loop>:
 146:	1d 92       	st	X+, r1

00000148 <.do_clear_bss_start>:
 148:	a4 3a       	cpi	r26, 0xA4	; 164
 14a:	b2 07       	cpc	r27, r18
 14c:	e1 f7       	brne	.-8      	; 0x146 <.do_clear_bss_loop>
 14e:	0e 94 c3 00 	call	0x186	; 0x186 <main>
 152:	0c 94 38 06 	jmp	0xc70	; 0xc70 <_exit>

00000156 <__bad_interrupt>:
 156:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000015a <GPIO_Output_Init>:
#include "GPIO_Outputs.h"

void GPIO_Output_Init(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	//Set Port Pin to be an output with initial value '1'
	(port_addr->GPIO_DDR)|=(pin_mask);    // Set DDRx to make port pin an output
 15a:	fc 01       	movw	r30, r24
 15c:	21 81       	ldd	r18, Z+1	; 0x01
 15e:	62 2b       	or	r22, r18
 160:	61 83       	std	Z+1, r22	; 0x01
 162:	08 95       	ret

00000164 <GPIO_Output_Set>:


void GPIO_Output_Set(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	//control = 0, LED off; control = 1, LED on 
		(port_addr->GPIO_PORT)|=(pin_mask);    // Set PORTx PORTx pin to value of '1'
 164:	fc 01       	movw	r30, r24
 166:	22 81       	ldd	r18, Z+2	; 0x02
 168:	62 2b       	or	r22, r18
 16a:	62 83       	std	Z+2, r22	; 0x02
 16c:	08 95       	ret

0000016e <GPIO_Output_Clear>:
}

void GPIO_Output_Clear(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
 16e:	fc 01       	movw	r30, r24
	//control = 0, LED off; control = 1, LED on
		(port_addr->GPIO_PORT)&=~(pin_mask);    // Clear PORTx pin to value of '0'
 170:	92 81       	ldd	r25, Z+2	; 0x02
 172:	60 95       	com	r22
 174:	69 23       	and	r22, r25
 176:	62 83       	std	Z+2, r22	; 0x02
 178:	08 95       	ret

0000017a <LEDS_Init>:

void LEDS_Init(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	//Set Port Pin to be an output with initial value '1'
	//port_addr->GPIO_PORT|=(pin_mask);    // Set PORTx for initial value of '1'
	GPIO_Output_Init(port_addr, pin_mask);    // Set DDRx to make port pin an output
 17a:	0e 94 ad 00 	call	0x15a	; 0x15a <GPIO_Output_Init>
 17e:	08 95       	ret

00000180 <LEDS_Off>:


void LEDS_Off(volatile GPIO_t * port_addr, uint8_t pin_mask)
{
	//control = 0, LED off; control = 1, LED on 
		GPIO_Output_Set(port_addr, pin_mask);    // Set PORTx PORTx pin to value of '1'
 180:	0e 94 b2 00 	call	0x164	; 0x164 <GPIO_Output_Set>
 184:	08 95       	ret

00000186 <main>:

const char test_string[15] PROGMEM = "Hello World!\n\r";


int main(void)
{
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
 18e:	a9 97       	sbiw	r28, 0x29	; 41
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	f8 94       	cli
 194:	de bf       	out	0x3e, r29	; 62
 196:	0f be       	out	0x3f, r0	; 63
 198:	cd bf       	out	0x3d, r28	; 61
	/* Replace with your application code */
	char temp8;
	char string_in_SRAM [41] = "This is a string in SRAM - Garrett Mason & Harrison Heselbarth";
 19a:	89 e2       	ldi	r24, 0x29	; 41
 19c:	e0 e0       	ldi	r30, 0x00	; 0
 19e:	f1 e0       	ldi	r31, 0x01	; 1
 1a0:	de 01       	movw	r26, r28
 1a2:	11 96       	adiw	r26, 0x01	; 1
 1a4:	01 90       	ld	r0, Z+
 1a6:	0d 92       	st	X+, r0
 1a8:	8a 95       	dec	r24
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <main+0x1e>
	char *string_p;
	uint32_t temp32;
	LEDS_Off(LED0_port, LED0_pin);
 1ac:	60 e8       	ldi	r22, 0x80	; 128
 1ae:	86 e2       	ldi	r24, 0x26	; 38
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 c0 00 	call	0x180	; 0x180 <LEDS_Off>
	LEDS_Init(LED0_port, LED0_pin);
 1b6:	60 e8       	ldi	r22, 0x80	; 128
 1b8:	86 e2       	ldi	r24, 0x26	; 38
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 bd 00 	call	0x17a	; 0x17a <LEDS_Init>
	LEDS_Off(LED1_port, LED1_pin);
 1c0:	68 e0       	ldi	r22, 0x08	; 8
 1c2:	83 e2       	ldi	r24, 0x23	; 35
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 c0 00 	call	0x180	; 0x180 <LEDS_Off>
	LEDS_Init(LED1_port, LED1_pin);
 1ca:	68 e0       	ldi	r22, 0x08	; 8
 1cc:	83 e2       	ldi	r24, 0x23	; 35
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 bd 00 	call	0x17a	; 0x17a <LEDS_Init>
	LEDS_Off(LED2_port, LED2_pin);
 1d4:	60 e1       	ldi	r22, 0x10	; 16
 1d6:	8c e2       	ldi	r24, 0x2C	; 44
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 c0 00 	call	0x180	; 0x180 <LEDS_Off>
	LEDS_Init(LED2_port, LED2_pin);
 1de:	60 e1       	ldi	r22, 0x10	; 16
 1e0:	8c e2       	ldi	r24, 0x2C	; 44
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 bd 00 	call	0x17a	; 0x17a <LEDS_Init>
	LEDS_Off(LED3_port, LED3_pin);
 1e8:	60 e8       	ldi	r22, 0x80	; 128
 1ea:	80 e2       	ldi	r24, 0x20	; 32
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 c0 00 	call	0x180	; 0x180 <LEDS_Off>
	LEDS_Init(LED3_port, LED3_pin);
 1f2:	60 e8       	ldi	r22, 0x80	; 128
 1f4:	80 e2       	ldi	r24, 0x20	; 32
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 bd 00 	call	0x17a	; 0x17a <LEDS_Init>
	UART_Init(UART1,9600);
 1fc:	60 e8       	ldi	r22, 0x80	; 128
 1fe:	75 e2       	ldi	r23, 0x25	; 37
 200:	88 ec       	ldi	r24, 0xC8	; 200
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 a1 02 	call	0x542	; 0x542 <UART_Init>
	string_p=Export_print_buffer();
 208:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <Export_print_buffer>
 20c:	8c 01       	movw	r16, r24
	Copy_String_to_Buffer(test_string,0,string_p);
 20e:	ac 01       	movw	r20, r24
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	8c ec       	ldi	r24, 0xCC	; 204
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 d5 02 	call	0x5aa	; 0x5aa <Copy_String_to_Buffer>
	UART_Transmit_String(UART1,0,string_p);
 21a:	a8 01       	movw	r20, r16
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	88 ec       	ldi	r24, 0xC8	; 200
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <UART_Transmit_String>
	print_memory(UART1,50,(uint8_t *)string_in_SRAM);
 226:	ae 01       	movw	r20, r28
 228:	4f 5f       	subi	r20, 0xFF	; 255
 22a:	5f 4f       	sbci	r21, 0xFF	; 255
 22c:	62 e3       	ldi	r22, 0x32	; 50
 22e:	70 e0       	ldi	r23, 0x00	; 0
 230:	88 ec       	ldi	r24, 0xC8	; 200
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 a8 01 	call	0x350	; 0x350 <print_memory>
	
	SPI_Master_Init(SPI0_base, 400000UL);
 238:	40 e8       	ldi	r20, 0x80	; 128
 23a:	5a e1       	ldi	r21, 0x1A	; 26
 23c:	66 e0       	ldi	r22, 0x06	; 6
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	8c e4       	ldi	r24, 0x4C	; 76
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 d5 01 	call	0x3aa	; 0x3aa <SPI_Master_Init>
	while(1){
		Send_Command(0x00, 0xAAAAAAAA);
 248:	4a ea       	ldi	r20, 0xAA	; 170
 24a:	5a ea       	ldi	r21, 0xAA	; 170
 24c:	ba 01       	movw	r22, r20
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 63 02 	call	0x4c6	; 0x4c6 <Send_Command>
 256:	f8 cf       	rjmp	.-16     	; 0x248 <main+0xc2>

00000258 <print_16bytes>:
INPUT: Pointer to an array of eight bytes
RETURNS: nothing
CAUTION: 
************************************************************************/
void print_16bytes(volatile UART_t * UART_addr, uint8_t * array_in, uint16_t offset)
{
 258:	af 92       	push	r10
 25a:	bf 92       	push	r11
 25c:	df 92       	push	r13
 25e:	ef 92       	push	r14
 260:	ff 92       	push	r15
 262:	0f 93       	push	r16
 264:	1f 93       	push	r17
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	8c 01       	movw	r16, r24
 26c:	7b 01       	movw	r14, r22
 26e:	5a 01       	movw	r10, r20
   uint8_t * input;
   uint8_t index, dat;
   char * prnt_bffr;
   
   prnt_bffr=Export_print_buffer();
 270:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <Export_print_buffer>
 274:	d8 2e       	mov	r13, r24
 276:	d9 2f       	mov	r29, r25
   
   input = array_in+offset;
 278:	ea 0c       	add	r14, r10
 27a:	fb 1c       	adc	r15, r11
   sprintf(prnt_bffr, "%p ",input);
 27c:	ff 92       	push	r15
 27e:	ef 92       	push	r14
 280:	8f e3       	ldi	r24, 0x3F	; 63
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	9f 93       	push	r25
 286:	8f 93       	push	r24
 288:	df 93       	push	r29
 28a:	df 92       	push	r13
 28c:	0e 94 4e 03 	call	0x69c	; 0x69c <sprintf>
   UART_Transmit_String(UART_addr,0,prnt_bffr);
 290:	4d 2d       	mov	r20, r13
 292:	5d 2f       	mov	r21, r29
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	c8 01       	movw	r24, r16
 298:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <UART_Transmit_String>
   sprintf(prnt_bffr,"0x%4.4X  ",offset);
 29c:	bf 92       	push	r11
 29e:	af 92       	push	r10
 2a0:	83 e4       	ldi	r24, 0x43	; 67
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	9f 93       	push	r25
 2a6:	8f 93       	push	r24
 2a8:	df 93       	push	r29
 2aa:	df 92       	push	r13
 2ac:	0e 94 4e 03 	call	0x69c	; 0x69c <sprintf>
   UART_Transmit_String(UART_addr,0,prnt_bffr);
 2b0:	4d 2d       	mov	r20, r13
 2b2:	5d 2f       	mov	r21, r29
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	c8 01       	movw	r24, r16
 2b8:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <UART_Transmit_String>
   for (index=0;index<16;index++)
 2bc:	8d b7       	in	r24, 0x3d	; 61
 2be:	9e b7       	in	r25, 0x3e	; 62
 2c0:	0c 96       	adiw	r24, 0x0c	; 12
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	f8 94       	cli
 2c6:	9e bf       	out	0x3e, r25	; 62
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	8d bf       	out	0x3d, r24	; 61
 2cc:	c0 e0       	ldi	r28, 0x00	; 0
 2ce:	1b c0       	rjmp	.+54     	; 0x306 <print_16bytes+0xae>
   {
      dat=*(input+index);
 2d0:	f7 01       	movw	r30, r14
 2d2:	ec 0f       	add	r30, r28
 2d4:	f1 1d       	adc	r31, r1
 2d6:	80 81       	ld	r24, Z
      sprintf(prnt_bffr, "%2.2X ",dat);   // Changed from %2.2bX because this printf function can correctly determine number of bytes
 2d8:	1f 92       	push	r1
 2da:	8f 93       	push	r24
 2dc:	8d e4       	ldi	r24, 0x4D	; 77
 2de:	91 e0       	ldi	r25, 0x01	; 1
 2e0:	9f 93       	push	r25
 2e2:	8f 93       	push	r24
 2e4:	df 93       	push	r29
 2e6:	df 92       	push	r13
 2e8:	0e 94 4e 03 	call	0x69c	; 0x69c <sprintf>
	  UART_Transmit_String(UART_addr,0,prnt_bffr);
 2ec:	4d 2d       	mov	r20, r13
 2ee:	5d 2f       	mov	r21, r29
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	c8 01       	movw	r24, r16
 2f4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <UART_Transmit_String>
   input = array_in+offset;
   sprintf(prnt_bffr, "%p ",input);
   UART_Transmit_String(UART_addr,0,prnt_bffr);
   sprintf(prnt_bffr,"0x%4.4X  ",offset);
   UART_Transmit_String(UART_addr,0,prnt_bffr);
   for (index=0;index<16;index++)
 2f8:	cf 5f       	subi	r28, 0xFF	; 255
 2fa:	0f 90       	pop	r0
 2fc:	0f 90       	pop	r0
 2fe:	0f 90       	pop	r0
 300:	0f 90       	pop	r0
 302:	0f 90       	pop	r0
 304:	0f 90       	pop	r0
 306:	c0 31       	cpi	r28, 0x10	; 16
 308:	18 f3       	brcs	.-58     	; 0x2d0 <print_16bytes+0x78>
 30a:	c0 e0       	ldi	r28, 0x00	; 0
 30c:	0d c0       	rjmp	.+26     	; 0x328 <print_16bytes+0xd0>
      sprintf(prnt_bffr, "%2.2X ",dat);   // Changed from %2.2bX because this printf function can correctly determine number of bytes
	  UART_Transmit_String(UART_addr,0,prnt_bffr);
   }
   for (index=0;index<16;index++)
   { 
      dat=*(input+index);
 30e:	f7 01       	movw	r30, r14
 310:	ec 0f       	add	r30, r28
 312:	f1 1d       	adc	r31, r1
 314:	60 81       	ld	r22, Z
      if (dat<32 || dat>127) dat=46;
 316:	80 ee       	ldi	r24, 0xE0	; 224
 318:	86 0f       	add	r24, r22
 31a:	80 36       	cpi	r24, 0x60	; 96
 31c:	08 f0       	brcs	.+2      	; 0x320 <print_16bytes+0xc8>
 31e:	6e e2       	ldi	r22, 0x2E	; 46
      UART_Transmit(UART_addr,dat);
 320:	c8 01       	movw	r24, r16
 322:	0e 94 cb 02 	call	0x596	; 0x596 <UART_Transmit>
   {
      dat=*(input+index);
      sprintf(prnt_bffr, "%2.2X ",dat);   // Changed from %2.2bX because this printf function can correctly determine number of bytes
	  UART_Transmit_String(UART_addr,0,prnt_bffr);
   }
   for (index=0;index<16;index++)
 326:	cf 5f       	subi	r28, 0xFF	; 255
 328:	c0 31       	cpi	r28, 0x10	; 16
 32a:	88 f3       	brcs	.-30     	; 0x30e <print_16bytes+0xb6>
   { 
      dat=*(input+index);
      if (dat<32 || dat>127) dat=46;
      UART_Transmit(UART_addr,dat);
   }
   UART_Transmit(UART_addr,CR);
 32c:	6d e0       	ldi	r22, 0x0D	; 13
 32e:	c8 01       	movw	r24, r16
 330:	0e 94 cb 02 	call	0x596	; 0x596 <UART_Transmit>
   UART_Transmit(UART_addr,LF);
 334:	6a e0       	ldi	r22, 0x0A	; 10
 336:	c8 01       	movw	r24, r16
 338:	0e 94 cb 02 	call	0x596	; 0x596 <UART_Transmit>
}
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	1f 91       	pop	r17
 342:	0f 91       	pop	r16
 344:	ff 90       	pop	r15
 346:	ef 90       	pop	r14
 348:	df 90       	pop	r13
 34a:	bf 90       	pop	r11
 34c:	af 90       	pop	r10
 34e:	08 95       	ret

00000350 <print_memory>:
INPUT: Pointer to an array, number of bytes to print
RETURNS: nothing
CAUTION: 
************************************************************************/
void print_memory(volatile UART_t * UART_addr, uint16_t number_of_bytes, uint8_t * array_in)
{
 350:	cf 92       	push	r12
 352:	df 92       	push	r13
 354:	ef 92       	push	r14
 356:	ff 92       	push	r15
 358:	0f 93       	push	r16
 35a:	1f 93       	push	r17
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	8c 01       	movw	r16, r24
 362:	6b 01       	movw	r12, r22
 364:	7a 01       	movw	r14, r20
   uint16_t input;
   char * prnt_bffr;
   
   prnt_bffr=Export_print_buffer();
 366:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <Export_print_buffer>
 36a:	ec 01       	movw	r28, r24
   
   input = 0;
   Copy_String_to_Buffer(Prnt_bytes_prnt,0,prnt_bffr);
 36c:	ac 01       	movw	r20, r24
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	8b ed       	ldi	r24, 0xDB	; 219
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 d5 02 	call	0x5aa	; 0x5aa <Copy_String_to_Buffer>
   UART_Transmit_String(UART_addr,0,prnt_bffr);
 378:	ae 01       	movw	r20, r28
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	c8 01       	movw	r24, r16
 37e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <UART_Transmit_String>
   uint16_t input;
   char * prnt_bffr;
   
   prnt_bffr=Export_print_buffer();
   
   input = 0;
 382:	c0 e0       	ldi	r28, 0x00	; 0
 384:	d0 e0       	ldi	r29, 0x00	; 0
   Copy_String_to_Buffer(Prnt_bytes_prnt,0,prnt_bffr);
   UART_Transmit_String(UART_addr,0,prnt_bffr);
   do
   {
      print_16bytes(UART_addr,array_in,input);
 386:	ae 01       	movw	r20, r28
 388:	b7 01       	movw	r22, r14
 38a:	c8 01       	movw	r24, r16
 38c:	0e 94 2c 01 	call	0x258	; 0x258 <print_16bytes>
      input+=16;
 390:	60 96       	adiw	r28, 0x10	; 16
   }while(input<(number_of_bytes));
 392:	cc 15       	cp	r28, r12
 394:	dd 05       	cpc	r29, r13
 396:	b8 f3       	brcs	.-18     	; 0x386 <print_memory+0x36>
}
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	1f 91       	pop	r17
 39e:	0f 91       	pop	r16
 3a0:	ff 90       	pop	r15
 3a2:	ef 90       	pop	r14
 3a4:	df 90       	pop	r13
 3a6:	cf 90       	pop	r12
 3a8:	08 95       	ret

000003aa <SPI_Master_Init>:
#include "SPI.h"
#include "board_struct.h"
#include "GPIO_Outputs.h"

uint8_t SPI_Master_Init(uint8_t volatile *SPI_addr, uint32_t clock_rate)
{
 3aa:	1f 93       	push	r17
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	ec 01       	movw	r28, r24
 3b2:	9a 01       	movw	r18, r20
 3b4:	ab 01       	movw	r20, r22
	uint8_t return_value = 0x00;
	uint32_t divider = (F_CPU / F_DIV) / (clock_rate);
 3b6:	60 e0       	ldi	r22, 0x00	; 0
 3b8:	74 e2       	ldi	r23, 0x24	; 36
 3ba:	84 ef       	ldi	r24, 0xF4	; 244
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	0e 94 2c 03 	call	0x658	; 0x658 <__udivmodsi4>
	
	if(divider < 2){
 3c2:	22 30       	cpi	r18, 0x02	; 2
 3c4:	31 05       	cpc	r19, r1
 3c6:	41 05       	cpc	r20, r1
 3c8:	51 05       	cpc	r21, r1
 3ca:	30 f4       	brcc	.+12     	; 0x3d8 <SPI_Master_Init+0x2e>
		*(SPI_addr + SPCR) = ((1<<SPE) | (1<<MSTR) | (CPOL_bit << CPOL) | (CPHA_bit<<CPHA) | 0<<0);
 3cc:	80 e5       	ldi	r24, 0x50	; 80
 3ce:	88 83       	st	Y, r24
		*(SPI_addr+SPSR) = 1;
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	89 83       	std	Y+1, r24	; 0x01
#include "board_struct.h"
#include "GPIO_Outputs.h"

uint8_t SPI_Master_Init(uint8_t volatile *SPI_addr, uint32_t clock_rate)
{
	uint8_t return_value = 0x00;
 3d4:	10 e0       	ldi	r17, 0x00	; 0
 3d6:	3f c0       	rjmp	.+126    	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
	
	if(divider < 2){
		*(SPI_addr + SPCR) = ((1<<SPE) | (1<<MSTR) | (CPOL_bit << CPOL) | (CPHA_bit<<CPHA) | 0<<0);
		*(SPI_addr+SPSR) = 1;
	}
	else if(divider < 4){
 3d8:	24 30       	cpi	r18, 0x04	; 4
 3da:	31 05       	cpc	r19, r1
 3dc:	41 05       	cpc	r20, r1
 3de:	51 05       	cpc	r21, r1
 3e0:	28 f4       	brcc	.+10     	; 0x3ec <SPI_Master_Init+0x42>
		*(SPI_addr + SPCR) = ((1<<SPE) | (1<<MSTR) | (CPOL_bit << CPOL) | (CPHA_bit<<CPHA) | 0<<0);
 3e2:	80 e5       	ldi	r24, 0x50	; 80
 3e4:	88 83       	st	Y, r24
		*(SPI_addr+SPSR) = 0;
 3e6:	19 82       	std	Y+1, r1	; 0x01
#include "board_struct.h"
#include "GPIO_Outputs.h"

uint8_t SPI_Master_Init(uint8_t volatile *SPI_addr, uint32_t clock_rate)
{
	uint8_t return_value = 0x00;
 3e8:	10 e0       	ldi	r17, 0x00	; 0
 3ea:	35 c0       	rjmp	.+106    	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
	}
	else if(divider < 4){
		*(SPI_addr + SPCR) = ((1<<SPE) | (1<<MSTR) | (CPOL_bit << CPOL) | (CPHA_bit<<CPHA) | 0<<0);
		*(SPI_addr+SPSR) = 0;
	}
	else if(divider < 8){
 3ec:	28 30       	cpi	r18, 0x08	; 8
 3ee:	31 05       	cpc	r19, r1
 3f0:	41 05       	cpc	r20, r1
 3f2:	51 05       	cpc	r21, r1
 3f4:	30 f4       	brcc	.+12     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
		*(SPI_addr + SPCR) = ((1<<SPE) | (1<<MSTR) | (CPOL_bit << CPOL) | (CPHA_bit<<CPHA) | 1<<0);
 3f6:	81 e5       	ldi	r24, 0x51	; 81
 3f8:	88 83       	st	Y, r24
		*(SPI_addr+SPSR) = 1;
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	89 83       	std	Y+1, r24	; 0x01
#include "board_struct.h"
#include "GPIO_Outputs.h"

uint8_t SPI_Master_Init(uint8_t volatile *SPI_addr, uint32_t clock_rate)
{
	uint8_t return_value = 0x00;
 3fe:	10 e0       	ldi	r17, 0x00	; 0
 400:	2a c0       	rjmp	.+84     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
	}
	else if(divider < 8){
		*(SPI_addr + SPCR) = ((1<<SPE) | (1<<MSTR) | (CPOL_bit << CPOL) | (CPHA_bit<<CPHA) | 1<<0);
		*(SPI_addr+SPSR) = 1;
	}
	else if(divider < 16){
 402:	20 31       	cpi	r18, 0x10	; 16
 404:	31 05       	cpc	r19, r1
 406:	41 05       	cpc	r20, r1
 408:	51 05       	cpc	r21, r1
 40a:	28 f4       	brcc	.+10     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
		*(SPI_addr + SPCR) = ((1<<SPE) | (1<<MSTR) | (CPOL_bit << CPOL) | (CPHA_bit<<CPHA) | 1<<0);
 40c:	81 e5       	ldi	r24, 0x51	; 81
 40e:	88 83       	st	Y, r24
		*(SPI_addr+SPSR) = 0;
 410:	19 82       	std	Y+1, r1	; 0x01
#include "board_struct.h"
#include "GPIO_Outputs.h"

uint8_t SPI_Master_Init(uint8_t volatile *SPI_addr, uint32_t clock_rate)
{
	uint8_t return_value = 0x00;
 412:	10 e0       	ldi	r17, 0x00	; 0
 414:	20 c0       	rjmp	.+64     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
	}
	else if(divider < 16){
		*(SPI_addr + SPCR) = ((1<<SPE) | (1<<MSTR) | (CPOL_bit << CPOL) | (CPHA_bit<<CPHA) | 1<<0);
		*(SPI_addr+SPSR) = 0;
	}
	else if(divider < 32){
 416:	20 32       	cpi	r18, 0x20	; 32
 418:	31 05       	cpc	r19, r1
 41a:	41 05       	cpc	r20, r1
 41c:	51 05       	cpc	r21, r1
 41e:	30 f4       	brcc	.+12     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
		*(SPI_addr + SPCR) = ((1<<SPE) | (1<<MSTR) | (CPOL_bit << CPOL) | (CPHA_bit<<CPHA) | 2<<0);
 420:	82 e5       	ldi	r24, 0x52	; 82
 422:	88 83       	st	Y, r24
		*(SPI_addr+SPSR) = 1;
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	89 83       	std	Y+1, r24	; 0x01
#include "board_struct.h"
#include "GPIO_Outputs.h"

uint8_t SPI_Master_Init(uint8_t volatile *SPI_addr, uint32_t clock_rate)
{
	uint8_t return_value = 0x00;
 428:	10 e0       	ldi	r17, 0x00	; 0
 42a:	15 c0       	rjmp	.+42     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
	}
	else if(divider < 32){
		*(SPI_addr + SPCR) = ((1<<SPE) | (1<<MSTR) | (CPOL_bit << CPOL) | (CPHA_bit<<CPHA) | 2<<0);
		*(SPI_addr+SPSR) = 1;
	}
	else if(divider < 64){
 42c:	20 34       	cpi	r18, 0x40	; 64
 42e:	31 05       	cpc	r19, r1
 430:	41 05       	cpc	r20, r1
 432:	51 05       	cpc	r21, r1
 434:	28 f4       	brcc	.+10     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		*(SPI_addr + SPCR) = ((1<<SPE) | (1<<MSTR) | (CPOL_bit << CPOL) | (CPHA_bit<<CPHA) | 2<<0);//Roger Changed
 436:	82 e5       	ldi	r24, 0x52	; 82
 438:	88 83       	st	Y, r24
		*(SPI_addr+SPSR) = 0;
 43a:	19 82       	std	Y+1, r1	; 0x01
#include "board_struct.h"
#include "GPIO_Outputs.h"

uint8_t SPI_Master_Init(uint8_t volatile *SPI_addr, uint32_t clock_rate)
{
	uint8_t return_value = 0x00;
 43c:	10 e0       	ldi	r17, 0x00	; 0
 43e:	0b c0       	rjmp	.+22     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
	}
	else if(divider < 64){
		*(SPI_addr + SPCR) = ((1<<SPE) | (1<<MSTR) | (CPOL_bit << CPOL) | (CPHA_bit<<CPHA) | 2<<0);//Roger Changed
		*(SPI_addr+SPSR) = 0;
	}
	else if(divider < 128){
 440:	20 38       	cpi	r18, 0x80	; 128
 442:	31 05       	cpc	r19, r1
 444:	41 05       	cpc	r20, r1
 446:	51 05       	cpc	r21, r1
 448:	28 f4       	brcc	.+10     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
		*(SPI_addr + SPCR) = ((1<<SPE) | (1<<MSTR) | (CPOL_bit << CPOL) | (CPHA_bit<<CPHA) | 3<<0);
 44a:	83 e5       	ldi	r24, 0x53	; 83
 44c:	88 83       	st	Y, r24
		*(SPI_addr+SPSR) = 0;
 44e:	19 82       	std	Y+1, r1	; 0x01
#include "board_struct.h"
#include "GPIO_Outputs.h"

uint8_t SPI_Master_Init(uint8_t volatile *SPI_addr, uint32_t clock_rate)
{
	uint8_t return_value = 0x00;
 450:	10 e0       	ldi	r17, 0x00	; 0
 452:	01 c0       	rjmp	.+2      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
	else if(divider < 128){
		*(SPI_addr + SPCR) = ((1<<SPE) | (1<<MSTR) | (CPOL_bit << CPOL) | (CPHA_bit<<CPHA) | 3<<0);
		*(SPI_addr+SPSR) = 0;
	}
	else{
		return_value = clock_rate_error;
 454:	1f ef       	ldi	r17, 0xFF	; 255
	}

	//Initializing MOSI and SCK
	if(SPI_addr == SPI0_base){
 456:	cc 34       	cpi	r28, 0x4C	; 76
 458:	d1 05       	cpc	r29, r1
 45a:	a9 f4       	brne	.+42     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
		//Initializing MOSI
		GPIO_Output_Set(PB, (1<<5));
 45c:	60 e2       	ldi	r22, 0x20	; 32
 45e:	83 e2       	ldi	r24, 0x23	; 35
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	0e 94 b2 00 	call	0x164	; 0x164 <GPIO_Output_Set>
		GPIO_Output_Init(PB, (1<<5));
 466:	60 e2       	ldi	r22, 0x20	; 32
 468:	83 e2       	ldi	r24, 0x23	; 35
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	0e 94 ad 00 	call	0x15a	; 0x15a <GPIO_Output_Init>
		
		if(CPOL_bit == 0){
			//Setting SCK to idle state
			GPIO_Output_Clear(PB, (1<<7));
 470:	60 e8       	ldi	r22, 0x80	; 128
 472:	83 e2       	ldi	r24, 0x23	; 35
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	0e 94 b7 00 	call	0x16e	; 0x16e <GPIO_Output_Clear>
			GPIO_Output_Init(PB, (1<<7));
 47a:	60 e8       	ldi	r22, 0x80	; 128
 47c:	83 e2       	ldi	r24, 0x23	; 35
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	0e 94 ad 00 	call	0x15a	; 0x15a <GPIO_Output_Init>
 484:	14 c0       	rjmp	.+40     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
			GPIO_Output_Init(PB, (0<<7));
		}
	}
	else{
		//Initializing MOSI
		GPIO_Output_Set(PE, (1<<3));
 486:	68 e0       	ldi	r22, 0x08	; 8
 488:	8c e2       	ldi	r24, 0x2C	; 44
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	0e 94 b2 00 	call	0x164	; 0x164 <GPIO_Output_Set>
		GPIO_Output_Init(PE, (1<<3));
 490:	68 e0       	ldi	r22, 0x08	; 8
 492:	8c e2       	ldi	r24, 0x2C	; 44
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 ad 00 	call	0x15a	; 0x15a <GPIO_Output_Init>
		
		if(CPOL_bit == 0){
			//Setting SCK to idle state
			GPIO_Output_Clear(PD, (1<<7));
 49a:	60 e8       	ldi	r22, 0x80	; 128
 49c:	89 e2       	ldi	r24, 0x29	; 41
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	0e 94 b7 00 	call	0x16e	; 0x16e <GPIO_Output_Clear>
			GPIO_Output_Init(PD, (1<<7));
 4a4:	60 e8       	ldi	r22, 0x80	; 128
 4a6:	89 e2       	ldi	r24, 0x29	; 41
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 ad 00 	call	0x15a	; 0x15a <GPIO_Output_Init>
			GPIO_Output_Init(PD, (0<<7));
		}
	}
	
	return return_value;
}
 4ae:	81 2f       	mov	r24, r17
 4b0:	df 91       	pop	r29
 4b2:	cf 91       	pop	r28
 4b4:	1f 91       	pop	r17
 4b6:	08 95       	ret

000004b8 <SPI_Transfer>:

uint8_t SPI_Transfer(uint8_t volatile *SPI_addr, uint8_t send_value){
 4b8:	fc 01       	movw	r30, r24
	uint8_t status;
	
	*(SPI_addr + SPDR) = send_value;
 4ba:	62 83       	std	Z+2, r22	; 0x02
	
	do{
		status = *(SPI_addr + SPSR);
 4bc:	91 81       	ldd	r25, Z+1	; 0x01
	}while((status & 0x80) == 0);
 4be:	99 23       	and	r25, r25
 4c0:	ec f7       	brge	.-6      	; 0x4bc <SPI_Transfer+0x4>
	
	return *(SPI_addr + SPDR);
 4c2:	82 81       	ldd	r24, Z+2	; 0x02
}
 4c4:	08 95       	ret

000004c6 <Send_Command>:

uint8_t Send_Command (uint8_t command, uint32_t argument){
 4c6:	cf 92       	push	r12
 4c8:	df 92       	push	r13
 4ca:	ef 92       	push	r14
 4cc:	ff 92       	push	r15
 4ce:	cf 93       	push	r28
 4d0:	df 93       	push	r29
	uint8_t return_value;
	uint8_t illegal_command = 0xFF; //Guessed on value for error
	uint8_t send_value; //Right type?
	
	if(command < 64){
 4d2:	80 34       	cpi	r24, 0x40	; 64
 4d4:	d8 f0       	brcs	.+54     	; 0x50c <Send_Command+0x46>
		return_value = no_errors;
	}
	else{
		return_value = illegal_command;
		return return_value;
 4d6:	8f ef       	ldi	r24, 0xFF	; 255
 4d8:	2d c0       	rjmp	.+90     	; 0x534 <Send_Command+0x6e>
	}
	
	send_value = 0x40 | command;
	for(uint8_t index = 0; index < 4; index++){
		send_value = (uint8_t)(argument >> (24 - (index * 8)));
 4da:	23 e0       	ldi	r18, 0x03	; 3
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	2c 1b       	sub	r18, r28
 4e0:	31 09       	sbc	r19, r1
 4e2:	22 0f       	add	r18, r18
 4e4:	33 1f       	adc	r19, r19
 4e6:	22 0f       	add	r18, r18
 4e8:	33 1f       	adc	r19, r19
 4ea:	22 0f       	add	r18, r18
 4ec:	33 1f       	adc	r19, r19
 4ee:	c7 01       	movw	r24, r14
 4f0:	b6 01       	movw	r22, r12
 4f2:	04 c0       	rjmp	.+8      	; 0x4fc <Send_Command+0x36>
 4f4:	96 95       	lsr	r25
 4f6:	87 95       	ror	r24
 4f8:	77 95       	ror	r23
 4fa:	67 95       	ror	r22
 4fc:	2a 95       	dec	r18
 4fe:	d2 f7       	brpl	.-12     	; 0x4f4 <Send_Command+0x2e>
		SPI_Transfer(SD_SPI_port, send_value);
 500:	8c e4       	ldi	r24, 0x4C	; 76
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <SPI_Transfer>
		return_value = illegal_command;
		return return_value;
	}
	
	send_value = 0x40 | command;
	for(uint8_t index = 0; index < 4; index++){
 508:	cf 5f       	subi	r28, 0xFF	; 255
 50a:	04 c0       	rjmp	.+8      	; 0x514 <Send_Command+0x4e>
 50c:	6a 01       	movw	r12, r20
 50e:	7b 01       	movw	r14, r22
 510:	d8 2f       	mov	r29, r24
 512:	c0 e0       	ldi	r28, 0x00	; 0
 514:	c4 30       	cpi	r28, 0x04	; 4
 516:	08 f3       	brcs	.-62     	; 0x4da <Send_Command+0x14>
		send_value = (uint8_t)(argument >> (24 - (index * 8)));
		SPI_Transfer(SD_SPI_port, send_value);
	}
	
	if(command == CMD0){
 518:	d0 34       	cpi	r29, 0x40	; 64
 51a:	21 f0       	breq	.+8      	; 0x524 <Send_Command+0x5e>
		send_value = 0x95;
	}
	else if (command == CMD8){
 51c:	d8 34       	cpi	r29, 0x48	; 72
 51e:	21 f4       	brne	.+8      	; 0x528 <Send_Command+0x62>
		send_value = 0x87;
 520:	67 e8       	ldi	r22, 0x87	; 135
 522:	03 c0       	rjmp	.+6      	; 0x52a <Send_Command+0x64>
		send_value = (uint8_t)(argument >> (24 - (index * 8)));
		SPI_Transfer(SD_SPI_port, send_value);
	}
	
	if(command == CMD0){
		send_value = 0x95;
 524:	65 e9       	ldi	r22, 0x95	; 149
 526:	01 c0       	rjmp	.+2      	; 0x52a <Send_Command+0x64>
	}
	else if (command == CMD8){
		send_value = 0x87;
	}
	else{
		send_value = 0x01;
 528:	61 e0       	ldi	r22, 0x01	; 1
	}
	
	SPI_Transfer(SD_SPI_port, send_value);	
 52a:	8c e4       	ldi	r24, 0x4C	; 76
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <SPI_Transfer>
	return return_value;
 532:	80 e0       	ldi	r24, 0x00	; 0
}
 534:	df 91       	pop	r29
 536:	cf 91       	pop	r28
 538:	ff 90       	pop	r15
 53a:	ef 90       	pop	r14
 53c:	df 90       	pop	r13
 53e:	cf 90       	pop	r12
 540:	08 95       	ret

00000542 <UART_Init>:




void UART_Init (volatile UART_t * UART_addr, uint16_t Baud_Rate)
{
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
 546:	ec 01       	movw	r28, r24
	uint16_t Baud_Rate_Reload;
	Baud_Rate_Reload = (uint16_t)(((F_CPU/F_DIV)/(8UL*(2-U2X_bit)*Baud_Rate))-1);
 548:	cb 01       	movw	r24, r22
 54a:	a0 e0       	ldi	r26, 0x00	; 0
 54c:	b0 e0       	ldi	r27, 0x00	; 0
 54e:	88 0f       	add	r24, r24
 550:	99 1f       	adc	r25, r25
 552:	aa 1f       	adc	r26, r26
 554:	bb 1f       	adc	r27, r27
 556:	88 0f       	add	r24, r24
 558:	99 1f       	adc	r25, r25
 55a:	aa 1f       	adc	r26, r26
 55c:	bb 1f       	adc	r27, r27
 55e:	9c 01       	movw	r18, r24
 560:	ad 01       	movw	r20, r26
 562:	22 0f       	add	r18, r18
 564:	33 1f       	adc	r19, r19
 566:	44 1f       	adc	r20, r20
 568:	55 1f       	adc	r21, r21
 56a:	22 0f       	add	r18, r18
 56c:	33 1f       	adc	r19, r19
 56e:	44 1f       	adc	r20, r20
 570:	55 1f       	adc	r21, r21
 572:	60 e0       	ldi	r22, 0x00	; 0
 574:	74 e2       	ldi	r23, 0x24	; 36
 576:	84 ef       	ldi	r24, 0xF4	; 244
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	0e 94 2c 03 	call	0x658	; 0x658 <__udivmodsi4>
 57e:	21 50       	subi	r18, 0x01	; 1
 580:	31 09       	sbc	r19, r1
	
	(UART_addr->UBBRH) = (Baud_Rate_Reload / 256);
 582:	3d 83       	std	Y+5, r19	; 0x05
	(UART_addr->UBBRL) = (Baud_Rate_Reload % 256);
 584:	2c 83       	std	Y+4, r18	; 0x04
		
	(UART_addr->UCSRA) = U2X_bit<<U2X_shift;
 586:	18 82       	st	Y, r1
	(UART_addr->UCSRC) = Asynchronous|No_Parity|One_Stop_Bit|Eight_Data_Bits;
 588:	86 e0       	ldi	r24, 0x06	; 6
 58a:	8a 83       	std	Y+2, r24	; 0x02
	(UART_addr->UCSRB) = RX_enable|TX_enable;
 58c:	88 e1       	ldi	r24, 0x18	; 24
 58e:	89 83       	std	Y+1, r24	; 0x01
}
 590:	df 91       	pop	r29
 592:	cf 91       	pop	r28
 594:	08 95       	ret

00000596 <UART_Transmit>:

char UART_Transmit(volatile UART_t * UART_addr, char c)
{
 596:	fc 01       	movw	r30, r24
	uint8_t status;
	do
	{
		status=(UART_addr->UCSRA);
 598:	90 81       	ld	r25, Z
	} while ((status & (1 << UDRE))!=(1 << UDRE));
 59a:	95 ff       	sbrs	r25, 5
 59c:	fd cf       	rjmp	.-6      	; 0x598 <UART_Transmit+0x2>
	(UART_addr->UDR) = c;
 59e:	66 83       	std	Z+6, r22	; 0x06
	return 0;
}
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	08 95       	ret

000005a4 <Export_print_buffer>:

char * Export_print_buffer(void)
{
	
	return print_buffer;
}
 5a4:	84 e5       	ldi	r24, 0x54	; 84
 5a6:	91 e0       	ldi	r25, 0x01	; 1
 5a8:	08 95       	ret

000005aa <Copy_String_to_Buffer>:

uint8_t Copy_String_to_Buffer(const char flash_string[], uint8_t num_bytes, char buffer_p[])
{
 5aa:	cf 93       	push	r28
 5ac:	df 93       	push	r29
 5ae:	dc 01       	movw	r26, r24
	uint8_t index;
	char value;
	if(num_bytes==0)
 5b0:	61 11       	cpse	r22, r1
 5b2:	1a c0       	rjmp	.+52     	; 0x5e8 <Copy_String_to_Buffer+0x3e>
	{
		index=0;
		do
		{
			value=pgm_read_byte(&flash_string[index]);
 5b4:	26 2f       	mov	r18, r22
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	fd 01       	movw	r30, r26
 5ba:	e2 0f       	add	r30, r18
 5bc:	f3 1f       	adc	r31, r19
 5be:	e4 91       	lpm	r30, Z
			buffer_p[index]=value;
 5c0:	ea 01       	movw	r28, r20
 5c2:	c2 0f       	add	r28, r18
 5c4:	d3 1f       	adc	r29, r19
 5c6:	e8 83       	st	Y, r30
			index++;
 5c8:	6f 5f       	subi	r22, 0xFF	; 255
		} while (value!=0);
 5ca:	e1 11       	cpse	r30, r1
 5cc:	f3 cf       	rjmp	.-26     	; 0x5b4 <Copy_String_to_Buffer+0xa>
 5ce:	0f c0       	rjmp	.+30     	; 0x5ee <Copy_String_to_Buffer+0x44>
	}
	else
	{
		for(index=0;index<num_bytes;index++)
		{
			value=pgm_read_byte(&flash_string[index]);
 5d0:	29 2f       	mov	r18, r25
 5d2:	30 e0       	ldi	r19, 0x00	; 0
 5d4:	fd 01       	movw	r30, r26
 5d6:	e2 0f       	add	r30, r18
 5d8:	f3 1f       	adc	r31, r19
 5da:	e4 91       	lpm	r30, Z
			buffer_p[index]=value;
 5dc:	ea 01       	movw	r28, r20
 5de:	c2 0f       	add	r28, r18
 5e0:	d3 1f       	adc	r29, r19
 5e2:	e8 83       	st	Y, r30
			index++;
		} while (value!=0);
	}
	else
	{
		for(index=0;index<num_bytes;index++)
 5e4:	9f 5f       	subi	r25, 0xFF	; 255
 5e6:	01 c0       	rjmp	.+2      	; 0x5ea <Copy_String_to_Buffer+0x40>
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	96 17       	cp	r25, r22
 5ec:	88 f3       	brcs	.-30     	; 0x5d0 <Copy_String_to_Buffer+0x26>
			buffer_p[index]=value;
		}
		index=num_bytes;
	}
	return index;
}
 5ee:	86 2f       	mov	r24, r22
 5f0:	df 91       	pop	r29
 5f2:	cf 91       	pop	r28
 5f4:	08 95       	ret

000005f6 <UART_Transmit_String>:

void UART_Transmit_String(volatile UART_t * UART_addr, uint8_t num_bytes, char * string_name)
{
 5f6:	ef 92       	push	r14
 5f8:	ff 92       	push	r15
 5fa:	0f 93       	push	r16
 5fc:	1f 93       	push	r17
 5fe:	cf 93       	push	r28
 600:	df 93       	push	r29
 602:	7c 01       	movw	r14, r24
 604:	06 2f       	mov	r16, r22
 606:	ea 01       	movw	r28, r20
	char temp8;
	int8_t index;
	if(num_bytes==0)
 608:	61 11       	cpse	r22, r1
 60a:	15 c0       	rjmp	.+42     	; 0x636 <UART_Transmit_String+0x40>
	{
		temp8=*string_name;
 60c:	68 81       	ld	r22, Y
		while (temp8!=0)
 60e:	05 c0       	rjmp	.+10     	; 0x61a <UART_Transmit_String+0x24>
		{
			UART_Transmit(UART_addr, temp8);
 610:	c7 01       	movw	r24, r14
 612:	0e 94 cb 02 	call	0x596	; 0x596 <UART_Transmit>
			string_name++;
 616:	21 96       	adiw	r28, 0x01	; 1
			temp8=*string_name;
 618:	68 81       	ld	r22, Y
	char temp8;
	int8_t index;
	if(num_bytes==0)
	{
		temp8=*string_name;
		while (temp8!=0)
 61a:	61 11       	cpse	r22, r1
 61c:	f9 cf       	rjmp	.-14     	; 0x610 <UART_Transmit_String+0x1a>
 61e:	15 c0       	rjmp	.+42     	; 0x64a <UART_Transmit_String+0x54>
	}
	else
	{
		for(index=0;index<num_bytes;index++)
		{
			UART_Transmit(UART_addr, string_name[index]);
 620:	fe 01       	movw	r30, r28
 622:	e1 0f       	add	r30, r17
 624:	f1 1d       	adc	r31, r1
 626:	17 fd       	sbrc	r17, 7
 628:	fa 95       	dec	r31
 62a:	60 81       	ld	r22, Z
 62c:	c7 01       	movw	r24, r14
 62e:	0e 94 cb 02 	call	0x596	; 0x596 <UART_Transmit>
			temp8=*string_name;
		}
	}
	else
	{
		for(index=0;index<num_bytes;index++)
 632:	1f 5f       	subi	r17, 0xFF	; 255
 634:	01 c0       	rjmp	.+2      	; 0x638 <UART_Transmit_String+0x42>
 636:	10 e0       	ldi	r17, 0x00	; 0
 638:	20 2f       	mov	r18, r16
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	81 2f       	mov	r24, r17
 63e:	01 2e       	mov	r0, r17
 640:	00 0c       	add	r0, r0
 642:	99 0b       	sbc	r25, r25
 644:	82 17       	cp	r24, r18
 646:	93 07       	cpc	r25, r19
 648:	5c f3       	brlt	.-42     	; 0x620 <UART_Transmit_String+0x2a>
		{
			UART_Transmit(UART_addr, string_name[index]);
		}
	}
}
 64a:	df 91       	pop	r29
 64c:	cf 91       	pop	r28
 64e:	1f 91       	pop	r17
 650:	0f 91       	pop	r16
 652:	ff 90       	pop	r15
 654:	ef 90       	pop	r14
 656:	08 95       	ret

00000658 <__udivmodsi4>:
 658:	a1 e2       	ldi	r26, 0x21	; 33
 65a:	1a 2e       	mov	r1, r26
 65c:	aa 1b       	sub	r26, r26
 65e:	bb 1b       	sub	r27, r27
 660:	fd 01       	movw	r30, r26
 662:	0d c0       	rjmp	.+26     	; 0x67e <__udivmodsi4_ep>

00000664 <__udivmodsi4_loop>:
 664:	aa 1f       	adc	r26, r26
 666:	bb 1f       	adc	r27, r27
 668:	ee 1f       	adc	r30, r30
 66a:	ff 1f       	adc	r31, r31
 66c:	a2 17       	cp	r26, r18
 66e:	b3 07       	cpc	r27, r19
 670:	e4 07       	cpc	r30, r20
 672:	f5 07       	cpc	r31, r21
 674:	20 f0       	brcs	.+8      	; 0x67e <__udivmodsi4_ep>
 676:	a2 1b       	sub	r26, r18
 678:	b3 0b       	sbc	r27, r19
 67a:	e4 0b       	sbc	r30, r20
 67c:	f5 0b       	sbc	r31, r21

0000067e <__udivmodsi4_ep>:
 67e:	66 1f       	adc	r22, r22
 680:	77 1f       	adc	r23, r23
 682:	88 1f       	adc	r24, r24
 684:	99 1f       	adc	r25, r25
 686:	1a 94       	dec	r1
 688:	69 f7       	brne	.-38     	; 0x664 <__udivmodsi4_loop>
 68a:	60 95       	com	r22
 68c:	70 95       	com	r23
 68e:	80 95       	com	r24
 690:	90 95       	com	r25
 692:	9b 01       	movw	r18, r22
 694:	ac 01       	movw	r20, r24
 696:	bd 01       	movw	r22, r26
 698:	cf 01       	movw	r24, r30
 69a:	08 95       	ret

0000069c <sprintf>:
 69c:	ae e0       	ldi	r26, 0x0E	; 14
 69e:	b0 e0       	ldi	r27, 0x00	; 0
 6a0:	e4 e5       	ldi	r30, 0x54	; 84
 6a2:	f3 e0       	ldi	r31, 0x03	; 3
 6a4:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__prologue_saves__+0x1c>
 6a8:	0d 89       	ldd	r16, Y+21	; 0x15
 6aa:	1e 89       	ldd	r17, Y+22	; 0x16
 6ac:	86 e0       	ldi	r24, 0x06	; 6
 6ae:	8c 83       	std	Y+4, r24	; 0x04
 6b0:	1a 83       	std	Y+2, r17	; 0x02
 6b2:	09 83       	std	Y+1, r16	; 0x01
 6b4:	8f ef       	ldi	r24, 0xFF	; 255
 6b6:	9f e7       	ldi	r25, 0x7F	; 127
 6b8:	9e 83       	std	Y+6, r25	; 0x06
 6ba:	8d 83       	std	Y+5, r24	; 0x05
 6bc:	ae 01       	movw	r20, r28
 6be:	47 5e       	subi	r20, 0xE7	; 231
 6c0:	5f 4f       	sbci	r21, 0xFF	; 255
 6c2:	6f 89       	ldd	r22, Y+23	; 0x17
 6c4:	78 8d       	ldd	r23, Y+24	; 0x18
 6c6:	ce 01       	movw	r24, r28
 6c8:	01 96       	adiw	r24, 0x01	; 1
 6ca:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vfprintf>
 6ce:	ef 81       	ldd	r30, Y+7	; 0x07
 6d0:	f8 85       	ldd	r31, Y+8	; 0x08
 6d2:	e0 0f       	add	r30, r16
 6d4:	f1 1f       	adc	r31, r17
 6d6:	10 82       	st	Z, r1
 6d8:	2e 96       	adiw	r28, 0x0e	; 14
 6da:	e4 e0       	ldi	r30, 0x04	; 4
 6dc:	0c 94 2b 06 	jmp	0xc56	; 0xc56 <__epilogue_restores__+0x1c>

000006e0 <vfprintf>:
 6e0:	ab e0       	ldi	r26, 0x0B	; 11
 6e2:	b0 e0       	ldi	r27, 0x00	; 0
 6e4:	e6 e7       	ldi	r30, 0x76	; 118
 6e6:	f3 e0       	ldi	r31, 0x03	; 3
 6e8:	0c 94 01 06 	jmp	0xc02	; 0xc02 <__prologue_saves__>
 6ec:	6c 01       	movw	r12, r24
 6ee:	7b 01       	movw	r14, r22
 6f0:	8a 01       	movw	r16, r20
 6f2:	fc 01       	movw	r30, r24
 6f4:	17 82       	std	Z+7, r1	; 0x07
 6f6:	16 82       	std	Z+6, r1	; 0x06
 6f8:	83 81       	ldd	r24, Z+3	; 0x03
 6fa:	81 ff       	sbrs	r24, 1
 6fc:	cc c1       	rjmp	.+920    	; 0xa96 <__stack+0x197>
 6fe:	ce 01       	movw	r24, r28
 700:	01 96       	adiw	r24, 0x01	; 1
 702:	3c 01       	movw	r6, r24
 704:	f6 01       	movw	r30, r12
 706:	93 81       	ldd	r25, Z+3	; 0x03
 708:	f7 01       	movw	r30, r14
 70a:	93 fd       	sbrc	r25, 3
 70c:	85 91       	lpm	r24, Z+
 70e:	93 ff       	sbrs	r25, 3
 710:	81 91       	ld	r24, Z+
 712:	7f 01       	movw	r14, r30
 714:	88 23       	and	r24, r24
 716:	09 f4       	brne	.+2      	; 0x71a <vfprintf+0x3a>
 718:	ba c1       	rjmp	.+884    	; 0xa8e <__stack+0x18f>
 71a:	85 32       	cpi	r24, 0x25	; 37
 71c:	39 f4       	brne	.+14     	; 0x72c <vfprintf+0x4c>
 71e:	93 fd       	sbrc	r25, 3
 720:	85 91       	lpm	r24, Z+
 722:	93 ff       	sbrs	r25, 3
 724:	81 91       	ld	r24, Z+
 726:	7f 01       	movw	r14, r30
 728:	85 32       	cpi	r24, 0x25	; 37
 72a:	29 f4       	brne	.+10     	; 0x736 <vfprintf+0x56>
 72c:	b6 01       	movw	r22, r12
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	0e 94 67 05 	call	0xace	; 0xace <fputc>
 734:	e7 cf       	rjmp	.-50     	; 0x704 <vfprintf+0x24>
 736:	91 2c       	mov	r9, r1
 738:	21 2c       	mov	r2, r1
 73a:	31 2c       	mov	r3, r1
 73c:	ff e1       	ldi	r31, 0x1F	; 31
 73e:	f3 15       	cp	r31, r3
 740:	d8 f0       	brcs	.+54     	; 0x778 <vfprintf+0x98>
 742:	8b 32       	cpi	r24, 0x2B	; 43
 744:	79 f0       	breq	.+30     	; 0x764 <vfprintf+0x84>
 746:	38 f4       	brcc	.+14     	; 0x756 <vfprintf+0x76>
 748:	80 32       	cpi	r24, 0x20	; 32
 74a:	79 f0       	breq	.+30     	; 0x76a <vfprintf+0x8a>
 74c:	83 32       	cpi	r24, 0x23	; 35
 74e:	a1 f4       	brne	.+40     	; 0x778 <vfprintf+0x98>
 750:	23 2d       	mov	r18, r3
 752:	20 61       	ori	r18, 0x10	; 16
 754:	1d c0       	rjmp	.+58     	; 0x790 <vfprintf+0xb0>
 756:	8d 32       	cpi	r24, 0x2D	; 45
 758:	61 f0       	breq	.+24     	; 0x772 <vfprintf+0x92>
 75a:	80 33       	cpi	r24, 0x30	; 48
 75c:	69 f4       	brne	.+26     	; 0x778 <vfprintf+0x98>
 75e:	23 2d       	mov	r18, r3
 760:	21 60       	ori	r18, 0x01	; 1
 762:	16 c0       	rjmp	.+44     	; 0x790 <vfprintf+0xb0>
 764:	83 2d       	mov	r24, r3
 766:	82 60       	ori	r24, 0x02	; 2
 768:	38 2e       	mov	r3, r24
 76a:	e3 2d       	mov	r30, r3
 76c:	e4 60       	ori	r30, 0x04	; 4
 76e:	3e 2e       	mov	r3, r30
 770:	2a c0       	rjmp	.+84     	; 0x7c6 <vfprintf+0xe6>
 772:	f3 2d       	mov	r31, r3
 774:	f8 60       	ori	r31, 0x08	; 8
 776:	1d c0       	rjmp	.+58     	; 0x7b2 <vfprintf+0xd2>
 778:	37 fc       	sbrc	r3, 7
 77a:	2d c0       	rjmp	.+90     	; 0x7d6 <vfprintf+0xf6>
 77c:	20 ed       	ldi	r18, 0xD0	; 208
 77e:	28 0f       	add	r18, r24
 780:	2a 30       	cpi	r18, 0x0A	; 10
 782:	40 f0       	brcs	.+16     	; 0x794 <vfprintf+0xb4>
 784:	8e 32       	cpi	r24, 0x2E	; 46
 786:	b9 f4       	brne	.+46     	; 0x7b6 <vfprintf+0xd6>
 788:	36 fc       	sbrc	r3, 6
 78a:	81 c1       	rjmp	.+770    	; 0xa8e <__stack+0x18f>
 78c:	23 2d       	mov	r18, r3
 78e:	20 64       	ori	r18, 0x40	; 64
 790:	32 2e       	mov	r3, r18
 792:	19 c0       	rjmp	.+50     	; 0x7c6 <vfprintf+0xe6>
 794:	36 fe       	sbrs	r3, 6
 796:	06 c0       	rjmp	.+12     	; 0x7a4 <vfprintf+0xc4>
 798:	8a e0       	ldi	r24, 0x0A	; 10
 79a:	98 9e       	mul	r9, r24
 79c:	20 0d       	add	r18, r0
 79e:	11 24       	eor	r1, r1
 7a0:	92 2e       	mov	r9, r18
 7a2:	11 c0       	rjmp	.+34     	; 0x7c6 <vfprintf+0xe6>
 7a4:	ea e0       	ldi	r30, 0x0A	; 10
 7a6:	2e 9e       	mul	r2, r30
 7a8:	20 0d       	add	r18, r0
 7aa:	11 24       	eor	r1, r1
 7ac:	22 2e       	mov	r2, r18
 7ae:	f3 2d       	mov	r31, r3
 7b0:	f0 62       	ori	r31, 0x20	; 32
 7b2:	3f 2e       	mov	r3, r31
 7b4:	08 c0       	rjmp	.+16     	; 0x7c6 <vfprintf+0xe6>
 7b6:	8c 36       	cpi	r24, 0x6C	; 108
 7b8:	21 f4       	brne	.+8      	; 0x7c2 <vfprintf+0xe2>
 7ba:	83 2d       	mov	r24, r3
 7bc:	80 68       	ori	r24, 0x80	; 128
 7be:	38 2e       	mov	r3, r24
 7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <vfprintf+0xe6>
 7c2:	88 36       	cpi	r24, 0x68	; 104
 7c4:	41 f4       	brne	.+16     	; 0x7d6 <vfprintf+0xf6>
 7c6:	f7 01       	movw	r30, r14
 7c8:	93 fd       	sbrc	r25, 3
 7ca:	85 91       	lpm	r24, Z+
 7cc:	93 ff       	sbrs	r25, 3
 7ce:	81 91       	ld	r24, Z+
 7d0:	7f 01       	movw	r14, r30
 7d2:	81 11       	cpse	r24, r1
 7d4:	b3 cf       	rjmp	.-154    	; 0x73c <vfprintf+0x5c>
 7d6:	98 2f       	mov	r25, r24
 7d8:	9f 7d       	andi	r25, 0xDF	; 223
 7da:	95 54       	subi	r25, 0x45	; 69
 7dc:	93 30       	cpi	r25, 0x03	; 3
 7de:	28 f4       	brcc	.+10     	; 0x7ea <vfprintf+0x10a>
 7e0:	0c 5f       	subi	r16, 0xFC	; 252
 7e2:	1f 4f       	sbci	r17, 0xFF	; 255
 7e4:	9f e3       	ldi	r25, 0x3F	; 63
 7e6:	99 83       	std	Y+1, r25	; 0x01
 7e8:	0d c0       	rjmp	.+26     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7ea:	83 36       	cpi	r24, 0x63	; 99
 7ec:	31 f0       	breq	.+12     	; 0x7fa <vfprintf+0x11a>
 7ee:	83 37       	cpi	r24, 0x73	; 115
 7f0:	71 f0       	breq	.+28     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7f2:	83 35       	cpi	r24, 0x53	; 83
 7f4:	09 f0       	breq	.+2      	; 0x7f8 <vfprintf+0x118>
 7f6:	59 c0       	rjmp	.+178    	; 0x8aa <__DATA_REGION_LENGTH__+0xaa>
 7f8:	21 c0       	rjmp	.+66     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 7fa:	f8 01       	movw	r30, r16
 7fc:	80 81       	ld	r24, Z
 7fe:	89 83       	std	Y+1, r24	; 0x01
 800:	0e 5f       	subi	r16, 0xFE	; 254
 802:	1f 4f       	sbci	r17, 0xFF	; 255
 804:	88 24       	eor	r8, r8
 806:	83 94       	inc	r8
 808:	91 2c       	mov	r9, r1
 80a:	53 01       	movw	r10, r6
 80c:	13 c0       	rjmp	.+38     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 80e:	28 01       	movw	r4, r16
 810:	f2 e0       	ldi	r31, 0x02	; 2
 812:	4f 0e       	add	r4, r31
 814:	51 1c       	adc	r5, r1
 816:	f8 01       	movw	r30, r16
 818:	a0 80       	ld	r10, Z
 81a:	b1 80       	ldd	r11, Z+1	; 0x01
 81c:	36 fe       	sbrs	r3, 6
 81e:	03 c0       	rjmp	.+6      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 820:	69 2d       	mov	r22, r9
 822:	70 e0       	ldi	r23, 0x00	; 0
 824:	02 c0       	rjmp	.+4      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 826:	6f ef       	ldi	r22, 0xFF	; 255
 828:	7f ef       	ldi	r23, 0xFF	; 255
 82a:	c5 01       	movw	r24, r10
 82c:	0e 94 5c 05 	call	0xab8	; 0xab8 <strnlen>
 830:	4c 01       	movw	r8, r24
 832:	82 01       	movw	r16, r4
 834:	f3 2d       	mov	r31, r3
 836:	ff 77       	andi	r31, 0x7F	; 127
 838:	3f 2e       	mov	r3, r31
 83a:	16 c0       	rjmp	.+44     	; 0x868 <__DATA_REGION_LENGTH__+0x68>
 83c:	28 01       	movw	r4, r16
 83e:	22 e0       	ldi	r18, 0x02	; 2
 840:	42 0e       	add	r4, r18
 842:	51 1c       	adc	r5, r1
 844:	f8 01       	movw	r30, r16
 846:	a0 80       	ld	r10, Z
 848:	b1 80       	ldd	r11, Z+1	; 0x01
 84a:	36 fe       	sbrs	r3, 6
 84c:	03 c0       	rjmp	.+6      	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 84e:	69 2d       	mov	r22, r9
 850:	70 e0       	ldi	r23, 0x00	; 0
 852:	02 c0       	rjmp	.+4      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 854:	6f ef       	ldi	r22, 0xFF	; 255
 856:	7f ef       	ldi	r23, 0xFF	; 255
 858:	c5 01       	movw	r24, r10
 85a:	0e 94 51 05 	call	0xaa2	; 0xaa2 <strnlen_P>
 85e:	4c 01       	movw	r8, r24
 860:	f3 2d       	mov	r31, r3
 862:	f0 68       	ori	r31, 0x80	; 128
 864:	3f 2e       	mov	r3, r31
 866:	82 01       	movw	r16, r4
 868:	33 fc       	sbrc	r3, 3
 86a:	1b c0       	rjmp	.+54     	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
 86c:	82 2d       	mov	r24, r2
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	88 16       	cp	r8, r24
 872:	99 06       	cpc	r9, r25
 874:	b0 f4       	brcc	.+44     	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
 876:	b6 01       	movw	r22, r12
 878:	80 e2       	ldi	r24, 0x20	; 32
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	0e 94 67 05 	call	0xace	; 0xace <fputc>
 880:	2a 94       	dec	r2
 882:	f4 cf       	rjmp	.-24     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
 884:	f5 01       	movw	r30, r10
 886:	37 fc       	sbrc	r3, 7
 888:	85 91       	lpm	r24, Z+
 88a:	37 fe       	sbrs	r3, 7
 88c:	81 91       	ld	r24, Z+
 88e:	5f 01       	movw	r10, r30
 890:	b6 01       	movw	r22, r12
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	0e 94 67 05 	call	0xace	; 0xace <fputc>
 898:	21 10       	cpse	r2, r1
 89a:	2a 94       	dec	r2
 89c:	21 e0       	ldi	r18, 0x01	; 1
 89e:	82 1a       	sub	r8, r18
 8a0:	91 08       	sbc	r9, r1
 8a2:	81 14       	cp	r8, r1
 8a4:	91 04       	cpc	r9, r1
 8a6:	71 f7       	brne	.-36     	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 8a8:	e8 c0       	rjmp	.+464    	; 0xa7a <__stack+0x17b>
 8aa:	84 36       	cpi	r24, 0x64	; 100
 8ac:	11 f0       	breq	.+4      	; 0x8b2 <__DATA_REGION_LENGTH__+0xb2>
 8ae:	89 36       	cpi	r24, 0x69	; 105
 8b0:	41 f5       	brne	.+80     	; 0x902 <__stack+0x3>
 8b2:	f8 01       	movw	r30, r16
 8b4:	37 fe       	sbrs	r3, 7
 8b6:	07 c0       	rjmp	.+14     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
 8b8:	60 81       	ld	r22, Z
 8ba:	71 81       	ldd	r23, Z+1	; 0x01
 8bc:	82 81       	ldd	r24, Z+2	; 0x02
 8be:	93 81       	ldd	r25, Z+3	; 0x03
 8c0:	0c 5f       	subi	r16, 0xFC	; 252
 8c2:	1f 4f       	sbci	r17, 0xFF	; 255
 8c4:	08 c0       	rjmp	.+16     	; 0x8d6 <__DATA_REGION_LENGTH__+0xd6>
 8c6:	60 81       	ld	r22, Z
 8c8:	71 81       	ldd	r23, Z+1	; 0x01
 8ca:	07 2e       	mov	r0, r23
 8cc:	00 0c       	add	r0, r0
 8ce:	88 0b       	sbc	r24, r24
 8d0:	99 0b       	sbc	r25, r25
 8d2:	0e 5f       	subi	r16, 0xFE	; 254
 8d4:	1f 4f       	sbci	r17, 0xFF	; 255
 8d6:	f3 2d       	mov	r31, r3
 8d8:	ff 76       	andi	r31, 0x6F	; 111
 8da:	3f 2e       	mov	r3, r31
 8dc:	97 ff       	sbrs	r25, 7
 8de:	09 c0       	rjmp	.+18     	; 0x8f2 <__DATA_REGION_LENGTH__+0xf2>
 8e0:	90 95       	com	r25
 8e2:	80 95       	com	r24
 8e4:	70 95       	com	r23
 8e6:	61 95       	neg	r22
 8e8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ea:	8f 4f       	sbci	r24, 0xFF	; 255
 8ec:	9f 4f       	sbci	r25, 0xFF	; 255
 8ee:	f0 68       	ori	r31, 0x80	; 128
 8f0:	3f 2e       	mov	r3, r31
 8f2:	2a e0       	ldi	r18, 0x0A	; 10
 8f4:	30 e0       	ldi	r19, 0x00	; 0
 8f6:	a3 01       	movw	r20, r6
 8f8:	0e 94 a3 05 	call	0xb46	; 0xb46 <__ultoa_invert>
 8fc:	88 2e       	mov	r8, r24
 8fe:	86 18       	sub	r8, r6
 900:	45 c0       	rjmp	.+138    	; 0x98c <__stack+0x8d>
 902:	85 37       	cpi	r24, 0x75	; 117
 904:	31 f4       	brne	.+12     	; 0x912 <__stack+0x13>
 906:	23 2d       	mov	r18, r3
 908:	2f 7e       	andi	r18, 0xEF	; 239
 90a:	b2 2e       	mov	r11, r18
 90c:	2a e0       	ldi	r18, 0x0A	; 10
 90e:	30 e0       	ldi	r19, 0x00	; 0
 910:	25 c0       	rjmp	.+74     	; 0x95c <__stack+0x5d>
 912:	93 2d       	mov	r25, r3
 914:	99 7f       	andi	r25, 0xF9	; 249
 916:	b9 2e       	mov	r11, r25
 918:	8f 36       	cpi	r24, 0x6F	; 111
 91a:	c1 f0       	breq	.+48     	; 0x94c <__stack+0x4d>
 91c:	18 f4       	brcc	.+6      	; 0x924 <__stack+0x25>
 91e:	88 35       	cpi	r24, 0x58	; 88
 920:	79 f0       	breq	.+30     	; 0x940 <__stack+0x41>
 922:	b5 c0       	rjmp	.+362    	; 0xa8e <__stack+0x18f>
 924:	80 37       	cpi	r24, 0x70	; 112
 926:	19 f0       	breq	.+6      	; 0x92e <__stack+0x2f>
 928:	88 37       	cpi	r24, 0x78	; 120
 92a:	21 f0       	breq	.+8      	; 0x934 <__stack+0x35>
 92c:	b0 c0       	rjmp	.+352    	; 0xa8e <__stack+0x18f>
 92e:	e9 2f       	mov	r30, r25
 930:	e0 61       	ori	r30, 0x10	; 16
 932:	be 2e       	mov	r11, r30
 934:	b4 fe       	sbrs	r11, 4
 936:	0d c0       	rjmp	.+26     	; 0x952 <__stack+0x53>
 938:	fb 2d       	mov	r31, r11
 93a:	f4 60       	ori	r31, 0x04	; 4
 93c:	bf 2e       	mov	r11, r31
 93e:	09 c0       	rjmp	.+18     	; 0x952 <__stack+0x53>
 940:	34 fe       	sbrs	r3, 4
 942:	0a c0       	rjmp	.+20     	; 0x958 <__stack+0x59>
 944:	29 2f       	mov	r18, r25
 946:	26 60       	ori	r18, 0x06	; 6
 948:	b2 2e       	mov	r11, r18
 94a:	06 c0       	rjmp	.+12     	; 0x958 <__stack+0x59>
 94c:	28 e0       	ldi	r18, 0x08	; 8
 94e:	30 e0       	ldi	r19, 0x00	; 0
 950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0x5d>
 952:	20 e1       	ldi	r18, 0x10	; 16
 954:	30 e0       	ldi	r19, 0x00	; 0
 956:	02 c0       	rjmp	.+4      	; 0x95c <__stack+0x5d>
 958:	20 e1       	ldi	r18, 0x10	; 16
 95a:	32 e0       	ldi	r19, 0x02	; 2
 95c:	f8 01       	movw	r30, r16
 95e:	b7 fe       	sbrs	r11, 7
 960:	07 c0       	rjmp	.+14     	; 0x970 <__stack+0x71>
 962:	60 81       	ld	r22, Z
 964:	71 81       	ldd	r23, Z+1	; 0x01
 966:	82 81       	ldd	r24, Z+2	; 0x02
 968:	93 81       	ldd	r25, Z+3	; 0x03
 96a:	0c 5f       	subi	r16, 0xFC	; 252
 96c:	1f 4f       	sbci	r17, 0xFF	; 255
 96e:	06 c0       	rjmp	.+12     	; 0x97c <__stack+0x7d>
 970:	60 81       	ld	r22, Z
 972:	71 81       	ldd	r23, Z+1	; 0x01
 974:	80 e0       	ldi	r24, 0x00	; 0
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	0e 5f       	subi	r16, 0xFE	; 254
 97a:	1f 4f       	sbci	r17, 0xFF	; 255
 97c:	a3 01       	movw	r20, r6
 97e:	0e 94 a3 05 	call	0xb46	; 0xb46 <__ultoa_invert>
 982:	88 2e       	mov	r8, r24
 984:	86 18       	sub	r8, r6
 986:	fb 2d       	mov	r31, r11
 988:	ff 77       	andi	r31, 0x7F	; 127
 98a:	3f 2e       	mov	r3, r31
 98c:	36 fe       	sbrs	r3, 6
 98e:	0d c0       	rjmp	.+26     	; 0x9aa <__stack+0xab>
 990:	23 2d       	mov	r18, r3
 992:	2e 7f       	andi	r18, 0xFE	; 254
 994:	a2 2e       	mov	r10, r18
 996:	89 14       	cp	r8, r9
 998:	58 f4       	brcc	.+22     	; 0x9b0 <__stack+0xb1>
 99a:	34 fe       	sbrs	r3, 4
 99c:	0b c0       	rjmp	.+22     	; 0x9b4 <__stack+0xb5>
 99e:	32 fc       	sbrc	r3, 2
 9a0:	09 c0       	rjmp	.+18     	; 0x9b4 <__stack+0xb5>
 9a2:	83 2d       	mov	r24, r3
 9a4:	8e 7e       	andi	r24, 0xEE	; 238
 9a6:	a8 2e       	mov	r10, r24
 9a8:	05 c0       	rjmp	.+10     	; 0x9b4 <__stack+0xb5>
 9aa:	b8 2c       	mov	r11, r8
 9ac:	a3 2c       	mov	r10, r3
 9ae:	03 c0       	rjmp	.+6      	; 0x9b6 <__stack+0xb7>
 9b0:	b8 2c       	mov	r11, r8
 9b2:	01 c0       	rjmp	.+2      	; 0x9b6 <__stack+0xb7>
 9b4:	b9 2c       	mov	r11, r9
 9b6:	a4 fe       	sbrs	r10, 4
 9b8:	0f c0       	rjmp	.+30     	; 0x9d8 <__stack+0xd9>
 9ba:	fe 01       	movw	r30, r28
 9bc:	e8 0d       	add	r30, r8
 9be:	f1 1d       	adc	r31, r1
 9c0:	80 81       	ld	r24, Z
 9c2:	80 33       	cpi	r24, 0x30	; 48
 9c4:	21 f4       	brne	.+8      	; 0x9ce <__stack+0xcf>
 9c6:	9a 2d       	mov	r25, r10
 9c8:	99 7e       	andi	r25, 0xE9	; 233
 9ca:	a9 2e       	mov	r10, r25
 9cc:	09 c0       	rjmp	.+18     	; 0x9e0 <__stack+0xe1>
 9ce:	a2 fe       	sbrs	r10, 2
 9d0:	06 c0       	rjmp	.+12     	; 0x9de <__stack+0xdf>
 9d2:	b3 94       	inc	r11
 9d4:	b3 94       	inc	r11
 9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <__stack+0xe1>
 9d8:	8a 2d       	mov	r24, r10
 9da:	86 78       	andi	r24, 0x86	; 134
 9dc:	09 f0       	breq	.+2      	; 0x9e0 <__stack+0xe1>
 9de:	b3 94       	inc	r11
 9e0:	a3 fc       	sbrc	r10, 3
 9e2:	11 c0       	rjmp	.+34     	; 0xa06 <__stack+0x107>
 9e4:	a0 fe       	sbrs	r10, 0
 9e6:	06 c0       	rjmp	.+12     	; 0x9f4 <__stack+0xf5>
 9e8:	b2 14       	cp	r11, r2
 9ea:	88 f4       	brcc	.+34     	; 0xa0e <__stack+0x10f>
 9ec:	28 0c       	add	r2, r8
 9ee:	92 2c       	mov	r9, r2
 9f0:	9b 18       	sub	r9, r11
 9f2:	0e c0       	rjmp	.+28     	; 0xa10 <__stack+0x111>
 9f4:	b2 14       	cp	r11, r2
 9f6:	60 f4       	brcc	.+24     	; 0xa10 <__stack+0x111>
 9f8:	b6 01       	movw	r22, r12
 9fa:	80 e2       	ldi	r24, 0x20	; 32
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	0e 94 67 05 	call	0xace	; 0xace <fputc>
 a02:	b3 94       	inc	r11
 a04:	f7 cf       	rjmp	.-18     	; 0x9f4 <__stack+0xf5>
 a06:	b2 14       	cp	r11, r2
 a08:	18 f4       	brcc	.+6      	; 0xa10 <__stack+0x111>
 a0a:	2b 18       	sub	r2, r11
 a0c:	02 c0       	rjmp	.+4      	; 0xa12 <__stack+0x113>
 a0e:	98 2c       	mov	r9, r8
 a10:	21 2c       	mov	r2, r1
 a12:	a4 fe       	sbrs	r10, 4
 a14:	10 c0       	rjmp	.+32     	; 0xa36 <__stack+0x137>
 a16:	b6 01       	movw	r22, r12
 a18:	80 e3       	ldi	r24, 0x30	; 48
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	0e 94 67 05 	call	0xace	; 0xace <fputc>
 a20:	a2 fe       	sbrs	r10, 2
 a22:	17 c0       	rjmp	.+46     	; 0xa52 <__stack+0x153>
 a24:	a1 fc       	sbrc	r10, 1
 a26:	03 c0       	rjmp	.+6      	; 0xa2e <__stack+0x12f>
 a28:	88 e7       	ldi	r24, 0x78	; 120
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	02 c0       	rjmp	.+4      	; 0xa32 <__stack+0x133>
 a2e:	88 e5       	ldi	r24, 0x58	; 88
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	b6 01       	movw	r22, r12
 a34:	0c c0       	rjmp	.+24     	; 0xa4e <__stack+0x14f>
 a36:	8a 2d       	mov	r24, r10
 a38:	86 78       	andi	r24, 0x86	; 134
 a3a:	59 f0       	breq	.+22     	; 0xa52 <__stack+0x153>
 a3c:	a1 fe       	sbrs	r10, 1
 a3e:	02 c0       	rjmp	.+4      	; 0xa44 <__stack+0x145>
 a40:	8b e2       	ldi	r24, 0x2B	; 43
 a42:	01 c0       	rjmp	.+2      	; 0xa46 <__stack+0x147>
 a44:	80 e2       	ldi	r24, 0x20	; 32
 a46:	a7 fc       	sbrc	r10, 7
 a48:	8d e2       	ldi	r24, 0x2D	; 45
 a4a:	b6 01       	movw	r22, r12
 a4c:	90 e0       	ldi	r25, 0x00	; 0
 a4e:	0e 94 67 05 	call	0xace	; 0xace <fputc>
 a52:	89 14       	cp	r8, r9
 a54:	38 f4       	brcc	.+14     	; 0xa64 <__stack+0x165>
 a56:	b6 01       	movw	r22, r12
 a58:	80 e3       	ldi	r24, 0x30	; 48
 a5a:	90 e0       	ldi	r25, 0x00	; 0
 a5c:	0e 94 67 05 	call	0xace	; 0xace <fputc>
 a60:	9a 94       	dec	r9
 a62:	f7 cf       	rjmp	.-18     	; 0xa52 <__stack+0x153>
 a64:	8a 94       	dec	r8
 a66:	f3 01       	movw	r30, r6
 a68:	e8 0d       	add	r30, r8
 a6a:	f1 1d       	adc	r31, r1
 a6c:	80 81       	ld	r24, Z
 a6e:	b6 01       	movw	r22, r12
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	0e 94 67 05 	call	0xace	; 0xace <fputc>
 a76:	81 10       	cpse	r8, r1
 a78:	f5 cf       	rjmp	.-22     	; 0xa64 <__stack+0x165>
 a7a:	22 20       	and	r2, r2
 a7c:	09 f4       	brne	.+2      	; 0xa80 <__stack+0x181>
 a7e:	42 ce       	rjmp	.-892    	; 0x704 <vfprintf+0x24>
 a80:	b6 01       	movw	r22, r12
 a82:	80 e2       	ldi	r24, 0x20	; 32
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	0e 94 67 05 	call	0xace	; 0xace <fputc>
 a8a:	2a 94       	dec	r2
 a8c:	f6 cf       	rjmp	.-20     	; 0xa7a <__stack+0x17b>
 a8e:	f6 01       	movw	r30, r12
 a90:	86 81       	ldd	r24, Z+6	; 0x06
 a92:	97 81       	ldd	r25, Z+7	; 0x07
 a94:	02 c0       	rjmp	.+4      	; 0xa9a <__stack+0x19b>
 a96:	8f ef       	ldi	r24, 0xFF	; 255
 a98:	9f ef       	ldi	r25, 0xFF	; 255
 a9a:	2b 96       	adiw	r28, 0x0b	; 11
 a9c:	e2 e1       	ldi	r30, 0x12	; 18
 a9e:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__epilogue_restores__>

00000aa2 <strnlen_P>:
 aa2:	fc 01       	movw	r30, r24
 aa4:	05 90       	lpm	r0, Z+
 aa6:	61 50       	subi	r22, 0x01	; 1
 aa8:	70 40       	sbci	r23, 0x00	; 0
 aaa:	01 10       	cpse	r0, r1
 aac:	d8 f7       	brcc	.-10     	; 0xaa4 <strnlen_P+0x2>
 aae:	80 95       	com	r24
 ab0:	90 95       	com	r25
 ab2:	8e 0f       	add	r24, r30
 ab4:	9f 1f       	adc	r25, r31
 ab6:	08 95       	ret

00000ab8 <strnlen>:
 ab8:	fc 01       	movw	r30, r24
 aba:	61 50       	subi	r22, 0x01	; 1
 abc:	70 40       	sbci	r23, 0x00	; 0
 abe:	01 90       	ld	r0, Z+
 ac0:	01 10       	cpse	r0, r1
 ac2:	d8 f7       	brcc	.-10     	; 0xaba <strnlen+0x2>
 ac4:	80 95       	com	r24
 ac6:	90 95       	com	r25
 ac8:	8e 0f       	add	r24, r30
 aca:	9f 1f       	adc	r25, r31
 acc:	08 95       	ret

00000ace <fputc>:
 ace:	0f 93       	push	r16
 ad0:	1f 93       	push	r17
 ad2:	cf 93       	push	r28
 ad4:	df 93       	push	r29
 ad6:	fb 01       	movw	r30, r22
 ad8:	23 81       	ldd	r18, Z+3	; 0x03
 ada:	21 fd       	sbrc	r18, 1
 adc:	03 c0       	rjmp	.+6      	; 0xae4 <fputc+0x16>
 ade:	8f ef       	ldi	r24, 0xFF	; 255
 ae0:	9f ef       	ldi	r25, 0xFF	; 255
 ae2:	2c c0       	rjmp	.+88     	; 0xb3c <fputc+0x6e>
 ae4:	22 ff       	sbrs	r18, 2
 ae6:	16 c0       	rjmp	.+44     	; 0xb14 <fputc+0x46>
 ae8:	46 81       	ldd	r20, Z+6	; 0x06
 aea:	57 81       	ldd	r21, Z+7	; 0x07
 aec:	24 81       	ldd	r18, Z+4	; 0x04
 aee:	35 81       	ldd	r19, Z+5	; 0x05
 af0:	42 17       	cp	r20, r18
 af2:	53 07       	cpc	r21, r19
 af4:	44 f4       	brge	.+16     	; 0xb06 <fputc+0x38>
 af6:	a0 81       	ld	r26, Z
 af8:	b1 81       	ldd	r27, Z+1	; 0x01
 afa:	9d 01       	movw	r18, r26
 afc:	2f 5f       	subi	r18, 0xFF	; 255
 afe:	3f 4f       	sbci	r19, 0xFF	; 255
 b00:	31 83       	std	Z+1, r19	; 0x01
 b02:	20 83       	st	Z, r18
 b04:	8c 93       	st	X, r24
 b06:	26 81       	ldd	r18, Z+6	; 0x06
 b08:	37 81       	ldd	r19, Z+7	; 0x07
 b0a:	2f 5f       	subi	r18, 0xFF	; 255
 b0c:	3f 4f       	sbci	r19, 0xFF	; 255
 b0e:	37 83       	std	Z+7, r19	; 0x07
 b10:	26 83       	std	Z+6, r18	; 0x06
 b12:	14 c0       	rjmp	.+40     	; 0xb3c <fputc+0x6e>
 b14:	8b 01       	movw	r16, r22
 b16:	ec 01       	movw	r28, r24
 b18:	fb 01       	movw	r30, r22
 b1a:	00 84       	ldd	r0, Z+8	; 0x08
 b1c:	f1 85       	ldd	r31, Z+9	; 0x09
 b1e:	e0 2d       	mov	r30, r0
 b20:	09 95       	icall
 b22:	89 2b       	or	r24, r25
 b24:	e1 f6       	brne	.-72     	; 0xade <fputc+0x10>
 b26:	d8 01       	movw	r26, r16
 b28:	16 96       	adiw	r26, 0x06	; 6
 b2a:	8d 91       	ld	r24, X+
 b2c:	9c 91       	ld	r25, X
 b2e:	17 97       	sbiw	r26, 0x07	; 7
 b30:	01 96       	adiw	r24, 0x01	; 1
 b32:	17 96       	adiw	r26, 0x07	; 7
 b34:	9c 93       	st	X, r25
 b36:	8e 93       	st	-X, r24
 b38:	16 97       	sbiw	r26, 0x06	; 6
 b3a:	ce 01       	movw	r24, r28
 b3c:	df 91       	pop	r29
 b3e:	cf 91       	pop	r28
 b40:	1f 91       	pop	r17
 b42:	0f 91       	pop	r16
 b44:	08 95       	ret

00000b46 <__ultoa_invert>:
 b46:	fa 01       	movw	r30, r20
 b48:	aa 27       	eor	r26, r26
 b4a:	28 30       	cpi	r18, 0x08	; 8
 b4c:	51 f1       	breq	.+84     	; 0xba2 <__ultoa_invert+0x5c>
 b4e:	20 31       	cpi	r18, 0x10	; 16
 b50:	81 f1       	breq	.+96     	; 0xbb2 <__ultoa_invert+0x6c>
 b52:	e8 94       	clt
 b54:	6f 93       	push	r22
 b56:	6e 7f       	andi	r22, 0xFE	; 254
 b58:	6e 5f       	subi	r22, 0xFE	; 254
 b5a:	7f 4f       	sbci	r23, 0xFF	; 255
 b5c:	8f 4f       	sbci	r24, 0xFF	; 255
 b5e:	9f 4f       	sbci	r25, 0xFF	; 255
 b60:	af 4f       	sbci	r26, 0xFF	; 255
 b62:	b1 e0       	ldi	r27, 0x01	; 1
 b64:	3e d0       	rcall	.+124    	; 0xbe2 <__ultoa_invert+0x9c>
 b66:	b4 e0       	ldi	r27, 0x04	; 4
 b68:	3c d0       	rcall	.+120    	; 0xbe2 <__ultoa_invert+0x9c>
 b6a:	67 0f       	add	r22, r23
 b6c:	78 1f       	adc	r23, r24
 b6e:	89 1f       	adc	r24, r25
 b70:	9a 1f       	adc	r25, r26
 b72:	a1 1d       	adc	r26, r1
 b74:	68 0f       	add	r22, r24
 b76:	79 1f       	adc	r23, r25
 b78:	8a 1f       	adc	r24, r26
 b7a:	91 1d       	adc	r25, r1
 b7c:	a1 1d       	adc	r26, r1
 b7e:	6a 0f       	add	r22, r26
 b80:	71 1d       	adc	r23, r1
 b82:	81 1d       	adc	r24, r1
 b84:	91 1d       	adc	r25, r1
 b86:	a1 1d       	adc	r26, r1
 b88:	20 d0       	rcall	.+64     	; 0xbca <__ultoa_invert+0x84>
 b8a:	09 f4       	brne	.+2      	; 0xb8e <__ultoa_invert+0x48>
 b8c:	68 94       	set
 b8e:	3f 91       	pop	r19
 b90:	2a e0       	ldi	r18, 0x0A	; 10
 b92:	26 9f       	mul	r18, r22
 b94:	11 24       	eor	r1, r1
 b96:	30 19       	sub	r19, r0
 b98:	30 5d       	subi	r19, 0xD0	; 208
 b9a:	31 93       	st	Z+, r19
 b9c:	de f6       	brtc	.-74     	; 0xb54 <__ultoa_invert+0xe>
 b9e:	cf 01       	movw	r24, r30
 ba0:	08 95       	ret
 ba2:	46 2f       	mov	r20, r22
 ba4:	47 70       	andi	r20, 0x07	; 7
 ba6:	40 5d       	subi	r20, 0xD0	; 208
 ba8:	41 93       	st	Z+, r20
 baa:	b3 e0       	ldi	r27, 0x03	; 3
 bac:	0f d0       	rcall	.+30     	; 0xbcc <__ultoa_invert+0x86>
 bae:	c9 f7       	brne	.-14     	; 0xba2 <__ultoa_invert+0x5c>
 bb0:	f6 cf       	rjmp	.-20     	; 0xb9e <__ultoa_invert+0x58>
 bb2:	46 2f       	mov	r20, r22
 bb4:	4f 70       	andi	r20, 0x0F	; 15
 bb6:	40 5d       	subi	r20, 0xD0	; 208
 bb8:	4a 33       	cpi	r20, 0x3A	; 58
 bba:	18 f0       	brcs	.+6      	; 0xbc2 <__ultoa_invert+0x7c>
 bbc:	49 5d       	subi	r20, 0xD9	; 217
 bbe:	31 fd       	sbrc	r19, 1
 bc0:	40 52       	subi	r20, 0x20	; 32
 bc2:	41 93       	st	Z+, r20
 bc4:	02 d0       	rcall	.+4      	; 0xbca <__ultoa_invert+0x84>
 bc6:	a9 f7       	brne	.-22     	; 0xbb2 <__ultoa_invert+0x6c>
 bc8:	ea cf       	rjmp	.-44     	; 0xb9e <__ultoa_invert+0x58>
 bca:	b4 e0       	ldi	r27, 0x04	; 4
 bcc:	a6 95       	lsr	r26
 bce:	97 95       	ror	r25
 bd0:	87 95       	ror	r24
 bd2:	77 95       	ror	r23
 bd4:	67 95       	ror	r22
 bd6:	ba 95       	dec	r27
 bd8:	c9 f7       	brne	.-14     	; 0xbcc <__ultoa_invert+0x86>
 bda:	00 97       	sbiw	r24, 0x00	; 0
 bdc:	61 05       	cpc	r22, r1
 bde:	71 05       	cpc	r23, r1
 be0:	08 95       	ret
 be2:	9b 01       	movw	r18, r22
 be4:	ac 01       	movw	r20, r24
 be6:	0a 2e       	mov	r0, r26
 be8:	06 94       	lsr	r0
 bea:	57 95       	ror	r21
 bec:	47 95       	ror	r20
 bee:	37 95       	ror	r19
 bf0:	27 95       	ror	r18
 bf2:	ba 95       	dec	r27
 bf4:	c9 f7       	brne	.-14     	; 0xbe8 <__ultoa_invert+0xa2>
 bf6:	62 0f       	add	r22, r18
 bf8:	73 1f       	adc	r23, r19
 bfa:	84 1f       	adc	r24, r20
 bfc:	95 1f       	adc	r25, r21
 bfe:	a0 1d       	adc	r26, r0
 c00:	08 95       	ret

00000c02 <__prologue_saves__>:
 c02:	2f 92       	push	r2
 c04:	3f 92       	push	r3
 c06:	4f 92       	push	r4
 c08:	5f 92       	push	r5
 c0a:	6f 92       	push	r6
 c0c:	7f 92       	push	r7
 c0e:	8f 92       	push	r8
 c10:	9f 92       	push	r9
 c12:	af 92       	push	r10
 c14:	bf 92       	push	r11
 c16:	cf 92       	push	r12
 c18:	df 92       	push	r13
 c1a:	ef 92       	push	r14
 c1c:	ff 92       	push	r15
 c1e:	0f 93       	push	r16
 c20:	1f 93       	push	r17
 c22:	cf 93       	push	r28
 c24:	df 93       	push	r29
 c26:	cd b7       	in	r28, 0x3d	; 61
 c28:	de b7       	in	r29, 0x3e	; 62
 c2a:	ca 1b       	sub	r28, r26
 c2c:	db 0b       	sbc	r29, r27
 c2e:	0f b6       	in	r0, 0x3f	; 63
 c30:	f8 94       	cli
 c32:	de bf       	out	0x3e, r29	; 62
 c34:	0f be       	out	0x3f, r0	; 63
 c36:	cd bf       	out	0x3d, r28	; 61
 c38:	09 94       	ijmp

00000c3a <__epilogue_restores__>:
 c3a:	2a 88       	ldd	r2, Y+18	; 0x12
 c3c:	39 88       	ldd	r3, Y+17	; 0x11
 c3e:	48 88       	ldd	r4, Y+16	; 0x10
 c40:	5f 84       	ldd	r5, Y+15	; 0x0f
 c42:	6e 84       	ldd	r6, Y+14	; 0x0e
 c44:	7d 84       	ldd	r7, Y+13	; 0x0d
 c46:	8c 84       	ldd	r8, Y+12	; 0x0c
 c48:	9b 84       	ldd	r9, Y+11	; 0x0b
 c4a:	aa 84       	ldd	r10, Y+10	; 0x0a
 c4c:	b9 84       	ldd	r11, Y+9	; 0x09
 c4e:	c8 84       	ldd	r12, Y+8	; 0x08
 c50:	df 80       	ldd	r13, Y+7	; 0x07
 c52:	ee 80       	ldd	r14, Y+6	; 0x06
 c54:	fd 80       	ldd	r15, Y+5	; 0x05
 c56:	0c 81       	ldd	r16, Y+4	; 0x04
 c58:	1b 81       	ldd	r17, Y+3	; 0x03
 c5a:	aa 81       	ldd	r26, Y+2	; 0x02
 c5c:	b9 81       	ldd	r27, Y+1	; 0x01
 c5e:	ce 0f       	add	r28, r30
 c60:	d1 1d       	adc	r29, r1
 c62:	0f b6       	in	r0, 0x3f	; 63
 c64:	f8 94       	cli
 c66:	de bf       	out	0x3e, r29	; 62
 c68:	0f be       	out	0x3f, r0	; 63
 c6a:	cd bf       	out	0x3d, r28	; 61
 c6c:	ed 01       	movw	r28, r26
 c6e:	08 95       	ret

00000c70 <_exit>:
 c70:	f8 94       	cli

00000c72 <__stop_program>:
 c72:	ff cf       	rjmp	.-2      	; 0xc72 <__stop_program>
