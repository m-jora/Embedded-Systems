
mp3_app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000244  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000124c  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cd6  00000000  00000000  00001604  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000060a  00000000  00000000  000022da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000fc  00000000  00000000  000028e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000645  00000000  00000000  000029e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002ad  00000000  00000000  00003025  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000032d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  10:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  14:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  18:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  1c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  20:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  24:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  28:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  2c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  30:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  34:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  38:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  3c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  40:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  44:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  48:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  4c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  50:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  54:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  58:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  5c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  60:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  68:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  6c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  70:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  74:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  78:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  7c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  80:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  84:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  88:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  8c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  90:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  94:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  98:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  9c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  ac:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  bc:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61
  d8:	0e 94 7a 00 	call	0xf4	; 0xf4 <main>
  dc:	0c 94 20 01 	jmp	0x240	; 0x240 <_exit>

000000e0 <__bad_interrupt>:
  e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e4 <GPIO_Output_Init>:
#include "gpio.h"

void GPIO_Output_Init(volatile GPIO_t* base_addr,uint8_t pin_mask){
	(base_addr -> GPIO_DDR) |= pin_mask;
  e4:	fc 01       	movw	r30, r24
  e6:	21 81       	ldd	r18, Z+1	; 0x01
  e8:	62 2b       	or	r22, r18
  ea:	61 83       	std	Z+1, r22	; 0x01
  ec:	08 95       	ret

000000ee <LEDS_Init>:
#include "LEDS.h"
#include "gpio.h"

void LEDS_Init(volatile GPIO_t * port_addr, uint8_t LED_pin)
{
    GPIO_Output_Init(port_addr, LED_pin);
  ee:	0e 94 72 00 	call	0xe4	; 0xe4 <GPIO_Output_Init>
  f2:	08 95       	ret

000000f4 <main>:



int main(void)
{
	LEDS_Init(LED0_port, LED0_pin);
  f4:	60 e8       	ldi	r22, 0x80	; 128
  f6:	86 e2       	ldi	r24, 0x26	; 38
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 77 00 	call	0xee	; 0xee <LEDS_Init>
	LEDS_Init(LED1_port, LED1_pin);
  fe:	68 e0       	ldi	r22, 0x08	; 8
 100:	83 e2       	ldi	r24, 0x23	; 35
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 77 00 	call	0xee	; 0xee <LEDS_Init>
	LEDS_Init(LED2_port, LED2_pin);
 108:	60 e1       	ldi	r22, 0x10	; 16
 10a:	8c e2       	ldi	r24, 0x2C	; 44
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 77 00 	call	0xee	; 0xee <LEDS_Init>
	LEDS_Init(LED3_port, LED3_pin);
 112:	60 e8       	ldi	r22, 0x80	; 128
 114:	80 e2       	ldi	r24, 0x20	; 32
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 77 00 	call	0xee	; 0xee <LEDS_Init>
	
	UART_Init(UART1, baud_rate);
 11c:	40 e8       	ldi	r20, 0x80	; 128
 11e:	55 e2       	ldi	r21, 0x25	; 37
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	88 ec       	ldi	r24, 0xC8	; 200
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 bb 00 	call	0x176	; 0x176 <UART_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	2f ef       	ldi	r18, 0xFF	; 255
 12e:	31 ee       	ldi	r19, 0xE1	; 225
 130:	84 e0       	ldi	r24, 0x04	; 4
 132:	21 50       	subi	r18, 0x01	; 1
 134:	30 40       	sbci	r19, 0x00	; 0
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <main+0x3e>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0x48>
 13c:	00 00       	nop
		LEDS_Off(LED2_port, LED2_pin);
		LEDS_Off(LED3_port, LED3_pin);
		_delay_ms(1000);	
		*/
		_delay_ms(100);
		uint8_t value = UART_Receive(UART1);
 13e:	88 ec       	ldi	r24, 0xC8	; 200
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <UART_Receive>
 146:	9f ef       	ldi	r25, 0xFF	; 255
 148:	21 ee       	ldi	r18, 0xE1	; 225
 14a:	34 e0       	ldi	r19, 0x04	; 4
 14c:	91 50       	subi	r25, 0x01	; 1
 14e:	20 40       	sbci	r18, 0x00	; 0
 150:	30 40       	sbci	r19, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <main+0x58>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x62>
 156:	00 00       	nop
		_delay_ms(100);
		UART_Transmit(UART1, value);
 158:	68 2f       	mov	r22, r24
 15a:	88 ec       	ldi	r24, 0xC8	; 200
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <UART_Transmit>
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	91 ee       	ldi	r25, 0xE1	; 225
 166:	24 e0       	ldi	r18, 0x04	; 4
 168:	81 50       	subi	r24, 0x01	; 1
 16a:	90 40       	sbci	r25, 0x00	; 0
 16c:	20 40       	sbci	r18, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <main+0x74>
 170:	00 c0       	rjmp	.+0      	; 0x172 <main+0x7e>
 172:	00 00       	nop
 174:	db cf       	rjmp	.-74     	; 0x12c <main+0x38>

00000176 <UART_Init>:
#include "uart.h"

void UART_Init(volatile UART_t * UART_addr, uint32_t Baud_Rate){
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	ec 01       	movw	r28, r24
	uint16_t UBRR_value = (uint16_t)((((F_CPU / OSC_DIV) + (4UL * (2-U2X) * Baud_Rate)) / (8UL * (2 - U2X) * Baud_Rate)) -1);
 17c:	db 01       	movw	r26, r22
 17e:	ca 01       	movw	r24, r20
 180:	80 58       	subi	r24, 0x80	; 128
 182:	9b 47       	sbci	r25, 0x7B	; 123
 184:	a1 4e       	sbci	r26, 0xE1	; 225
 186:	bf 4f       	sbci	r27, 0xFF	; 255
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	aa 1f       	adc	r26, r26
 18e:	bb 1f       	adc	r27, r27
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	aa 1f       	adc	r26, r26
 196:	bb 1f       	adc	r27, r27
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	aa 1f       	adc	r26, r26
 19e:	bb 1f       	adc	r27, r27
 1a0:	44 0f       	add	r20, r20
 1a2:	55 1f       	adc	r21, r21
 1a4:	66 1f       	adc	r22, r22
 1a6:	77 1f       	adc	r23, r23
 1a8:	44 0f       	add	r20, r20
 1aa:	55 1f       	adc	r21, r21
 1ac:	66 1f       	adc	r22, r22
 1ae:	77 1f       	adc	r23, r23
 1b0:	9a 01       	movw	r18, r20
 1b2:	ab 01       	movw	r20, r22
 1b4:	22 0f       	add	r18, r18
 1b6:	33 1f       	adc	r19, r19
 1b8:	44 1f       	adc	r20, r20
 1ba:	55 1f       	adc	r21, r21
 1bc:	22 0f       	add	r18, r18
 1be:	33 1f       	adc	r19, r19
 1c0:	44 1f       	adc	r20, r20
 1c2:	55 1f       	adc	r21, r21
 1c4:	bc 01       	movw	r22, r24
 1c6:	cd 01       	movw	r24, r26
 1c8:	0e 94 fe 00 	call	0x1fc	; 0x1fc <__udivmodsi4>
 1cc:	21 50       	subi	r18, 0x01	; 1
 1ce:	31 09       	sbc	r19, r1
	
	(UART_addr->UART_UBRRH) = UBRR_value/256;
 1d0:	3d 83       	std	Y+5, r19	; 0x05
	(UART_addr->UART_UBRRL) = UBRR_value%256;
 1d2:	2c 83       	std	Y+4, r18	; 0x04
	
	(UART_addr->UART_UCSRA) = TXC|MPCM|U2XA;
 1d4:	18 82       	st	Y, r1
	(UART_addr->UART_UCSRB) = (Interrupt_Disabled|IO_Enable|One_Stop_Bit_2|No_Ninth_Bit);
 1d6:	88 e1       	ldi	r24, 0x18	; 24
 1d8:	89 83       	std	Y+1, r24	; 0x01
	(UART_addr->UART_UCSRC) = (Async_Mode|No_Parity|One_Stop_Bit|Eight_Bit_Data);
 1da:	86 e0       	ldi	r24, 0x06	; 6
 1dc:	8a 83       	std	Y+2, r24	; 0x02
}
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <UART_Transmit>:

void UART_Transmit(volatile UART_t * UART_addr, int8_t send_value){
 1e4:	fc 01       	movw	r30, r24
	do{
		;
	}while(!(UDRE && UART_addr->UART_UCSRA));
 1e6:	90 81       	ld	r25, Z
 1e8:	99 23       	and	r25, r25
 1ea:	e9 f3       	breq	.-6      	; 0x1e6 <UART_Transmit+0x2>
	UART_addr->UART_UDR = send_value;
 1ec:	66 83       	std	Z+6, r22	; 0x06
 1ee:	08 95       	ret

000001f0 <UART_Receive>:
}

uint8_t UART_Receive(volatile UART_t * UART_addr){
 1f0:	fc 01       	movw	r30, r24
	do{
		;
	}while(!(RXC && UART_addr->UART_UCSRA));
 1f2:	90 81       	ld	r25, Z
 1f4:	99 23       	and	r25, r25
 1f6:	e9 f3       	breq	.-6      	; 0x1f2 <UART_Receive+0x2>
	uint8_t ret_val = UART_addr->UART_UDR;
 1f8:	86 81       	ldd	r24, Z+6	; 0x06
	return ret_val;
}
 1fa:	08 95       	ret

000001fc <__udivmodsi4>:
 1fc:	a1 e2       	ldi	r26, 0x21	; 33
 1fe:	1a 2e       	mov	r1, r26
 200:	aa 1b       	sub	r26, r26
 202:	bb 1b       	sub	r27, r27
 204:	fd 01       	movw	r30, r26
 206:	0d c0       	rjmp	.+26     	; 0x222 <__udivmodsi4_ep>

00000208 <__udivmodsi4_loop>:
 208:	aa 1f       	adc	r26, r26
 20a:	bb 1f       	adc	r27, r27
 20c:	ee 1f       	adc	r30, r30
 20e:	ff 1f       	adc	r31, r31
 210:	a2 17       	cp	r26, r18
 212:	b3 07       	cpc	r27, r19
 214:	e4 07       	cpc	r30, r20
 216:	f5 07       	cpc	r31, r21
 218:	20 f0       	brcs	.+8      	; 0x222 <__udivmodsi4_ep>
 21a:	a2 1b       	sub	r26, r18
 21c:	b3 0b       	sbc	r27, r19
 21e:	e4 0b       	sbc	r30, r20
 220:	f5 0b       	sbc	r31, r21

00000222 <__udivmodsi4_ep>:
 222:	66 1f       	adc	r22, r22
 224:	77 1f       	adc	r23, r23
 226:	88 1f       	adc	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	1a 94       	dec	r1
 22c:	69 f7       	brne	.-38     	; 0x208 <__udivmodsi4_loop>
 22e:	60 95       	com	r22
 230:	70 95       	com	r23
 232:	80 95       	com	r24
 234:	90 95       	com	r25
 236:	9b 01       	movw	r18, r22
 238:	ac 01       	movw	r20, r24
 23a:	bd 01       	movw	r22, r26
 23c:	cf 01       	movw	r24, r30
 23e:	08 95       	ret

00000240 <_exit>:
 240:	f8 94       	cli

00000242 <__stop_program>:
 242:	ff cf       	rjmp	.-2      	; 0x242 <__stop_program>
