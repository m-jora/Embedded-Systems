
mp3_app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000180  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fc9  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bf4  00000000  00000000  0000128d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004f9  00000000  00000000  00001e81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  0000237c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000582  00000000  00000000  00002428  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000206  00000000  00000000  000029aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002bb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  10:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  14:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  18:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  1c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  20:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  24:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  28:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  2c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  30:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  34:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  38:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  3c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  40:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  44:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  48:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  4c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  50:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  54:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  58:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  5c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  60:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  68:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  6c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  70:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  74:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  78:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  7c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  80:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  84:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  88:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  8c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  90:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  94:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  98:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  9c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  ac:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  bc:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61
  d8:	0e 94 8b 00 	call	0x116	; 0x116 <main>
  dc:	0c 94 be 00 	jmp	0x17c	; 0x17c <_exit>

000000e0 <__bad_interrupt>:
  e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e4 <GPIO_Output_Init>:
#include "gpio.h"

GPIO_Output_Init(volatile GPIO_t* base_addr,uint8_t pin_mask){
	(base_addr -> GPIO_DDR) |= pin_mask;
  e4:	fc 01       	movw	r30, r24
  e6:	21 81       	ldd	r18, Z+1	; 0x01
  e8:	62 2b       	or	r22, r18
  ea:	61 83       	std	Z+1, r22	; 0x01
}
  ec:	08 95       	ret

000000ee <GPIO_Output_Set>:

GPIO_Output_Set(volatile GPIO_t *addr, uint8_t pin_mask){
	(addr -> GPIO_DDR) |= pin_mask;
  ee:	fc 01       	movw	r30, r24
  f0:	21 81       	ldd	r18, Z+1	; 0x01
  f2:	62 2b       	or	r22, r18
  f4:	61 83       	std	Z+1, r22	; 0x01
}
  f6:	08 95       	ret

000000f8 <GPIO_Output_Clear>:

GPIO_Output_Clear(volatile GPIO_t *addr, uint8_t pin_mask){
  f8:	fc 01       	movw	r30, r24
	(addr -> GPIO_DDR) &= ~(pin_mask);
  fa:	91 81       	ldd	r25, Z+1	; 0x01
  fc:	60 95       	com	r22
  fe:	69 23       	and	r22, r25
 100:	61 83       	std	Z+1, r22	; 0x01
}
 102:	08 95       	ret

00000104 <LEDS_Init>:
#include "LEDS.h"
#include "gpio.h"

LEDS_Init(volatile GPIO_t * port_addr, uint8_t LED_pin)
{
    GPIO_Output_Init(port_addr, LED_pin);
 104:	0e 94 72 00 	call	0xe4	; 0xe4 <GPIO_Output_Init>
}
 108:	08 95       	ret

0000010a <LEDS_Off>:

LEDS_Off(volatile GPIO_t * port_addr, uint8_t LED_pin){
	GPIO_Output_Set(port_addr, LED_pin);
 10a:	0e 94 77 00 	call	0xee	; 0xee <GPIO_Output_Set>
}
 10e:	08 95       	ret

00000110 <LEDS_On>:

LEDS_On (volatile GPIO_t * port_addr, uint8_t LED_pin){
	GPIO_Output_Clear(port_addr, LED_pin);
 110:	0e 94 7c 00 	call	0xf8	; 0xf8 <GPIO_Output_Clear>
 114:	08 95       	ret

00000116 <main>:



int main(void)
{
	LEDS_Init(LED0_port, LED0_pin);
 116:	60 e8       	ldi	r22, 0x80	; 128
 118:	86 e2       	ldi	r24, 0x26	; 38
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 82 00 	call	0x104	; 0x104 <LEDS_Init>
	LEDS_Init(LED1_port, LED1_pin);
 120:	68 e0       	ldi	r22, 0x08	; 8
 122:	83 e2       	ldi	r24, 0x23	; 35
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 82 00 	call	0x104	; 0x104 <LEDS_Init>
	LEDS_Init(LED2_port, LED2_pin);
 12a:	60 e1       	ldi	r22, 0x10	; 16
 12c:	8c e2       	ldi	r24, 0x2C	; 44
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 82 00 	call	0x104	; 0x104 <LEDS_Init>
	LEDS_Init(LED3_port, LED3_pin);
 134:	60 e8       	ldi	r22, 0x80	; 128
 136:	80 e2       	ldi	r24, 0x20	; 32
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 82 00 	call	0x104	; 0x104 <LEDS_Init>
	
    /* Replace with your application code */
    while (1) 
    {
		LEDS_On(LED0_port, LED0_pin);
 13e:	60 e8       	ldi	r22, 0x80	; 128
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	86 e2       	ldi	r24, 0x26	; 38
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 88 00 	call	0x110	; 0x110 <LEDS_On>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14a:	2f ef       	ldi	r18, 0xFF	; 255
 14c:	83 ed       	ldi	r24, 0xD3	; 211
 14e:	90 e3       	ldi	r25, 0x30	; 48
 150:	21 50       	subi	r18, 0x01	; 1
 152:	80 40       	sbci	r24, 0x00	; 0
 154:	90 40       	sbci	r25, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <main+0x3a>
 158:	00 c0       	rjmp	.+0      	; 0x15a <main+0x44>
 15a:	00 00       	nop
		_delay_ms(1000);
		LEDS_Off(LED0_port, LED0_pin);
 15c:	60 e8       	ldi	r22, 0x80	; 128
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	86 e2       	ldi	r24, 0x26	; 38
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 85 00 	call	0x10a	; 0x10a <LEDS_Off>
 168:	2f ef       	ldi	r18, 0xFF	; 255
 16a:	83 ed       	ldi	r24, 0xD3	; 211
 16c:	90 e3       	ldi	r25, 0x30	; 48
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	80 40       	sbci	r24, 0x00	; 0
 172:	90 40       	sbci	r25, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <main+0x58>
 176:	00 c0       	rjmp	.+0      	; 0x178 <main+0x62>
 178:	00 00       	nop
 17a:	e1 cf       	rjmp	.-62     	; 0x13e <main+0x28>

0000017c <_exit>:
 17c:	f8 94       	cli

0000017e <__stop_program>:
 17e:	ff cf       	rjmp	.-2      	; 0x17e <__stop_program>
