
mp3_app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000266  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001359  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ccc  00000000  00000000  00001735  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000066d  00000000  00000000  00002401  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000fc  00000000  00000000  00002a70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000643  00000000  00000000  00002b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000303  00000000  00000000  000031af  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000034b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  10:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  14:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  18:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  1c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  20:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  24:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  28:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  2c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  30:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  34:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  38:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  3c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  40:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  44:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  48:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  4c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  50:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  54:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  58:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  5c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  60:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  68:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  6c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  70:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  74:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  78:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  7c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  80:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  84:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  88:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  8c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  90:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  94:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  98:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  9c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  ac:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  bc:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61
  d8:	0e 94 8b 00 	call	0x116	; 0x116 <main>
  dc:	0c 94 31 01 	jmp	0x262	; 0x262 <_exit>

000000e0 <__bad_interrupt>:
  e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e4 <GPIO_Output_Init>:
#include "gpio.h"

GPIO_Output_Init(volatile GPIO_t* base_addr,uint8_t pin_mask){
	(base_addr -> GPIO_DDR) |= pin_mask;
  e4:	fc 01       	movw	r30, r24
  e6:	21 81       	ldd	r18, Z+1	; 0x01
  e8:	62 2b       	or	r22, r18
  ea:	61 83       	std	Z+1, r22	; 0x01
}
  ec:	08 95       	ret

000000ee <GPIO_Output_Set>:

GPIO_Output_Set(volatile GPIO_t *addr, uint8_t pin_mask){
	(addr -> GPIO_DDR) |= pin_mask;
  ee:	fc 01       	movw	r30, r24
  f0:	21 81       	ldd	r18, Z+1	; 0x01
  f2:	62 2b       	or	r22, r18
  f4:	61 83       	std	Z+1, r22	; 0x01
}
  f6:	08 95       	ret

000000f8 <GPIO_Output_Clear>:

GPIO_Output_Clear(volatile GPIO_t *addr, uint8_t pin_mask){
  f8:	fc 01       	movw	r30, r24
	(addr -> GPIO_DDR) &= ~(pin_mask);
  fa:	91 81       	ldd	r25, Z+1	; 0x01
  fc:	60 95       	com	r22
  fe:	69 23       	and	r22, r25
 100:	61 83       	std	Z+1, r22	; 0x01
}
 102:	08 95       	ret

00000104 <LEDS_Init>:
#include "LEDS.h"
#include "gpio.h"

LEDS_Init(volatile GPIO_t * port_addr, uint8_t LED_pin)
{
    GPIO_Output_Init(port_addr, LED_pin);
 104:	0e 94 72 00 	call	0xe4	; 0xe4 <GPIO_Output_Init>
}
 108:	08 95       	ret

0000010a <LEDS_Off>:

LEDS_Off(volatile GPIO_t * port_addr, uint8_t LED_pin){
	GPIO_Output_Set(port_addr, LED_pin);
 10a:	0e 94 77 00 	call	0xee	; 0xee <GPIO_Output_Set>
}
 10e:	08 95       	ret

00000110 <LEDS_On>:

LEDS_On (volatile GPIO_t * port_addr, uint8_t LED_pin){
	GPIO_Output_Clear(port_addr, LED_pin);
 110:	0e 94 7c 00 	call	0xf8	; 0xf8 <GPIO_Output_Clear>
 114:	08 95       	ret

00000116 <main>:



int main(void)
{
	LEDS_Init(LED0_port, LED0_pin);
 116:	60 e8       	ldi	r22, 0x80	; 128
 118:	86 e2       	ldi	r24, 0x26	; 38
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 82 00 	call	0x104	; 0x104 <LEDS_Init>
	LEDS_Init(LED1_port, LED1_pin);
 120:	68 e0       	ldi	r22, 0x08	; 8
 122:	83 e2       	ldi	r24, 0x23	; 35
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 82 00 	call	0x104	; 0x104 <LEDS_Init>
	LEDS_Init(LED2_port, LED2_pin);
 12a:	60 e1       	ldi	r22, 0x10	; 16
 12c:	8c e2       	ldi	r24, 0x2C	; 44
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 82 00 	call	0x104	; 0x104 <LEDS_Init>
	LEDS_Init(LED3_port, LED3_pin);
 134:	60 e8       	ldi	r22, 0x80	; 128
 136:	80 e2       	ldi	r24, 0x20	; 32
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 82 00 	call	0x104	; 0x104 <LEDS_Init>
	
	UART_Init(UART1, baud_rate);
 13e:	40 e8       	ldi	r20, 0x80	; 128
 140:	55 e2       	ldi	r21, 0x25	; 37
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	88 ec       	ldi	r24, 0xC8	; 200
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 ef 00 	call	0x1de	; 0x1de <UART_Init>
	
    /* Replace with your application code */
    while (1) 
    {
		LEDS_On(LED0_port, LED0_pin);
 14e:	60 e8       	ldi	r22, 0x80	; 128
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	86 e2       	ldi	r24, 0x26	; 38
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 88 00 	call	0x110	; 0x110 <LEDS_On>
		LEDS_On(LED1_port, LED1_pin);
 15a:	68 e0       	ldi	r22, 0x08	; 8
 15c:	70 e0       	ldi	r23, 0x00	; 0
 15e:	83 e2       	ldi	r24, 0x23	; 35
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 88 00 	call	0x110	; 0x110 <LEDS_On>
		LEDS_On(LED2_port, LED2_pin);
 166:	60 e1       	ldi	r22, 0x10	; 16
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	8c e2       	ldi	r24, 0x2C	; 44
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 88 00 	call	0x110	; 0x110 <LEDS_On>
		LEDS_On(LED3_port, LED3_pin);
 172:	60 e8       	ldi	r22, 0x80	; 128
 174:	70 e0       	ldi	r23, 0x00	; 0
 176:	80 e2       	ldi	r24, 0x20	; 32
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 88 00 	call	0x110	; 0x110 <LEDS_On>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17e:	2f ef       	ldi	r18, 0xFF	; 255
 180:	83 ed       	ldi	r24, 0xD3	; 211
 182:	90 e3       	ldi	r25, 0x30	; 48
 184:	21 50       	subi	r18, 0x01	; 1
 186:	80 40       	sbci	r24, 0x00	; 0
 188:	90 40       	sbci	r25, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <main+0x6e>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <main+0x78>
 18e:	00 00       	nop
		_delay_ms(1000);
		LEDS_Off(LED0_port, LED0_pin);
 190:	60 e8       	ldi	r22, 0x80	; 128
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	86 e2       	ldi	r24, 0x26	; 38
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 85 00 	call	0x10a	; 0x10a <LEDS_Off>
		LEDS_Off(LED1_port, LED1_pin);
 19c:	68 e0       	ldi	r22, 0x08	; 8
 19e:	70 e0       	ldi	r23, 0x00	; 0
 1a0:	83 e2       	ldi	r24, 0x23	; 35
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 85 00 	call	0x10a	; 0x10a <LEDS_Off>
		LEDS_Off(LED2_port, LED2_pin);
 1a8:	60 e1       	ldi	r22, 0x10	; 16
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	8c e2       	ldi	r24, 0x2C	; 44
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 85 00 	call	0x10a	; 0x10a <LEDS_Off>
		LEDS_Off(LED3_port, LED3_pin);
 1b4:	60 e8       	ldi	r22, 0x80	; 128
 1b6:	70 e0       	ldi	r23, 0x00	; 0
 1b8:	80 e2       	ldi	r24, 0x20	; 32
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 85 00 	call	0x10a	; 0x10a <LEDS_Off>
 1c0:	2f ef       	ldi	r18, 0xFF	; 255
 1c2:	83 ed       	ldi	r24, 0xD3	; 211
 1c4:	90 e3       	ldi	r25, 0x30	; 48
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	80 40       	sbci	r24, 0x00	; 0
 1ca:	90 40       	sbci	r25, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <main+0xb0>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <main+0xba>
 1d0:	00 00       	nop
		_delay_ms(1000);	
		
		UART_Transmit(UART1, 0x55);
 1d2:	65 e5       	ldi	r22, 0x55	; 85
 1d4:	88 ec       	ldi	r24, 0xC8	; 200
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 08 01 	call	0x210	; 0x210 <UART_Transmit>
 1dc:	b8 cf       	rjmp	.-144    	; 0x14e <main+0x38>

000001de <UART_Init>:
#include "uart.h"

void UART_Init(volatile UART_t * UART_addr, uint32_t Baud_Rate){
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	ec 01       	movw	r28, r24
	uint32_t OSC_F = F_CPU / OSC_DIV;
	uint16_t UBRR_value = (uint16_t)((OSC_F + (4UL * (2-U2X) * Baud_Rate)) / (8UL * (2 - U2X) * Baud_Rate)) -1;
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	74 e2       	ldi	r23, 0x24	; 36
 1e8:	84 ef       	ldi	r24, 0xF4	; 244
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	20 e0       	ldi	r18, 0x00	; 0
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	a9 01       	movw	r20, r18
 1f2:	0e 94 0f 01 	call	0x21e	; 0x21e <__udivmodsi4>
 1f6:	21 50       	subi	r18, 0x01	; 1
 1f8:	31 09       	sbc	r19, r1
	
	(UART_addr->UART_UBRRH) = UBRR_value/256;
 1fa:	3d 83       	std	Y+5, r19	; 0x05
	(UART_addr->UART_UBRRL) = UBRR_value%256;
 1fc:	2c 83       	std	Y+4, r18	; 0x04
	
	(UART_addr->UART_UCSRA) = TXC|MPCM|U2X;
 1fe:	82 e0       	ldi	r24, 0x02	; 2
 200:	88 83       	st	Y, r24
	(UART_addr->UART_UCSRB) = (Interrupt_Disabled|IO_Enable|One_Stop_Bit_2|No_Ninth_Bit);
 202:	88 e1       	ldi	r24, 0x18	; 24
 204:	89 83       	std	Y+1, r24	; 0x01
	(UART_addr->UART_UCSRC) = (Async_Mode|No_Parity|One_Stop_Bit|Eight_Bit_Data);
 206:	86 e0       	ldi	r24, 0x06	; 6
 208:	8a 83       	std	Y+2, r24	; 0x02
}
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	08 95       	ret

00000210 <UART_Transmit>:

int8_t UART_Transmit(volatile UART_t * UART_addr, int8_t send_value){
 210:	fc 01       	movw	r30, r24
	do{
		;
	}while(!(UDRE && UART_addr->UART_UCSRA));
 212:	90 81       	ld	r25, Z
 214:	99 23       	and	r25, r25
 216:	e9 f3       	breq	.-6      	; 0x212 <UART_Transmit+0x2>
		
	UART_addr->UART_UDR = send_value;
 218:	66 83       	std	Z+6, r22	; 0x06
	return 0;
}
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	08 95       	ret

0000021e <__udivmodsi4>:
 21e:	a1 e2       	ldi	r26, 0x21	; 33
 220:	1a 2e       	mov	r1, r26
 222:	aa 1b       	sub	r26, r26
 224:	bb 1b       	sub	r27, r27
 226:	fd 01       	movw	r30, r26
 228:	0d c0       	rjmp	.+26     	; 0x244 <__udivmodsi4_ep>

0000022a <__udivmodsi4_loop>:
 22a:	aa 1f       	adc	r26, r26
 22c:	bb 1f       	adc	r27, r27
 22e:	ee 1f       	adc	r30, r30
 230:	ff 1f       	adc	r31, r31
 232:	a2 17       	cp	r26, r18
 234:	b3 07       	cpc	r27, r19
 236:	e4 07       	cpc	r30, r20
 238:	f5 07       	cpc	r31, r21
 23a:	20 f0       	brcs	.+8      	; 0x244 <__udivmodsi4_ep>
 23c:	a2 1b       	sub	r26, r18
 23e:	b3 0b       	sbc	r27, r19
 240:	e4 0b       	sbc	r30, r20
 242:	f5 0b       	sbc	r31, r21

00000244 <__udivmodsi4_ep>:
 244:	66 1f       	adc	r22, r22
 246:	77 1f       	adc	r23, r23
 248:	88 1f       	adc	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	1a 94       	dec	r1
 24e:	69 f7       	brne	.-38     	; 0x22a <__udivmodsi4_loop>
 250:	60 95       	com	r22
 252:	70 95       	com	r23
 254:	80 95       	com	r24
 256:	90 95       	com	r25
 258:	9b 01       	movw	r18, r22
 25a:	ac 01       	movw	r20, r24
 25c:	bd 01       	movw	r22, r26
 25e:	cf 01       	movw	r24, r30
 260:	08 95       	ret

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
