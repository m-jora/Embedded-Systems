
mp3_app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000b30  00000bc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  00800118  00800118  00000bdc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ad2  00000000  00000000  00000d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000faf  00000000  00000000  00002852  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009b3  00000000  00000000  00003801  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000234  00000000  00000000  000041b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000773  00000000  00000000  000043e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000991  00000000  00000000  00004b5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000054ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 99 00 	jmp	0x132	; 0x132 <__ctors_end>
   4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
   8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
   c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  10:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  14:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  18:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  1c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  20:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  24:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  28:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  2c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  30:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  38:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  3c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  40:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  44:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  48:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  4c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  50:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  54:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  58:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  5c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  60:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  64:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  68:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  6c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  70:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  74:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  78:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  7c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  80:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  84:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  88:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  8c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  90:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  94:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  98:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  9c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  a0:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  a4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  a8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  ac:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  b0:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  b4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  b8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  bc:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  c0:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  c4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  c8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>

000000cc <__trampolines_end>:
  cc:	47 61       	ori	r20, 0x17	; 23
  ce:	72 72       	andi	r23, 0x22	; 34
  d0:	65 74       	andi	r22, 0x45	; 69
  d2:	74 20       	and	r7, r4
  d4:	4d 61       	ori	r20, 0x1D	; 29
  d6:	73 6f       	ori	r23, 0xF3	; 243
  d8:	6e 20       	and	r6, r14
  da:	26 20       	and	r2, r6
  dc:	48 61       	ori	r20, 0x18	; 24
  de:	72 72       	andi	r23, 0x22	; 34
  e0:	69 73       	andi	r22, 0x39	; 57
  e2:	6f 6e       	ori	r22, 0xEF	; 239
  e4:	20 48       	sbci	r18, 0x80	; 128
  e6:	65 73       	andi	r22, 0x35	; 53
  e8:	65 6c       	ori	r22, 0xC5	; 197
  ea:	62 61       	ori	r22, 0x12	; 18
  ec:	72 74       	andi	r23, 0x42	; 66
  ee:	68 0a       	sbc	r6, r24
	...

000000f1 <Prnt_bytes_prnt>:
  f1:	41 64 64 72 2e 20 4f 66 66 73 65 74 20 20 20 30     Addr. Offset   0
 101:	20 20 31 20 20 32 20 20 33 20 20 34 20 20 35 20       1  2  3  4  5 
 111:	20 36 20 20 37 20 20 38 20 20 39 20 20 41 20 20      6  7  8  9  A  
 121:	42 20 20 43 20 20 44 20 20 45 20 20 46 0a 0d 00     B  C  D  E  F...
	...

00000132 <__ctors_end>:
 132:	11 24       	eor	r1, r1
 134:	1f be       	out	0x3f, r1	; 63
 136:	cf ef       	ldi	r28, 0xFF	; 255
 138:	d8 e0       	ldi	r29, 0x08	; 8
 13a:	de bf       	out	0x3e, r29	; 62
 13c:	cd bf       	out	0x3d, r28	; 61

0000013e <__do_copy_data>:
 13e:	11 e0       	ldi	r17, 0x01	; 1
 140:	a0 e0       	ldi	r26, 0x00	; 0
 142:	b1 e0       	ldi	r27, 0x01	; 1
 144:	e0 e3       	ldi	r30, 0x30	; 48
 146:	fb e0       	ldi	r31, 0x0B	; 11
 148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x10>
 14a:	05 90       	lpm	r0, Z+
 14c:	0d 92       	st	X+, r0
 14e:	a8 31       	cpi	r26, 0x18	; 24
 150:	b1 07       	cpc	r27, r17
 152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0xc>

00000154 <__do_clear_bss>:
 154:	21 e0       	ldi	r18, 0x01	; 1
 156:	a8 e1       	ldi	r26, 0x18	; 24
 158:	b1 e0       	ldi	r27, 0x01	; 1
 15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
 15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
 15e:	a8 36       	cpi	r26, 0x68	; 104
 160:	b2 07       	cpc	r27, r18
 162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
 164:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <main>
 168:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <_exit>

0000016c <__bad_interrupt>:
 16c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000170 <GPIO_Output_Init>:
#include "gpio.h"

void GPIO_Output_Init(volatile GPIO_t* base_addr,uint8_t pin_mask){
 170:	fc 01       	movw	r30, r24
	(base_addr -> GPIO_DDR) &= ~pin_mask;
 172:	91 81       	ldd	r25, Z+1	; 0x01
 174:	60 95       	com	r22
 176:	69 23       	and	r22, r25
 178:	61 83       	std	Z+1, r22	; 0x01
 17a:	08 95       	ret

0000017c <GPIO_Output_Set>:
}

void GPIO_Output_Set(volatile GPIO_t *addr, uint8_t pin_mask){
	(addr -> GPIO_DDR) |= pin_mask;
 17c:	fc 01       	movw	r30, r24
 17e:	21 81       	ldd	r18, Z+1	; 0x01
 180:	62 2b       	or	r22, r18
 182:	61 83       	std	Z+1, r22	; 0x01
 184:	08 95       	ret

00000186 <GPIO_Output_Clear>:
}

void GPIO_Output_Clear(volatile GPIO_t *addr, uint8_t pin_mask){
 186:	fc 01       	movw	r30, r24
	(addr -> GPIO_DDR) &= ~(pin_mask);
 188:	91 81       	ldd	r25, Z+1	; 0x01
 18a:	60 95       	com	r22
 18c:	69 23       	and	r22, r25
 18e:	61 83       	std	Z+1, r22	; 0x01
 190:	08 95       	ret

00000192 <LEDS_Init>:
#include "LEDS.h"
#include "gpio.h"

void LEDS_Init(volatile GPIO_t * port_addr, uint8_t LED_pin)
{
    GPIO_Output_Init(port_addr, LED_pin);
 192:	0e 94 b8 00 	call	0x170	; 0x170 <GPIO_Output_Init>
 196:	08 95       	ret

00000198 <LEDS_Off>:
}

void LEDS_Off(volatile GPIO_t * port_addr, uint8_t LED_pin){
	GPIO_Output_Clear(port_addr, LED_pin);
 198:	0e 94 c3 00 	call	0x186	; 0x186 <GPIO_Output_Clear>
 19c:	08 95       	ret

0000019e <LEDS_On>:
}

void LEDS_On (volatile GPIO_t * port_addr, uint8_t LED_pin){
	GPIO_Output_Set(port_addr, LED_pin);
 19e:	0e 94 be 00 	call	0x17c	; 0x17c <GPIO_Output_Set>
 1a2:	08 95       	ret

000001a4 <main>:
const char message[37] PROGMEM = "Garrett Mason & Harrison Heselbarth\n";
uint8_t * p_message = message;

int main(void)
{
	LEDS_Init(LED0_port, LED0_pin);
 1a4:	60 e8       	ldi	r22, 0x80	; 128
 1a6:	86 e2       	ldi	r24, 0x26	; 38
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 c9 00 	call	0x192	; 0x192 <LEDS_Init>
	LEDS_Init(LED1_port, LED1_pin);
 1ae:	68 e0       	ldi	r22, 0x08	; 8
 1b0:	83 e2       	ldi	r24, 0x23	; 35
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 c9 00 	call	0x192	; 0x192 <LEDS_Init>
	LEDS_Init(LED2_port, LED2_pin);
 1b8:	60 e1       	ldi	r22, 0x10	; 16
 1ba:	8c e2       	ldi	r24, 0x2C	; 44
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 c9 00 	call	0x192	; 0x192 <LEDS_Init>
	LEDS_Init(LED3_port, LED3_pin);
 1c2:	60 e8       	ldi	r22, 0x80	; 128
 1c4:	80 e2       	ldi	r24, 0x20	; 32
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 c9 00 	call	0x192	; 0x192 <LEDS_Init>
	
	UART_Init(UART1, baud_rate);
 1cc:	40 e8       	ldi	r20, 0x80	; 128
 1ce:	55 e2       	ldi	r21, 0x25	; 37
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	70 e0       	ldi	r23, 0x00	; 0
 1d4:	88 ec       	ldi	r24, 0xC8	; 200
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <UART_Init>
	
	char * p_buffer;
	p_buffer = Export_print_buffer();
 1dc:	0e 94 30 02 	call	0x460	; 0x460 <Export_print_buffer>
 1e0:	ec 01       	movw	r28, r24
	//sprintf(p_buffer, "ello governor");
	//uint8_t index = Copy_String_to_Buffer(characters, 0, p_buffer);
	
	uint8_t index = Copy_String_to_Buffer(message, 0, p_buffer);
 1e2:	ac 01       	movw	r20, r24
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	8c ec       	ldi	r24, 0xCC	; 204
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 33 02 	call	0x466	; 0x466 <Copy_String_to_Buffer>
	UART_Transmit_String(UART1, 0, p_buffer);
 1ee:	ae 01       	movw	r20, r28
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	88 ec       	ldi	r24, 0xC8	; 200
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 59 02 	call	0x4b2	; 0x4b2 <UART_Transmit_String>
	
	print_memory(UART1,37,p_message);
 1fa:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1fe:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 202:	65 e2       	ldi	r22, 0x25	; 37
 204:	70 e0       	ldi	r23, 0x00	; 0
 206:	88 ec       	ldi	r24, 0xC8	; 200
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 c6 01 	call	0x38c	; 0x38c <print_memory>
	
    while (1) 
    {
		
		LEDS_On(LED0_port, LED0_pin);
 20e:	60 e8       	ldi	r22, 0x80	; 128
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	86 e2       	ldi	r24, 0x26	; 38
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 cf 00 	call	0x19e	; 0x19e <LEDS_On>
		LEDS_On(LED1_port, LED1_pin);
 21a:	68 e0       	ldi	r22, 0x08	; 8
 21c:	70 e0       	ldi	r23, 0x00	; 0
 21e:	83 e2       	ldi	r24, 0x23	; 35
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 cf 00 	call	0x19e	; 0x19e <LEDS_On>
		LEDS_On(LED2_port, LED2_pin);
 226:	60 e1       	ldi	r22, 0x10	; 16
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	8c e2       	ldi	r24, 0x2C	; 44
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 cf 00 	call	0x19e	; 0x19e <LEDS_On>
		LEDS_On(LED3_port, LED3_pin);
 232:	60 e8       	ldi	r22, 0x80	; 128
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	80 e2       	ldi	r24, 0x20	; 32
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 cf 00 	call	0x19e	; 0x19e <LEDS_On>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23e:	2f ef       	ldi	r18, 0xFF	; 255
 240:	83 ed       	ldi	r24, 0xD3	; 211
 242:	90 e3       	ldi	r25, 0x30	; 48
 244:	21 50       	subi	r18, 0x01	; 1
 246:	80 40       	sbci	r24, 0x00	; 0
 248:	90 40       	sbci	r25, 0x00	; 0
 24a:	e1 f7       	brne	.-8      	; 0x244 <main+0xa0>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <main+0xaa>
 24e:	00 00       	nop
		_delay_ms(1000);
		LEDS_Off(LED0_port, LED0_pin);
 250:	60 e8       	ldi	r22, 0x80	; 128
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	86 e2       	ldi	r24, 0x26	; 38
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 cc 00 	call	0x198	; 0x198 <LEDS_Off>
		LEDS_Off(LED1_port, LED1_pin);
 25c:	68 e0       	ldi	r22, 0x08	; 8
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	83 e2       	ldi	r24, 0x23	; 35
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 cc 00 	call	0x198	; 0x198 <LEDS_Off>
		LEDS_Off(LED2_port, LED2_pin);
 268:	60 e1       	ldi	r22, 0x10	; 16
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	8c e2       	ldi	r24, 0x2C	; 44
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 cc 00 	call	0x198	; 0x198 <LEDS_Off>
		LEDS_Off(LED3_port, LED3_pin);
 274:	60 e8       	ldi	r22, 0x80	; 128
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	80 e2       	ldi	r24, 0x20	; 32
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 cc 00 	call	0x198	; 0x198 <LEDS_Off>
 280:	2f ef       	ldi	r18, 0xFF	; 255
 282:	83 ed       	ldi	r24, 0xD3	; 211
 284:	90 e3       	ldi	r25, 0x30	; 48
 286:	21 50       	subi	r18, 0x01	; 1
 288:	80 40       	sbci	r24, 0x00	; 0
 28a:	90 40       	sbci	r25, 0x00	; 0
 28c:	e1 f7       	brne	.-8      	; 0x286 <main+0xe2>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <main+0xec>
 290:	00 00       	nop
 292:	bd cf       	rjmp	.-134    	; 0x20e <main+0x6a>

00000294 <print_16bytes>:
INPUT: Pointer to an array of eight bytes
RETURNS: nothing
CAUTION: 
************************************************************************/
void print_16bytes(volatile UART_t * UART_addr, uint8_t * array_in, uint16_t offset)
{
 294:	af 92       	push	r10
 296:	bf 92       	push	r11
 298:	df 92       	push	r13
 29a:	ef 92       	push	r14
 29c:	ff 92       	push	r15
 29e:	0f 93       	push	r16
 2a0:	1f 93       	push	r17
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	8c 01       	movw	r16, r24
 2a8:	7b 01       	movw	r14, r22
 2aa:	5a 01       	movw	r10, r20
   uint8_t * input;
   uint8_t index, dat;
   char * prnt_bffr;
   
   prnt_bffr=Export_print_buffer();
 2ac:	0e 94 30 02 	call	0x460	; 0x460 <Export_print_buffer>
 2b0:	d8 2e       	mov	r13, r24
 2b2:	d9 2f       	mov	r29, r25
   
   input = array_in+offset;
 2b4:	ea 0c       	add	r14, r10
 2b6:	fb 1c       	adc	r15, r11
   sprintf(prnt_bffr, "%p ",input);
 2b8:	ff 92       	push	r15
 2ba:	ef 92       	push	r14
 2bc:	82 e0       	ldi	r24, 0x02	; 2
 2be:	91 e0       	ldi	r25, 0x01	; 1
 2c0:	9f 93       	push	r25
 2c2:	8f 93       	push	r24
 2c4:	df 93       	push	r29
 2c6:	df 92       	push	r13
 2c8:	0e 94 ac 02 	call	0x558	; 0x558 <sprintf>
   UART_Transmit_String(UART_addr,0,prnt_bffr);
 2cc:	4d 2d       	mov	r20, r13
 2ce:	5d 2f       	mov	r21, r29
 2d0:	60 e0       	ldi	r22, 0x00	; 0
 2d2:	c8 01       	movw	r24, r16
 2d4:	0e 94 59 02 	call	0x4b2	; 0x4b2 <UART_Transmit_String>
   sprintf(prnt_bffr,"0x%4.4X  ",offset);
 2d8:	bf 92       	push	r11
 2da:	af 92       	push	r10
 2dc:	86 e0       	ldi	r24, 0x06	; 6
 2de:	91 e0       	ldi	r25, 0x01	; 1
 2e0:	9f 93       	push	r25
 2e2:	8f 93       	push	r24
 2e4:	df 93       	push	r29
 2e6:	df 92       	push	r13
 2e8:	0e 94 ac 02 	call	0x558	; 0x558 <sprintf>
   UART_Transmit_String(UART_addr,0,prnt_bffr);
 2ec:	4d 2d       	mov	r20, r13
 2ee:	5d 2f       	mov	r21, r29
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	c8 01       	movw	r24, r16
 2f4:	0e 94 59 02 	call	0x4b2	; 0x4b2 <UART_Transmit_String>
   for (index=0;index<16;index++)
 2f8:	8d b7       	in	r24, 0x3d	; 61
 2fa:	9e b7       	in	r25, 0x3e	; 62
 2fc:	0c 96       	adiw	r24, 0x0c	; 12
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	f8 94       	cli
 302:	9e bf       	out	0x3e, r25	; 62
 304:	0f be       	out	0x3f, r0	; 63
 306:	8d bf       	out	0x3d, r24	; 61
 308:	c0 e0       	ldi	r28, 0x00	; 0
 30a:	1b c0       	rjmp	.+54     	; 0x342 <print_16bytes+0xae>
   {
      dat=*(input+index);
 30c:	f7 01       	movw	r30, r14
 30e:	ec 0f       	add	r30, r28
 310:	f1 1d       	adc	r31, r1
 312:	80 81       	ld	r24, Z
      sprintf(prnt_bffr, "%2.2X ",dat);   // Changed from %2.2bX because this printf function can correctly determine number of bytes
 314:	1f 92       	push	r1
 316:	8f 93       	push	r24
 318:	80 e1       	ldi	r24, 0x10	; 16
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	9f 93       	push	r25
 31e:	8f 93       	push	r24
 320:	df 93       	push	r29
 322:	df 92       	push	r13
 324:	0e 94 ac 02 	call	0x558	; 0x558 <sprintf>
	  UART_Transmit_String(UART_addr,0,prnt_bffr);
 328:	4d 2d       	mov	r20, r13
 32a:	5d 2f       	mov	r21, r29
 32c:	60 e0       	ldi	r22, 0x00	; 0
 32e:	c8 01       	movw	r24, r16
 330:	0e 94 59 02 	call	0x4b2	; 0x4b2 <UART_Transmit_String>
   input = array_in+offset;
   sprintf(prnt_bffr, "%p ",input);
   UART_Transmit_String(UART_addr,0,prnt_bffr);
   sprintf(prnt_bffr,"0x%4.4X  ",offset);
   UART_Transmit_String(UART_addr,0,prnt_bffr);
   for (index=0;index<16;index++)
 334:	cf 5f       	subi	r28, 0xFF	; 255
 336:	0f 90       	pop	r0
 338:	0f 90       	pop	r0
 33a:	0f 90       	pop	r0
 33c:	0f 90       	pop	r0
 33e:	0f 90       	pop	r0
 340:	0f 90       	pop	r0
 342:	c0 31       	cpi	r28, 0x10	; 16
 344:	18 f3       	brcs	.-58     	; 0x30c <print_16bytes+0x78>
 346:	c0 e0       	ldi	r28, 0x00	; 0
 348:	0d c0       	rjmp	.+26     	; 0x364 <print_16bytes+0xd0>
      sprintf(prnt_bffr, "%2.2X ",dat);   // Changed from %2.2bX because this printf function can correctly determine number of bytes
	  UART_Transmit_String(UART_addr,0,prnt_bffr);
   }
   for (index=0;index<16;index++)
   { 
      dat=*(input+index);
 34a:	f7 01       	movw	r30, r14
 34c:	ec 0f       	add	r30, r28
 34e:	f1 1d       	adc	r31, r1
 350:	60 81       	ld	r22, Z
      if (dat<32 || dat>127) dat=46;
 352:	80 ee       	ldi	r24, 0xE0	; 224
 354:	86 0f       	add	r24, r22
 356:	80 36       	cpi	r24, 0x60	; 96
 358:	08 f0       	brcs	.+2      	; 0x35c <print_16bytes+0xc8>
 35a:	6e e2       	ldi	r22, 0x2E	; 46
      UART_Transmit(UART_addr,dat);
 35c:	c8 01       	movw	r24, r16
 35e:	0e 94 2a 02 	call	0x454	; 0x454 <UART_Transmit>
   {
      dat=*(input+index);
      sprintf(prnt_bffr, "%2.2X ",dat);   // Changed from %2.2bX because this printf function can correctly determine number of bytes
	  UART_Transmit_String(UART_addr,0,prnt_bffr);
   }
   for (index=0;index<16;index++)
 362:	cf 5f       	subi	r28, 0xFF	; 255
 364:	c0 31       	cpi	r28, 0x10	; 16
 366:	88 f3       	brcs	.-30     	; 0x34a <print_16bytes+0xb6>
   { 
      dat=*(input+index);
      if (dat<32 || dat>127) dat=46;
      UART_Transmit(UART_addr,dat);
   }
   UART_Transmit(UART_addr,CR);
 368:	6d e0       	ldi	r22, 0x0D	; 13
 36a:	c8 01       	movw	r24, r16
 36c:	0e 94 2a 02 	call	0x454	; 0x454 <UART_Transmit>
   UART_Transmit(UART_addr,LF);
 370:	6a e0       	ldi	r22, 0x0A	; 10
 372:	c8 01       	movw	r24, r16
 374:	0e 94 2a 02 	call	0x454	; 0x454 <UART_Transmit>
}
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	1f 91       	pop	r17
 37e:	0f 91       	pop	r16
 380:	ff 90       	pop	r15
 382:	ef 90       	pop	r14
 384:	df 90       	pop	r13
 386:	bf 90       	pop	r11
 388:	af 90       	pop	r10
 38a:	08 95       	ret

0000038c <print_memory>:
INPUT: Pointer to an array, number of bytes to print
RETURNS: nothing
CAUTION: 
************************************************************************/
void print_memory(volatile UART_t * UART_addr, uint16_t number_of_bytes, uint8_t * array_in)
{
 38c:	cf 92       	push	r12
 38e:	df 92       	push	r13
 390:	ef 92       	push	r14
 392:	ff 92       	push	r15
 394:	0f 93       	push	r16
 396:	1f 93       	push	r17
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	8c 01       	movw	r16, r24
 39e:	6b 01       	movw	r12, r22
 3a0:	7a 01       	movw	r14, r20
   uint16_t input;
   char * prnt_bffr;
   
   prnt_bffr=Export_print_buffer();
 3a2:	0e 94 30 02 	call	0x460	; 0x460 <Export_print_buffer>
 3a6:	ec 01       	movw	r28, r24
   
   input = 0;
   Copy_String_to_Buffer(Prnt_bytes_prnt,0,prnt_bffr);
 3a8:	ac 01       	movw	r20, r24
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	81 ef       	ldi	r24, 0xF1	; 241
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 33 02 	call	0x466	; 0x466 <Copy_String_to_Buffer>
   UART_Transmit_String(UART_addr,0,prnt_bffr);
 3b4:	ae 01       	movw	r20, r28
 3b6:	60 e0       	ldi	r22, 0x00	; 0
 3b8:	c8 01       	movw	r24, r16
 3ba:	0e 94 59 02 	call	0x4b2	; 0x4b2 <UART_Transmit_String>
   uint16_t input;
   char * prnt_bffr;
   
   prnt_bffr=Export_print_buffer();
   
   input = 0;
 3be:	c0 e0       	ldi	r28, 0x00	; 0
 3c0:	d0 e0       	ldi	r29, 0x00	; 0
   Copy_String_to_Buffer(Prnt_bytes_prnt,0,prnt_bffr);
   UART_Transmit_String(UART_addr,0,prnt_bffr);
   do
   {
      print_16bytes(UART_addr,array_in,input);
 3c2:	ae 01       	movw	r20, r28
 3c4:	b7 01       	movw	r22, r14
 3c6:	c8 01       	movw	r24, r16
 3c8:	0e 94 4a 01 	call	0x294	; 0x294 <print_16bytes>
      input+=16;
 3cc:	60 96       	adiw	r28, 0x10	; 16
   }while(input<(number_of_bytes));
 3ce:	cc 15       	cp	r28, r12
 3d0:	dd 05       	cpc	r29, r13
 3d2:	b8 f3       	brcs	.-18     	; 0x3c2 <print_memory+0x36>
}
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	1f 91       	pop	r17
 3da:	0f 91       	pop	r16
 3dc:	ff 90       	pop	r15
 3de:	ef 90       	pop	r14
 3e0:	df 90       	pop	r13
 3e2:	cf 90       	pop	r12
 3e4:	08 95       	ret

000003e6 <UART_Init>:
#include "uart.h"

void UART_Init(volatile UART_t * UART_addr, uint32_t Baud_Rate){
 3e6:	cf 93       	push	r28
 3e8:	df 93       	push	r29
 3ea:	ec 01       	movw	r28, r24
	uint16_t UBRR_value = (uint16_t)((((F_CPU / OSC_DIV) + (4UL * (2-U2X) * Baud_Rate)) / (8UL * (2 - U2X) * Baud_Rate)) -1);
 3ec:	db 01       	movw	r26, r22
 3ee:	ca 01       	movw	r24, r20
 3f0:	80 58       	subi	r24, 0x80	; 128
 3f2:	9b 47       	sbci	r25, 0x7B	; 123
 3f4:	a1 4e       	sbci	r26, 0xE1	; 225
 3f6:	bf 4f       	sbci	r27, 0xFF	; 255
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	aa 1f       	adc	r26, r26
 3fe:	bb 1f       	adc	r27, r27
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	aa 1f       	adc	r26, r26
 406:	bb 1f       	adc	r27, r27
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	aa 1f       	adc	r26, r26
 40e:	bb 1f       	adc	r27, r27
 410:	44 0f       	add	r20, r20
 412:	55 1f       	adc	r21, r21
 414:	66 1f       	adc	r22, r22
 416:	77 1f       	adc	r23, r23
 418:	44 0f       	add	r20, r20
 41a:	55 1f       	adc	r21, r21
 41c:	66 1f       	adc	r22, r22
 41e:	77 1f       	adc	r23, r23
 420:	9a 01       	movw	r18, r20
 422:	ab 01       	movw	r20, r22
 424:	22 0f       	add	r18, r18
 426:	33 1f       	adc	r19, r19
 428:	44 1f       	adc	r20, r20
 42a:	55 1f       	adc	r21, r21
 42c:	22 0f       	add	r18, r18
 42e:	33 1f       	adc	r19, r19
 430:	44 1f       	adc	r20, r20
 432:	55 1f       	adc	r21, r21
 434:	bc 01       	movw	r22, r24
 436:	cd 01       	movw	r24, r26
 438:	0e 94 8a 02 	call	0x514	; 0x514 <__udivmodsi4>
 43c:	21 50       	subi	r18, 0x01	; 1
 43e:	31 09       	sbc	r19, r1
	
	(UART_addr->UART_UBRRH) = UBRR_value/256;
 440:	3d 83       	std	Y+5, r19	; 0x05
	(UART_addr->UART_UBRRL) = UBRR_value%256;
 442:	2c 83       	std	Y+4, r18	; 0x04
	
	(UART_addr->UART_UCSRA) = TXC|MPCM|U2XA;
 444:	18 82       	st	Y, r1
	(UART_addr->UART_UCSRB) = (Interrupt_Disabled|IO_Enable|One_Stop_Bit_2|No_Ninth_Bit);
 446:	88 e1       	ldi	r24, 0x18	; 24
 448:	89 83       	std	Y+1, r24	; 0x01
	(UART_addr->UART_UCSRC) = (Async_Mode|No_Parity|One_Stop_Bit|Eight_Bit_Data);
 44a:	86 e0       	ldi	r24, 0x06	; 6
 44c:	8a 83       	std	Y+2, r24	; 0x02
}
 44e:	df 91       	pop	r29
 450:	cf 91       	pop	r28
 452:	08 95       	ret

00000454 <UART_Transmit>:

void UART_Transmit(volatile UART_t * UART_addr, int8_t send_value){
 454:	fc 01       	movw	r30, r24
	do{
		;
	}while(!(UDRE & UART_addr->UART_UCSRA));
 456:	90 81       	ld	r25, Z
 458:	95 ff       	sbrs	r25, 5
 45a:	fd cf       	rjmp	.-6      	; 0x456 <UART_Transmit+0x2>
	UART_addr->UART_UDR = send_value;
 45c:	66 83       	std	Z+6, r22	; 0x06
 45e:	08 95       	ret

00000460 <Export_print_buffer>:

char * Export_print_buffer(void)
{
	
	return print_buffer;
}
 460:	88 e1       	ldi	r24, 0x18	; 24
 462:	91 e0       	ldi	r25, 0x01	; 1
 464:	08 95       	ret

00000466 <Copy_String_to_Buffer>:

uint8_t Copy_String_to_Buffer(const char flash_string[], uint8_t num_bytes, char buffer_p[])
{
 466:	cf 93       	push	r28
 468:	df 93       	push	r29
 46a:	dc 01       	movw	r26, r24
	uint8_t index;
	char value;
	if(num_bytes==0)
 46c:	61 11       	cpse	r22, r1
 46e:	1a c0       	rjmp	.+52     	; 0x4a4 <Copy_String_to_Buffer+0x3e>
	{
		index=0;
		do
		{
			value=pgm_read_byte(&flash_string[index]);
 470:	26 2f       	mov	r18, r22
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	fd 01       	movw	r30, r26
 476:	e2 0f       	add	r30, r18
 478:	f3 1f       	adc	r31, r19
 47a:	e4 91       	lpm	r30, Z
			buffer_p[index]=value;
 47c:	ea 01       	movw	r28, r20
 47e:	c2 0f       	add	r28, r18
 480:	d3 1f       	adc	r29, r19
 482:	e8 83       	st	Y, r30
			index++;
 484:	6f 5f       	subi	r22, 0xFF	; 255
		} while (value!=0);
 486:	e1 11       	cpse	r30, r1
 488:	f3 cf       	rjmp	.-26     	; 0x470 <Copy_String_to_Buffer+0xa>
 48a:	0f c0       	rjmp	.+30     	; 0x4aa <Copy_String_to_Buffer+0x44>
	}
	else
	{
		for(index=0;index<num_bytes;index++)
		{
			value=pgm_read_byte(&flash_string[index]);
 48c:	29 2f       	mov	r18, r25
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	fd 01       	movw	r30, r26
 492:	e2 0f       	add	r30, r18
 494:	f3 1f       	adc	r31, r19
 496:	e4 91       	lpm	r30, Z
			buffer_p[index]=value;
 498:	ea 01       	movw	r28, r20
 49a:	c2 0f       	add	r28, r18
 49c:	d3 1f       	adc	r29, r19
 49e:	e8 83       	st	Y, r30
			index++;
		} while (value!=0);
	}
	else
	{
		for(index=0;index<num_bytes;index++)
 4a0:	9f 5f       	subi	r25, 0xFF	; 255
 4a2:	01 c0       	rjmp	.+2      	; 0x4a6 <Copy_String_to_Buffer+0x40>
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	96 17       	cp	r25, r22
 4a8:	88 f3       	brcs	.-30     	; 0x48c <Copy_String_to_Buffer+0x26>
			buffer_p[index]=value;
		}
		index=num_bytes;
	}
	return index;
}
 4aa:	86 2f       	mov	r24, r22
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
 4b0:	08 95       	ret

000004b2 <UART_Transmit_String>:

void UART_Transmit_String(volatile UART_t * UART_addr, uint8_t num_bytes, char * string_name)
{
 4b2:	ef 92       	push	r14
 4b4:	ff 92       	push	r15
 4b6:	0f 93       	push	r16
 4b8:	1f 93       	push	r17
 4ba:	cf 93       	push	r28
 4bc:	df 93       	push	r29
 4be:	7c 01       	movw	r14, r24
 4c0:	06 2f       	mov	r16, r22
 4c2:	ea 01       	movw	r28, r20
	char temp8;
	int8_t index;
	if(num_bytes==0)
 4c4:	61 11       	cpse	r22, r1
 4c6:	15 c0       	rjmp	.+42     	; 0x4f2 <UART_Transmit_String+0x40>
	{
		temp8=*string_name;
 4c8:	68 81       	ld	r22, Y
		while (temp8!=0)
 4ca:	05 c0       	rjmp	.+10     	; 0x4d6 <UART_Transmit_String+0x24>
		{
			UART_Transmit(UART_addr, temp8);
 4cc:	c7 01       	movw	r24, r14
 4ce:	0e 94 2a 02 	call	0x454	; 0x454 <UART_Transmit>
			string_name++;
 4d2:	21 96       	adiw	r28, 0x01	; 1
			temp8=*string_name;
 4d4:	68 81       	ld	r22, Y
	char temp8;
	int8_t index;
	if(num_bytes==0)
	{
		temp8=*string_name;
		while (temp8!=0)
 4d6:	61 11       	cpse	r22, r1
 4d8:	f9 cf       	rjmp	.-14     	; 0x4cc <UART_Transmit_String+0x1a>
 4da:	15 c0       	rjmp	.+42     	; 0x506 <UART_Transmit_String+0x54>
	}
	else
	{
		for(index=0;index<num_bytes;index++)
		{
			UART_Transmit(UART_addr, string_name[index]);
 4dc:	fe 01       	movw	r30, r28
 4de:	e1 0f       	add	r30, r17
 4e0:	f1 1d       	adc	r31, r1
 4e2:	17 fd       	sbrc	r17, 7
 4e4:	fa 95       	dec	r31
 4e6:	60 81       	ld	r22, Z
 4e8:	c7 01       	movw	r24, r14
 4ea:	0e 94 2a 02 	call	0x454	; 0x454 <UART_Transmit>
			temp8=*string_name;
		}
	}
	else
	{
		for(index=0;index<num_bytes;index++)
 4ee:	1f 5f       	subi	r17, 0xFF	; 255
 4f0:	01 c0       	rjmp	.+2      	; 0x4f4 <UART_Transmit_String+0x42>
 4f2:	10 e0       	ldi	r17, 0x00	; 0
 4f4:	20 2f       	mov	r18, r16
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	81 2f       	mov	r24, r17
 4fa:	01 2e       	mov	r0, r17
 4fc:	00 0c       	add	r0, r0
 4fe:	99 0b       	sbc	r25, r25
 500:	82 17       	cp	r24, r18
 502:	93 07       	cpc	r25, r19
 504:	5c f3       	brlt	.-42     	; 0x4dc <UART_Transmit_String+0x2a>
		{
			UART_Transmit(UART_addr, string_name[index]);
		}
	}
}
 506:	df 91       	pop	r29
 508:	cf 91       	pop	r28
 50a:	1f 91       	pop	r17
 50c:	0f 91       	pop	r16
 50e:	ff 90       	pop	r15
 510:	ef 90       	pop	r14
 512:	08 95       	ret

00000514 <__udivmodsi4>:
 514:	a1 e2       	ldi	r26, 0x21	; 33
 516:	1a 2e       	mov	r1, r26
 518:	aa 1b       	sub	r26, r26
 51a:	bb 1b       	sub	r27, r27
 51c:	fd 01       	movw	r30, r26
 51e:	0d c0       	rjmp	.+26     	; 0x53a <__udivmodsi4_ep>

00000520 <__udivmodsi4_loop>:
 520:	aa 1f       	adc	r26, r26
 522:	bb 1f       	adc	r27, r27
 524:	ee 1f       	adc	r30, r30
 526:	ff 1f       	adc	r31, r31
 528:	a2 17       	cp	r26, r18
 52a:	b3 07       	cpc	r27, r19
 52c:	e4 07       	cpc	r30, r20
 52e:	f5 07       	cpc	r31, r21
 530:	20 f0       	brcs	.+8      	; 0x53a <__udivmodsi4_ep>
 532:	a2 1b       	sub	r26, r18
 534:	b3 0b       	sbc	r27, r19
 536:	e4 0b       	sbc	r30, r20
 538:	f5 0b       	sbc	r31, r21

0000053a <__udivmodsi4_ep>:
 53a:	66 1f       	adc	r22, r22
 53c:	77 1f       	adc	r23, r23
 53e:	88 1f       	adc	r24, r24
 540:	99 1f       	adc	r25, r25
 542:	1a 94       	dec	r1
 544:	69 f7       	brne	.-38     	; 0x520 <__udivmodsi4_loop>
 546:	60 95       	com	r22
 548:	70 95       	com	r23
 54a:	80 95       	com	r24
 54c:	90 95       	com	r25
 54e:	9b 01       	movw	r18, r22
 550:	ac 01       	movw	r20, r24
 552:	bd 01       	movw	r22, r26
 554:	cf 01       	movw	r24, r30
 556:	08 95       	ret

00000558 <sprintf>:
 558:	ae e0       	ldi	r26, 0x0E	; 14
 55a:	b0 e0       	ldi	r27, 0x00	; 0
 55c:	e2 eb       	ldi	r30, 0xB2	; 178
 55e:	f2 e0       	ldi	r31, 0x02	; 2
 560:	0c 94 6d 05 	jmp	0xada	; 0xada <__prologue_saves__+0x1c>
 564:	0d 89       	ldd	r16, Y+21	; 0x15
 566:	1e 89       	ldd	r17, Y+22	; 0x16
 568:	86 e0       	ldi	r24, 0x06	; 6
 56a:	8c 83       	std	Y+4, r24	; 0x04
 56c:	1a 83       	std	Y+2, r17	; 0x02
 56e:	09 83       	std	Y+1, r16	; 0x01
 570:	8f ef       	ldi	r24, 0xFF	; 255
 572:	9f e7       	ldi	r25, 0x7F	; 127
 574:	9e 83       	std	Y+6, r25	; 0x06
 576:	8d 83       	std	Y+5, r24	; 0x05
 578:	ae 01       	movw	r20, r28
 57a:	47 5e       	subi	r20, 0xE7	; 231
 57c:	5f 4f       	sbci	r21, 0xFF	; 255
 57e:	6f 89       	ldd	r22, Y+23	; 0x17
 580:	78 8d       	ldd	r23, Y+24	; 0x18
 582:	ce 01       	movw	r24, r28
 584:	01 96       	adiw	r24, 0x01	; 1
 586:	0e 94 ce 02 	call	0x59c	; 0x59c <vfprintf>
 58a:	ef 81       	ldd	r30, Y+7	; 0x07
 58c:	f8 85       	ldd	r31, Y+8	; 0x08
 58e:	e0 0f       	add	r30, r16
 590:	f1 1f       	adc	r31, r17
 592:	10 82       	st	Z, r1
 594:	2e 96       	adiw	r28, 0x0e	; 14
 596:	e4 e0       	ldi	r30, 0x04	; 4
 598:	0c 94 89 05 	jmp	0xb12	; 0xb12 <__epilogue_restores__+0x1c>

0000059c <vfprintf>:
 59c:	ab e0       	ldi	r26, 0x0B	; 11
 59e:	b0 e0       	ldi	r27, 0x00	; 0
 5a0:	e4 ed       	ldi	r30, 0xD4	; 212
 5a2:	f2 e0       	ldi	r31, 0x02	; 2
 5a4:	0c 94 5f 05 	jmp	0xabe	; 0xabe <__prologue_saves__>
 5a8:	6c 01       	movw	r12, r24
 5aa:	7b 01       	movw	r14, r22
 5ac:	8a 01       	movw	r16, r20
 5ae:	fc 01       	movw	r30, r24
 5b0:	17 82       	std	Z+7, r1	; 0x07
 5b2:	16 82       	std	Z+6, r1	; 0x06
 5b4:	83 81       	ldd	r24, Z+3	; 0x03
 5b6:	81 ff       	sbrs	r24, 1
 5b8:	cc c1       	rjmp	.+920    	; 0x952 <__stack+0x53>
 5ba:	ce 01       	movw	r24, r28
 5bc:	01 96       	adiw	r24, 0x01	; 1
 5be:	3c 01       	movw	r6, r24
 5c0:	f6 01       	movw	r30, r12
 5c2:	93 81       	ldd	r25, Z+3	; 0x03
 5c4:	f7 01       	movw	r30, r14
 5c6:	93 fd       	sbrc	r25, 3
 5c8:	85 91       	lpm	r24, Z+
 5ca:	93 ff       	sbrs	r25, 3
 5cc:	81 91       	ld	r24, Z+
 5ce:	7f 01       	movw	r14, r30
 5d0:	88 23       	and	r24, r24
 5d2:	09 f4       	brne	.+2      	; 0x5d6 <vfprintf+0x3a>
 5d4:	ba c1       	rjmp	.+884    	; 0x94a <__stack+0x4b>
 5d6:	85 32       	cpi	r24, 0x25	; 37
 5d8:	39 f4       	brne	.+14     	; 0x5e8 <vfprintf+0x4c>
 5da:	93 fd       	sbrc	r25, 3
 5dc:	85 91       	lpm	r24, Z+
 5de:	93 ff       	sbrs	r25, 3
 5e0:	81 91       	ld	r24, Z+
 5e2:	7f 01       	movw	r14, r30
 5e4:	85 32       	cpi	r24, 0x25	; 37
 5e6:	29 f4       	brne	.+10     	; 0x5f2 <vfprintf+0x56>
 5e8:	b6 01       	movw	r22, r12
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	0e 94 c5 04 	call	0x98a	; 0x98a <fputc>
 5f0:	e7 cf       	rjmp	.-50     	; 0x5c0 <vfprintf+0x24>
 5f2:	91 2c       	mov	r9, r1
 5f4:	21 2c       	mov	r2, r1
 5f6:	31 2c       	mov	r3, r1
 5f8:	ff e1       	ldi	r31, 0x1F	; 31
 5fa:	f3 15       	cp	r31, r3
 5fc:	d8 f0       	brcs	.+54     	; 0x634 <vfprintf+0x98>
 5fe:	8b 32       	cpi	r24, 0x2B	; 43
 600:	79 f0       	breq	.+30     	; 0x620 <vfprintf+0x84>
 602:	38 f4       	brcc	.+14     	; 0x612 <vfprintf+0x76>
 604:	80 32       	cpi	r24, 0x20	; 32
 606:	79 f0       	breq	.+30     	; 0x626 <vfprintf+0x8a>
 608:	83 32       	cpi	r24, 0x23	; 35
 60a:	a1 f4       	brne	.+40     	; 0x634 <vfprintf+0x98>
 60c:	23 2d       	mov	r18, r3
 60e:	20 61       	ori	r18, 0x10	; 16
 610:	1d c0       	rjmp	.+58     	; 0x64c <vfprintf+0xb0>
 612:	8d 32       	cpi	r24, 0x2D	; 45
 614:	61 f0       	breq	.+24     	; 0x62e <vfprintf+0x92>
 616:	80 33       	cpi	r24, 0x30	; 48
 618:	69 f4       	brne	.+26     	; 0x634 <vfprintf+0x98>
 61a:	23 2d       	mov	r18, r3
 61c:	21 60       	ori	r18, 0x01	; 1
 61e:	16 c0       	rjmp	.+44     	; 0x64c <vfprintf+0xb0>
 620:	83 2d       	mov	r24, r3
 622:	82 60       	ori	r24, 0x02	; 2
 624:	38 2e       	mov	r3, r24
 626:	e3 2d       	mov	r30, r3
 628:	e4 60       	ori	r30, 0x04	; 4
 62a:	3e 2e       	mov	r3, r30
 62c:	2a c0       	rjmp	.+84     	; 0x682 <vfprintf+0xe6>
 62e:	f3 2d       	mov	r31, r3
 630:	f8 60       	ori	r31, 0x08	; 8
 632:	1d c0       	rjmp	.+58     	; 0x66e <vfprintf+0xd2>
 634:	37 fc       	sbrc	r3, 7
 636:	2d c0       	rjmp	.+90     	; 0x692 <vfprintf+0xf6>
 638:	20 ed       	ldi	r18, 0xD0	; 208
 63a:	28 0f       	add	r18, r24
 63c:	2a 30       	cpi	r18, 0x0A	; 10
 63e:	40 f0       	brcs	.+16     	; 0x650 <vfprintf+0xb4>
 640:	8e 32       	cpi	r24, 0x2E	; 46
 642:	b9 f4       	brne	.+46     	; 0x672 <vfprintf+0xd6>
 644:	36 fc       	sbrc	r3, 6
 646:	81 c1       	rjmp	.+770    	; 0x94a <__stack+0x4b>
 648:	23 2d       	mov	r18, r3
 64a:	20 64       	ori	r18, 0x40	; 64
 64c:	32 2e       	mov	r3, r18
 64e:	19 c0       	rjmp	.+50     	; 0x682 <vfprintf+0xe6>
 650:	36 fe       	sbrs	r3, 6
 652:	06 c0       	rjmp	.+12     	; 0x660 <vfprintf+0xc4>
 654:	8a e0       	ldi	r24, 0x0A	; 10
 656:	98 9e       	mul	r9, r24
 658:	20 0d       	add	r18, r0
 65a:	11 24       	eor	r1, r1
 65c:	92 2e       	mov	r9, r18
 65e:	11 c0       	rjmp	.+34     	; 0x682 <vfprintf+0xe6>
 660:	ea e0       	ldi	r30, 0x0A	; 10
 662:	2e 9e       	mul	r2, r30
 664:	20 0d       	add	r18, r0
 666:	11 24       	eor	r1, r1
 668:	22 2e       	mov	r2, r18
 66a:	f3 2d       	mov	r31, r3
 66c:	f0 62       	ori	r31, 0x20	; 32
 66e:	3f 2e       	mov	r3, r31
 670:	08 c0       	rjmp	.+16     	; 0x682 <vfprintf+0xe6>
 672:	8c 36       	cpi	r24, 0x6C	; 108
 674:	21 f4       	brne	.+8      	; 0x67e <vfprintf+0xe2>
 676:	83 2d       	mov	r24, r3
 678:	80 68       	ori	r24, 0x80	; 128
 67a:	38 2e       	mov	r3, r24
 67c:	02 c0       	rjmp	.+4      	; 0x682 <vfprintf+0xe6>
 67e:	88 36       	cpi	r24, 0x68	; 104
 680:	41 f4       	brne	.+16     	; 0x692 <vfprintf+0xf6>
 682:	f7 01       	movw	r30, r14
 684:	93 fd       	sbrc	r25, 3
 686:	85 91       	lpm	r24, Z+
 688:	93 ff       	sbrs	r25, 3
 68a:	81 91       	ld	r24, Z+
 68c:	7f 01       	movw	r14, r30
 68e:	81 11       	cpse	r24, r1
 690:	b3 cf       	rjmp	.-154    	; 0x5f8 <vfprintf+0x5c>
 692:	98 2f       	mov	r25, r24
 694:	9f 7d       	andi	r25, 0xDF	; 223
 696:	95 54       	subi	r25, 0x45	; 69
 698:	93 30       	cpi	r25, 0x03	; 3
 69a:	28 f4       	brcc	.+10     	; 0x6a6 <vfprintf+0x10a>
 69c:	0c 5f       	subi	r16, 0xFC	; 252
 69e:	1f 4f       	sbci	r17, 0xFF	; 255
 6a0:	9f e3       	ldi	r25, 0x3F	; 63
 6a2:	99 83       	std	Y+1, r25	; 0x01
 6a4:	0d c0       	rjmp	.+26     	; 0x6c0 <vfprintf+0x124>
 6a6:	83 36       	cpi	r24, 0x63	; 99
 6a8:	31 f0       	breq	.+12     	; 0x6b6 <vfprintf+0x11a>
 6aa:	83 37       	cpi	r24, 0x73	; 115
 6ac:	71 f0       	breq	.+28     	; 0x6ca <vfprintf+0x12e>
 6ae:	83 35       	cpi	r24, 0x53	; 83
 6b0:	09 f0       	breq	.+2      	; 0x6b4 <vfprintf+0x118>
 6b2:	59 c0       	rjmp	.+178    	; 0x766 <vfprintf+0x1ca>
 6b4:	21 c0       	rjmp	.+66     	; 0x6f8 <vfprintf+0x15c>
 6b6:	f8 01       	movw	r30, r16
 6b8:	80 81       	ld	r24, Z
 6ba:	89 83       	std	Y+1, r24	; 0x01
 6bc:	0e 5f       	subi	r16, 0xFE	; 254
 6be:	1f 4f       	sbci	r17, 0xFF	; 255
 6c0:	88 24       	eor	r8, r8
 6c2:	83 94       	inc	r8
 6c4:	91 2c       	mov	r9, r1
 6c6:	53 01       	movw	r10, r6
 6c8:	13 c0       	rjmp	.+38     	; 0x6f0 <vfprintf+0x154>
 6ca:	28 01       	movw	r4, r16
 6cc:	f2 e0       	ldi	r31, 0x02	; 2
 6ce:	4f 0e       	add	r4, r31
 6d0:	51 1c       	adc	r5, r1
 6d2:	f8 01       	movw	r30, r16
 6d4:	a0 80       	ld	r10, Z
 6d6:	b1 80       	ldd	r11, Z+1	; 0x01
 6d8:	36 fe       	sbrs	r3, 6
 6da:	03 c0       	rjmp	.+6      	; 0x6e2 <vfprintf+0x146>
 6dc:	69 2d       	mov	r22, r9
 6de:	70 e0       	ldi	r23, 0x00	; 0
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <vfprintf+0x14a>
 6e2:	6f ef       	ldi	r22, 0xFF	; 255
 6e4:	7f ef       	ldi	r23, 0xFF	; 255
 6e6:	c5 01       	movw	r24, r10
 6e8:	0e 94 ba 04 	call	0x974	; 0x974 <strnlen>
 6ec:	4c 01       	movw	r8, r24
 6ee:	82 01       	movw	r16, r4
 6f0:	f3 2d       	mov	r31, r3
 6f2:	ff 77       	andi	r31, 0x7F	; 127
 6f4:	3f 2e       	mov	r3, r31
 6f6:	16 c0       	rjmp	.+44     	; 0x724 <vfprintf+0x188>
 6f8:	28 01       	movw	r4, r16
 6fa:	22 e0       	ldi	r18, 0x02	; 2
 6fc:	42 0e       	add	r4, r18
 6fe:	51 1c       	adc	r5, r1
 700:	f8 01       	movw	r30, r16
 702:	a0 80       	ld	r10, Z
 704:	b1 80       	ldd	r11, Z+1	; 0x01
 706:	36 fe       	sbrs	r3, 6
 708:	03 c0       	rjmp	.+6      	; 0x710 <vfprintf+0x174>
 70a:	69 2d       	mov	r22, r9
 70c:	70 e0       	ldi	r23, 0x00	; 0
 70e:	02 c0       	rjmp	.+4      	; 0x714 <vfprintf+0x178>
 710:	6f ef       	ldi	r22, 0xFF	; 255
 712:	7f ef       	ldi	r23, 0xFF	; 255
 714:	c5 01       	movw	r24, r10
 716:	0e 94 af 04 	call	0x95e	; 0x95e <strnlen_P>
 71a:	4c 01       	movw	r8, r24
 71c:	f3 2d       	mov	r31, r3
 71e:	f0 68       	ori	r31, 0x80	; 128
 720:	3f 2e       	mov	r3, r31
 722:	82 01       	movw	r16, r4
 724:	33 fc       	sbrc	r3, 3
 726:	1b c0       	rjmp	.+54     	; 0x75e <vfprintf+0x1c2>
 728:	82 2d       	mov	r24, r2
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	88 16       	cp	r8, r24
 72e:	99 06       	cpc	r9, r25
 730:	b0 f4       	brcc	.+44     	; 0x75e <vfprintf+0x1c2>
 732:	b6 01       	movw	r22, r12
 734:	80 e2       	ldi	r24, 0x20	; 32
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	0e 94 c5 04 	call	0x98a	; 0x98a <fputc>
 73c:	2a 94       	dec	r2
 73e:	f4 cf       	rjmp	.-24     	; 0x728 <vfprintf+0x18c>
 740:	f5 01       	movw	r30, r10
 742:	37 fc       	sbrc	r3, 7
 744:	85 91       	lpm	r24, Z+
 746:	37 fe       	sbrs	r3, 7
 748:	81 91       	ld	r24, Z+
 74a:	5f 01       	movw	r10, r30
 74c:	b6 01       	movw	r22, r12
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	0e 94 c5 04 	call	0x98a	; 0x98a <fputc>
 754:	21 10       	cpse	r2, r1
 756:	2a 94       	dec	r2
 758:	21 e0       	ldi	r18, 0x01	; 1
 75a:	82 1a       	sub	r8, r18
 75c:	91 08       	sbc	r9, r1
 75e:	81 14       	cp	r8, r1
 760:	91 04       	cpc	r9, r1
 762:	71 f7       	brne	.-36     	; 0x740 <vfprintf+0x1a4>
 764:	e8 c0       	rjmp	.+464    	; 0x936 <__stack+0x37>
 766:	84 36       	cpi	r24, 0x64	; 100
 768:	11 f0       	breq	.+4      	; 0x76e <vfprintf+0x1d2>
 76a:	89 36       	cpi	r24, 0x69	; 105
 76c:	41 f5       	brne	.+80     	; 0x7be <vfprintf+0x222>
 76e:	f8 01       	movw	r30, r16
 770:	37 fe       	sbrs	r3, 7
 772:	07 c0       	rjmp	.+14     	; 0x782 <vfprintf+0x1e6>
 774:	60 81       	ld	r22, Z
 776:	71 81       	ldd	r23, Z+1	; 0x01
 778:	82 81       	ldd	r24, Z+2	; 0x02
 77a:	93 81       	ldd	r25, Z+3	; 0x03
 77c:	0c 5f       	subi	r16, 0xFC	; 252
 77e:	1f 4f       	sbci	r17, 0xFF	; 255
 780:	08 c0       	rjmp	.+16     	; 0x792 <vfprintf+0x1f6>
 782:	60 81       	ld	r22, Z
 784:	71 81       	ldd	r23, Z+1	; 0x01
 786:	07 2e       	mov	r0, r23
 788:	00 0c       	add	r0, r0
 78a:	88 0b       	sbc	r24, r24
 78c:	99 0b       	sbc	r25, r25
 78e:	0e 5f       	subi	r16, 0xFE	; 254
 790:	1f 4f       	sbci	r17, 0xFF	; 255
 792:	f3 2d       	mov	r31, r3
 794:	ff 76       	andi	r31, 0x6F	; 111
 796:	3f 2e       	mov	r3, r31
 798:	97 ff       	sbrs	r25, 7
 79a:	09 c0       	rjmp	.+18     	; 0x7ae <vfprintf+0x212>
 79c:	90 95       	com	r25
 79e:	80 95       	com	r24
 7a0:	70 95       	com	r23
 7a2:	61 95       	neg	r22
 7a4:	7f 4f       	sbci	r23, 0xFF	; 255
 7a6:	8f 4f       	sbci	r24, 0xFF	; 255
 7a8:	9f 4f       	sbci	r25, 0xFF	; 255
 7aa:	f0 68       	ori	r31, 0x80	; 128
 7ac:	3f 2e       	mov	r3, r31
 7ae:	2a e0       	ldi	r18, 0x0A	; 10
 7b0:	30 e0       	ldi	r19, 0x00	; 0
 7b2:	a3 01       	movw	r20, r6
 7b4:	0e 94 01 05 	call	0xa02	; 0xa02 <__ultoa_invert>
 7b8:	88 2e       	mov	r8, r24
 7ba:	86 18       	sub	r8, r6
 7bc:	45 c0       	rjmp	.+138    	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 7be:	85 37       	cpi	r24, 0x75	; 117
 7c0:	31 f4       	brne	.+12     	; 0x7ce <vfprintf+0x232>
 7c2:	23 2d       	mov	r18, r3
 7c4:	2f 7e       	andi	r18, 0xEF	; 239
 7c6:	b2 2e       	mov	r11, r18
 7c8:	2a e0       	ldi	r18, 0x0A	; 10
 7ca:	30 e0       	ldi	r19, 0x00	; 0
 7cc:	25 c0       	rjmp	.+74     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 7ce:	93 2d       	mov	r25, r3
 7d0:	99 7f       	andi	r25, 0xF9	; 249
 7d2:	b9 2e       	mov	r11, r25
 7d4:	8f 36       	cpi	r24, 0x6F	; 111
 7d6:	c1 f0       	breq	.+48     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7d8:	18 f4       	brcc	.+6      	; 0x7e0 <vfprintf+0x244>
 7da:	88 35       	cpi	r24, 0x58	; 88
 7dc:	79 f0       	breq	.+30     	; 0x7fc <vfprintf+0x260>
 7de:	b5 c0       	rjmp	.+362    	; 0x94a <__stack+0x4b>
 7e0:	80 37       	cpi	r24, 0x70	; 112
 7e2:	19 f0       	breq	.+6      	; 0x7ea <vfprintf+0x24e>
 7e4:	88 37       	cpi	r24, 0x78	; 120
 7e6:	21 f0       	breq	.+8      	; 0x7f0 <vfprintf+0x254>
 7e8:	b0 c0       	rjmp	.+352    	; 0x94a <__stack+0x4b>
 7ea:	e9 2f       	mov	r30, r25
 7ec:	e0 61       	ori	r30, 0x10	; 16
 7ee:	be 2e       	mov	r11, r30
 7f0:	b4 fe       	sbrs	r11, 4
 7f2:	0d c0       	rjmp	.+26     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7f4:	fb 2d       	mov	r31, r11
 7f6:	f4 60       	ori	r31, 0x04	; 4
 7f8:	bf 2e       	mov	r11, r31
 7fa:	09 c0       	rjmp	.+18     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7fc:	34 fe       	sbrs	r3, 4
 7fe:	0a c0       	rjmp	.+20     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 800:	29 2f       	mov	r18, r25
 802:	26 60       	ori	r18, 0x06	; 6
 804:	b2 2e       	mov	r11, r18
 806:	06 c0       	rjmp	.+12     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 808:	28 e0       	ldi	r18, 0x08	; 8
 80a:	30 e0       	ldi	r19, 0x00	; 0
 80c:	05 c0       	rjmp	.+10     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 80e:	20 e1       	ldi	r18, 0x10	; 16
 810:	30 e0       	ldi	r19, 0x00	; 0
 812:	02 c0       	rjmp	.+4      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 814:	20 e1       	ldi	r18, 0x10	; 16
 816:	32 e0       	ldi	r19, 0x02	; 2
 818:	f8 01       	movw	r30, r16
 81a:	b7 fe       	sbrs	r11, 7
 81c:	07 c0       	rjmp	.+14     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 81e:	60 81       	ld	r22, Z
 820:	71 81       	ldd	r23, Z+1	; 0x01
 822:	82 81       	ldd	r24, Z+2	; 0x02
 824:	93 81       	ldd	r25, Z+3	; 0x03
 826:	0c 5f       	subi	r16, 0xFC	; 252
 828:	1f 4f       	sbci	r17, 0xFF	; 255
 82a:	06 c0       	rjmp	.+12     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 82c:	60 81       	ld	r22, Z
 82e:	71 81       	ldd	r23, Z+1	; 0x01
 830:	80 e0       	ldi	r24, 0x00	; 0
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	0e 5f       	subi	r16, 0xFE	; 254
 836:	1f 4f       	sbci	r17, 0xFF	; 255
 838:	a3 01       	movw	r20, r6
 83a:	0e 94 01 05 	call	0xa02	; 0xa02 <__ultoa_invert>
 83e:	88 2e       	mov	r8, r24
 840:	86 18       	sub	r8, r6
 842:	fb 2d       	mov	r31, r11
 844:	ff 77       	andi	r31, 0x7F	; 127
 846:	3f 2e       	mov	r3, r31
 848:	36 fe       	sbrs	r3, 6
 84a:	0d c0       	rjmp	.+26     	; 0x866 <__DATA_REGION_LENGTH__+0x66>
 84c:	23 2d       	mov	r18, r3
 84e:	2e 7f       	andi	r18, 0xFE	; 254
 850:	a2 2e       	mov	r10, r18
 852:	89 14       	cp	r8, r9
 854:	58 f4       	brcc	.+22     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
 856:	34 fe       	sbrs	r3, 4
 858:	0b c0       	rjmp	.+22     	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 85a:	32 fc       	sbrc	r3, 2
 85c:	09 c0       	rjmp	.+18     	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 85e:	83 2d       	mov	r24, r3
 860:	8e 7e       	andi	r24, 0xEE	; 238
 862:	a8 2e       	mov	r10, r24
 864:	05 c0       	rjmp	.+10     	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 866:	b8 2c       	mov	r11, r8
 868:	a3 2c       	mov	r10, r3
 86a:	03 c0       	rjmp	.+6      	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 86c:	b8 2c       	mov	r11, r8
 86e:	01 c0       	rjmp	.+2      	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 870:	b9 2c       	mov	r11, r9
 872:	a4 fe       	sbrs	r10, 4
 874:	0f c0       	rjmp	.+30     	; 0x894 <__DATA_REGION_LENGTH__+0x94>
 876:	fe 01       	movw	r30, r28
 878:	e8 0d       	add	r30, r8
 87a:	f1 1d       	adc	r31, r1
 87c:	80 81       	ld	r24, Z
 87e:	80 33       	cpi	r24, 0x30	; 48
 880:	21 f4       	brne	.+8      	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
 882:	9a 2d       	mov	r25, r10
 884:	99 7e       	andi	r25, 0xE9	; 233
 886:	a9 2e       	mov	r10, r25
 888:	09 c0       	rjmp	.+18     	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
 88a:	a2 fe       	sbrs	r10, 2
 88c:	06 c0       	rjmp	.+12     	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
 88e:	b3 94       	inc	r11
 890:	b3 94       	inc	r11
 892:	04 c0       	rjmp	.+8      	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
 894:	8a 2d       	mov	r24, r10
 896:	86 78       	andi	r24, 0x86	; 134
 898:	09 f0       	breq	.+2      	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
 89a:	b3 94       	inc	r11
 89c:	a3 fc       	sbrc	r10, 3
 89e:	11 c0       	rjmp	.+34     	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
 8a0:	a0 fe       	sbrs	r10, 0
 8a2:	06 c0       	rjmp	.+12     	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
 8a4:	b2 14       	cp	r11, r2
 8a6:	88 f4       	brcc	.+34     	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
 8a8:	28 0c       	add	r2, r8
 8aa:	92 2c       	mov	r9, r2
 8ac:	9b 18       	sub	r9, r11
 8ae:	0e c0       	rjmp	.+28     	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
 8b0:	b2 14       	cp	r11, r2
 8b2:	60 f4       	brcc	.+24     	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
 8b4:	b6 01       	movw	r22, r12
 8b6:	80 e2       	ldi	r24, 0x20	; 32
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	0e 94 c5 04 	call	0x98a	; 0x98a <fputc>
 8be:	b3 94       	inc	r11
 8c0:	f7 cf       	rjmp	.-18     	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
 8c2:	b2 14       	cp	r11, r2
 8c4:	18 f4       	brcc	.+6      	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
 8c6:	2b 18       	sub	r2, r11
 8c8:	02 c0       	rjmp	.+4      	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 8ca:	98 2c       	mov	r9, r8
 8cc:	21 2c       	mov	r2, r1
 8ce:	a4 fe       	sbrs	r10, 4
 8d0:	10 c0       	rjmp	.+32     	; 0x8f2 <__DATA_REGION_LENGTH__+0xf2>
 8d2:	b6 01       	movw	r22, r12
 8d4:	80 e3       	ldi	r24, 0x30	; 48
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	0e 94 c5 04 	call	0x98a	; 0x98a <fputc>
 8dc:	a2 fe       	sbrs	r10, 2
 8de:	17 c0       	rjmp	.+46     	; 0x90e <__stack+0xf>
 8e0:	a1 fc       	sbrc	r10, 1
 8e2:	03 c0       	rjmp	.+6      	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
 8e4:	88 e7       	ldi	r24, 0x78	; 120
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	02 c0       	rjmp	.+4      	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
 8ea:	88 e5       	ldi	r24, 0x58	; 88
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	b6 01       	movw	r22, r12
 8f0:	0c c0       	rjmp	.+24     	; 0x90a <__stack+0xb>
 8f2:	8a 2d       	mov	r24, r10
 8f4:	86 78       	andi	r24, 0x86	; 134
 8f6:	59 f0       	breq	.+22     	; 0x90e <__stack+0xf>
 8f8:	a1 fe       	sbrs	r10, 1
 8fa:	02 c0       	rjmp	.+4      	; 0x900 <__stack+0x1>
 8fc:	8b e2       	ldi	r24, 0x2B	; 43
 8fe:	01 c0       	rjmp	.+2      	; 0x902 <__stack+0x3>
 900:	80 e2       	ldi	r24, 0x20	; 32
 902:	a7 fc       	sbrc	r10, 7
 904:	8d e2       	ldi	r24, 0x2D	; 45
 906:	b6 01       	movw	r22, r12
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	0e 94 c5 04 	call	0x98a	; 0x98a <fputc>
 90e:	89 14       	cp	r8, r9
 910:	38 f4       	brcc	.+14     	; 0x920 <__stack+0x21>
 912:	b6 01       	movw	r22, r12
 914:	80 e3       	ldi	r24, 0x30	; 48
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	0e 94 c5 04 	call	0x98a	; 0x98a <fputc>
 91c:	9a 94       	dec	r9
 91e:	f7 cf       	rjmp	.-18     	; 0x90e <__stack+0xf>
 920:	8a 94       	dec	r8
 922:	f3 01       	movw	r30, r6
 924:	e8 0d       	add	r30, r8
 926:	f1 1d       	adc	r31, r1
 928:	80 81       	ld	r24, Z
 92a:	b6 01       	movw	r22, r12
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	0e 94 c5 04 	call	0x98a	; 0x98a <fputc>
 932:	81 10       	cpse	r8, r1
 934:	f5 cf       	rjmp	.-22     	; 0x920 <__stack+0x21>
 936:	22 20       	and	r2, r2
 938:	09 f4       	brne	.+2      	; 0x93c <__stack+0x3d>
 93a:	42 ce       	rjmp	.-892    	; 0x5c0 <vfprintf+0x24>
 93c:	b6 01       	movw	r22, r12
 93e:	80 e2       	ldi	r24, 0x20	; 32
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	0e 94 c5 04 	call	0x98a	; 0x98a <fputc>
 946:	2a 94       	dec	r2
 948:	f6 cf       	rjmp	.-20     	; 0x936 <__stack+0x37>
 94a:	f6 01       	movw	r30, r12
 94c:	86 81       	ldd	r24, Z+6	; 0x06
 94e:	97 81       	ldd	r25, Z+7	; 0x07
 950:	02 c0       	rjmp	.+4      	; 0x956 <__stack+0x57>
 952:	8f ef       	ldi	r24, 0xFF	; 255
 954:	9f ef       	ldi	r25, 0xFF	; 255
 956:	2b 96       	adiw	r28, 0x0b	; 11
 958:	e2 e1       	ldi	r30, 0x12	; 18
 95a:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__epilogue_restores__>

0000095e <strnlen_P>:
 95e:	fc 01       	movw	r30, r24
 960:	05 90       	lpm	r0, Z+
 962:	61 50       	subi	r22, 0x01	; 1
 964:	70 40       	sbci	r23, 0x00	; 0
 966:	01 10       	cpse	r0, r1
 968:	d8 f7       	brcc	.-10     	; 0x960 <strnlen_P+0x2>
 96a:	80 95       	com	r24
 96c:	90 95       	com	r25
 96e:	8e 0f       	add	r24, r30
 970:	9f 1f       	adc	r25, r31
 972:	08 95       	ret

00000974 <strnlen>:
 974:	fc 01       	movw	r30, r24
 976:	61 50       	subi	r22, 0x01	; 1
 978:	70 40       	sbci	r23, 0x00	; 0
 97a:	01 90       	ld	r0, Z+
 97c:	01 10       	cpse	r0, r1
 97e:	d8 f7       	brcc	.-10     	; 0x976 <strnlen+0x2>
 980:	80 95       	com	r24
 982:	90 95       	com	r25
 984:	8e 0f       	add	r24, r30
 986:	9f 1f       	adc	r25, r31
 988:	08 95       	ret

0000098a <fputc>:
 98a:	0f 93       	push	r16
 98c:	1f 93       	push	r17
 98e:	cf 93       	push	r28
 990:	df 93       	push	r29
 992:	fb 01       	movw	r30, r22
 994:	23 81       	ldd	r18, Z+3	; 0x03
 996:	21 fd       	sbrc	r18, 1
 998:	03 c0       	rjmp	.+6      	; 0x9a0 <fputc+0x16>
 99a:	8f ef       	ldi	r24, 0xFF	; 255
 99c:	9f ef       	ldi	r25, 0xFF	; 255
 99e:	2c c0       	rjmp	.+88     	; 0x9f8 <fputc+0x6e>
 9a0:	22 ff       	sbrs	r18, 2
 9a2:	16 c0       	rjmp	.+44     	; 0x9d0 <fputc+0x46>
 9a4:	46 81       	ldd	r20, Z+6	; 0x06
 9a6:	57 81       	ldd	r21, Z+7	; 0x07
 9a8:	24 81       	ldd	r18, Z+4	; 0x04
 9aa:	35 81       	ldd	r19, Z+5	; 0x05
 9ac:	42 17       	cp	r20, r18
 9ae:	53 07       	cpc	r21, r19
 9b0:	44 f4       	brge	.+16     	; 0x9c2 <fputc+0x38>
 9b2:	a0 81       	ld	r26, Z
 9b4:	b1 81       	ldd	r27, Z+1	; 0x01
 9b6:	9d 01       	movw	r18, r26
 9b8:	2f 5f       	subi	r18, 0xFF	; 255
 9ba:	3f 4f       	sbci	r19, 0xFF	; 255
 9bc:	31 83       	std	Z+1, r19	; 0x01
 9be:	20 83       	st	Z, r18
 9c0:	8c 93       	st	X, r24
 9c2:	26 81       	ldd	r18, Z+6	; 0x06
 9c4:	37 81       	ldd	r19, Z+7	; 0x07
 9c6:	2f 5f       	subi	r18, 0xFF	; 255
 9c8:	3f 4f       	sbci	r19, 0xFF	; 255
 9ca:	37 83       	std	Z+7, r19	; 0x07
 9cc:	26 83       	std	Z+6, r18	; 0x06
 9ce:	14 c0       	rjmp	.+40     	; 0x9f8 <fputc+0x6e>
 9d0:	8b 01       	movw	r16, r22
 9d2:	ec 01       	movw	r28, r24
 9d4:	fb 01       	movw	r30, r22
 9d6:	00 84       	ldd	r0, Z+8	; 0x08
 9d8:	f1 85       	ldd	r31, Z+9	; 0x09
 9da:	e0 2d       	mov	r30, r0
 9dc:	09 95       	icall
 9de:	89 2b       	or	r24, r25
 9e0:	e1 f6       	brne	.-72     	; 0x99a <fputc+0x10>
 9e2:	d8 01       	movw	r26, r16
 9e4:	16 96       	adiw	r26, 0x06	; 6
 9e6:	8d 91       	ld	r24, X+
 9e8:	9c 91       	ld	r25, X
 9ea:	17 97       	sbiw	r26, 0x07	; 7
 9ec:	01 96       	adiw	r24, 0x01	; 1
 9ee:	17 96       	adiw	r26, 0x07	; 7
 9f0:	9c 93       	st	X, r25
 9f2:	8e 93       	st	-X, r24
 9f4:	16 97       	sbiw	r26, 0x06	; 6
 9f6:	ce 01       	movw	r24, r28
 9f8:	df 91       	pop	r29
 9fa:	cf 91       	pop	r28
 9fc:	1f 91       	pop	r17
 9fe:	0f 91       	pop	r16
 a00:	08 95       	ret

00000a02 <__ultoa_invert>:
 a02:	fa 01       	movw	r30, r20
 a04:	aa 27       	eor	r26, r26
 a06:	28 30       	cpi	r18, 0x08	; 8
 a08:	51 f1       	breq	.+84     	; 0xa5e <__ultoa_invert+0x5c>
 a0a:	20 31       	cpi	r18, 0x10	; 16
 a0c:	81 f1       	breq	.+96     	; 0xa6e <__ultoa_invert+0x6c>
 a0e:	e8 94       	clt
 a10:	6f 93       	push	r22
 a12:	6e 7f       	andi	r22, 0xFE	; 254
 a14:	6e 5f       	subi	r22, 0xFE	; 254
 a16:	7f 4f       	sbci	r23, 0xFF	; 255
 a18:	8f 4f       	sbci	r24, 0xFF	; 255
 a1a:	9f 4f       	sbci	r25, 0xFF	; 255
 a1c:	af 4f       	sbci	r26, 0xFF	; 255
 a1e:	b1 e0       	ldi	r27, 0x01	; 1
 a20:	3e d0       	rcall	.+124    	; 0xa9e <__ultoa_invert+0x9c>
 a22:	b4 e0       	ldi	r27, 0x04	; 4
 a24:	3c d0       	rcall	.+120    	; 0xa9e <__ultoa_invert+0x9c>
 a26:	67 0f       	add	r22, r23
 a28:	78 1f       	adc	r23, r24
 a2a:	89 1f       	adc	r24, r25
 a2c:	9a 1f       	adc	r25, r26
 a2e:	a1 1d       	adc	r26, r1
 a30:	68 0f       	add	r22, r24
 a32:	79 1f       	adc	r23, r25
 a34:	8a 1f       	adc	r24, r26
 a36:	91 1d       	adc	r25, r1
 a38:	a1 1d       	adc	r26, r1
 a3a:	6a 0f       	add	r22, r26
 a3c:	71 1d       	adc	r23, r1
 a3e:	81 1d       	adc	r24, r1
 a40:	91 1d       	adc	r25, r1
 a42:	a1 1d       	adc	r26, r1
 a44:	20 d0       	rcall	.+64     	; 0xa86 <__ultoa_invert+0x84>
 a46:	09 f4       	brne	.+2      	; 0xa4a <__ultoa_invert+0x48>
 a48:	68 94       	set
 a4a:	3f 91       	pop	r19
 a4c:	2a e0       	ldi	r18, 0x0A	; 10
 a4e:	26 9f       	mul	r18, r22
 a50:	11 24       	eor	r1, r1
 a52:	30 19       	sub	r19, r0
 a54:	30 5d       	subi	r19, 0xD0	; 208
 a56:	31 93       	st	Z+, r19
 a58:	de f6       	brtc	.-74     	; 0xa10 <__ultoa_invert+0xe>
 a5a:	cf 01       	movw	r24, r30
 a5c:	08 95       	ret
 a5e:	46 2f       	mov	r20, r22
 a60:	47 70       	andi	r20, 0x07	; 7
 a62:	40 5d       	subi	r20, 0xD0	; 208
 a64:	41 93       	st	Z+, r20
 a66:	b3 e0       	ldi	r27, 0x03	; 3
 a68:	0f d0       	rcall	.+30     	; 0xa88 <__ultoa_invert+0x86>
 a6a:	c9 f7       	brne	.-14     	; 0xa5e <__ultoa_invert+0x5c>
 a6c:	f6 cf       	rjmp	.-20     	; 0xa5a <__ultoa_invert+0x58>
 a6e:	46 2f       	mov	r20, r22
 a70:	4f 70       	andi	r20, 0x0F	; 15
 a72:	40 5d       	subi	r20, 0xD0	; 208
 a74:	4a 33       	cpi	r20, 0x3A	; 58
 a76:	18 f0       	brcs	.+6      	; 0xa7e <__ultoa_invert+0x7c>
 a78:	49 5d       	subi	r20, 0xD9	; 217
 a7a:	31 fd       	sbrc	r19, 1
 a7c:	40 52       	subi	r20, 0x20	; 32
 a7e:	41 93       	st	Z+, r20
 a80:	02 d0       	rcall	.+4      	; 0xa86 <__ultoa_invert+0x84>
 a82:	a9 f7       	brne	.-22     	; 0xa6e <__ultoa_invert+0x6c>
 a84:	ea cf       	rjmp	.-44     	; 0xa5a <__ultoa_invert+0x58>
 a86:	b4 e0       	ldi	r27, 0x04	; 4
 a88:	a6 95       	lsr	r26
 a8a:	97 95       	ror	r25
 a8c:	87 95       	ror	r24
 a8e:	77 95       	ror	r23
 a90:	67 95       	ror	r22
 a92:	ba 95       	dec	r27
 a94:	c9 f7       	brne	.-14     	; 0xa88 <__ultoa_invert+0x86>
 a96:	00 97       	sbiw	r24, 0x00	; 0
 a98:	61 05       	cpc	r22, r1
 a9a:	71 05       	cpc	r23, r1
 a9c:	08 95       	ret
 a9e:	9b 01       	movw	r18, r22
 aa0:	ac 01       	movw	r20, r24
 aa2:	0a 2e       	mov	r0, r26
 aa4:	06 94       	lsr	r0
 aa6:	57 95       	ror	r21
 aa8:	47 95       	ror	r20
 aaa:	37 95       	ror	r19
 aac:	27 95       	ror	r18
 aae:	ba 95       	dec	r27
 ab0:	c9 f7       	brne	.-14     	; 0xaa4 <__ultoa_invert+0xa2>
 ab2:	62 0f       	add	r22, r18
 ab4:	73 1f       	adc	r23, r19
 ab6:	84 1f       	adc	r24, r20
 ab8:	95 1f       	adc	r25, r21
 aba:	a0 1d       	adc	r26, r0
 abc:	08 95       	ret

00000abe <__prologue_saves__>:
 abe:	2f 92       	push	r2
 ac0:	3f 92       	push	r3
 ac2:	4f 92       	push	r4
 ac4:	5f 92       	push	r5
 ac6:	6f 92       	push	r6
 ac8:	7f 92       	push	r7
 aca:	8f 92       	push	r8
 acc:	9f 92       	push	r9
 ace:	af 92       	push	r10
 ad0:	bf 92       	push	r11
 ad2:	cf 92       	push	r12
 ad4:	df 92       	push	r13
 ad6:	ef 92       	push	r14
 ad8:	ff 92       	push	r15
 ada:	0f 93       	push	r16
 adc:	1f 93       	push	r17
 ade:	cf 93       	push	r28
 ae0:	df 93       	push	r29
 ae2:	cd b7       	in	r28, 0x3d	; 61
 ae4:	de b7       	in	r29, 0x3e	; 62
 ae6:	ca 1b       	sub	r28, r26
 ae8:	db 0b       	sbc	r29, r27
 aea:	0f b6       	in	r0, 0x3f	; 63
 aec:	f8 94       	cli
 aee:	de bf       	out	0x3e, r29	; 62
 af0:	0f be       	out	0x3f, r0	; 63
 af2:	cd bf       	out	0x3d, r28	; 61
 af4:	09 94       	ijmp

00000af6 <__epilogue_restores__>:
 af6:	2a 88       	ldd	r2, Y+18	; 0x12
 af8:	39 88       	ldd	r3, Y+17	; 0x11
 afa:	48 88       	ldd	r4, Y+16	; 0x10
 afc:	5f 84       	ldd	r5, Y+15	; 0x0f
 afe:	6e 84       	ldd	r6, Y+14	; 0x0e
 b00:	7d 84       	ldd	r7, Y+13	; 0x0d
 b02:	8c 84       	ldd	r8, Y+12	; 0x0c
 b04:	9b 84       	ldd	r9, Y+11	; 0x0b
 b06:	aa 84       	ldd	r10, Y+10	; 0x0a
 b08:	b9 84       	ldd	r11, Y+9	; 0x09
 b0a:	c8 84       	ldd	r12, Y+8	; 0x08
 b0c:	df 80       	ldd	r13, Y+7	; 0x07
 b0e:	ee 80       	ldd	r14, Y+6	; 0x06
 b10:	fd 80       	ldd	r15, Y+5	; 0x05
 b12:	0c 81       	ldd	r16, Y+4	; 0x04
 b14:	1b 81       	ldd	r17, Y+3	; 0x03
 b16:	aa 81       	ldd	r26, Y+2	; 0x02
 b18:	b9 81       	ldd	r27, Y+1	; 0x01
 b1a:	ce 0f       	add	r28, r30
 b1c:	d1 1d       	adc	r29, r1
 b1e:	0f b6       	in	r0, 0x3f	; 63
 b20:	f8 94       	cli
 b22:	de bf       	out	0x3e, r29	; 62
 b24:	0f be       	out	0x3f, r0	; 63
 b26:	cd bf       	out	0x3d, r28	; 61
 b28:	ed 01       	movw	r28, r26
 b2a:	08 95       	ret

00000b2c <_exit>:
 b2c:	f8 94       	cli

00000b2e <__stop_program>:
 b2e:	ff cf       	rjmp	.-2      	; 0xb2e <__stop_program>
